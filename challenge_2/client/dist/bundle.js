/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),s=n(4097),l=n(4109),c=n(7985),u=n(5061);e.exports=function(e){return new Promise((function(t,n){var d=e.data,f=e.headers;r.isFormData(d)&&delete f["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",g=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";f.Authorization="Basic "+btoa(p+":"+g)}var m=s(e.baseURL,e.url);if(h.open(e.method.toUpperCase(),a(m,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in h?l(h.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};o(t,n,i),h=null}},h.onabort=function(){h&&(n(u("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){n(u("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(u(t,e,"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var b=(e.withCredentials||c(m))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;b&&(f[e.xsrfHeaderName]=b)}if("setRequestHeader"in h&&r.forEach(f,(function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete f[t]:h.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),n(e),h=null)})),d||(d=null),h.send(d)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185);function s(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=s(n(5655));l.Axios=i,l.create=function(e){return s(a(l.defaults,e))},l.Cancel=n(5263),l.CancelToken=n(4972),l.isCancel=n(6502),l.all=function(e){return Promise.all(e)},l.spread=n(8713),l.isAxiosError=n(6268),e.exports=l,e.exports.default=l},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),s=n(7185);function l(e){this.defaults=e,this.interceptors={request:new i,response:new i}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=l},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5655);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function l(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function c(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=l(void 0,t[e]))})),r.forEach(i,c),r.forEach(a,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(void 0,t[o])})),r.forEach(s,(function(r){r in t?n[r]=l(e[r],t[r]):r in e&&(n[r]=l(void 0,e[r]))}));var u=o.concat(i).concat(a).concat(s),d=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===u.indexOf(e)}));return r.forEach(d,c),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},5655:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,l={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(s=n(5448)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(i)})),e.exports=l},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4867:(e,t,n)=>{"use strict";var r=n(1849),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===o.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:l,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:c,isStream:function(e){return s(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},8552:(e,t,n)=>{var r=n(852)(n(5639),"DataView");e.exports=r},1989:(e,t,n)=>{var r=n(1789),o=n(401),i=n(7667),a=n(1327),s=n(1866);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},8407:(e,t,n)=>{var r=n(7040),o=n(4125),i=n(2117),a=n(7518),s=n(4705);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},7071:(e,t,n)=>{var r=n(852)(n(5639),"Map");e.exports=r},3369:(e,t,n)=>{var r=n(4785),o=n(1285),i=n(6e3),a=n(9916),s=n(5265);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},3818:(e,t,n)=>{var r=n(852)(n(5639),"Promise");e.exports=r},8525:(e,t,n)=>{var r=n(852)(n(5639),"Set");e.exports=r},8668:(e,t,n)=>{var r=n(3369),o=n(619),i=n(2385);function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}a.prototype.add=a.prototype.push=o,a.prototype.has=i,e.exports=a},6384:(e,t,n)=>{var r=n(8407),o=n(7465),i=n(3779),a=n(7599),s=n(4758),l=n(4309);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=s,c.prototype.set=l,e.exports=c},2705:(e,t,n)=>{var r=n(5639).Symbol;e.exports=r},1149:(e,t,n)=>{var r=n(5639).Uint8Array;e.exports=r},577:(e,t,n)=>{var r=n(852)(n(5639),"WeakMap");e.exports=r},6874:e=>{e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},4963:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}},4636:(e,t,n)=>{var r=n(2545),o=n(5694),i=n(1469),a=n(4144),s=n(5776),l=n(6719),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),u=!n&&o(e),d=!n&&!u&&a(e),f=!n&&!u&&!d&&l(e),h=n||u||d||f,p=h?r(e.length,String):[],g=p.length;for(var m in e)!t&&!c.call(e,m)||h&&("length"==m||d&&("offset"==m||"parent"==m)||f&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||s(m,g))||p.push(m);return p}},9932:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},2488:e=>{e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},2908:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},6556:(e,t,n)=>{var r=n(9465),o=n(7813);e.exports=function(e,t,n){(void 0!==n&&!o(e[t],n)||void 0===n&&!(t in e))&&r(e,t,n)}},4865:(e,t,n)=>{var r=n(9465),o=n(7813),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];i.call(e,t)&&o(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},8470:(e,t,n)=>{var r=n(7813);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},9465:(e,t,n)=>{var r=n(8777);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},3118:(e,t,n)=>{var r=n(3218),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},1848:e=>{e.exports=function(e,t,n,r){for(var o=e.length,i=n+(r?1:-1);r?i--:++i<o;)if(t(e[i],i,e))return i;return-1}},8483:(e,t,n)=>{var r=n(5063)();e.exports=r},7786:(e,t,n)=>{var r=n(1811),o=n(327);e.exports=function(e,t){for(var n=0,i=(t=r(t,e)).length;null!=e&&n<i;)e=e[o(t[n++])];return n&&n==i?e:void 0}},8866:(e,t,n)=>{var r=n(2488),o=n(1469);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},4239:(e,t,n)=>{var r=n(2705),o=n(9607),i=n(2333),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?o(e):i(e)}},13:e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},9454:(e,t,n)=>{var r=n(4239),o=n(7005);e.exports=function(e){return o(e)&&"[object Arguments]"==r(e)}},939:(e,t,n)=>{var r=n(1299),o=n(7005);e.exports=function e(t,n,i,a,s){return t===n||(null==t||null==n||!o(t)&&!o(n)?t!=t&&n!=n:r(t,n,i,a,e,s))}},1299:(e,t,n)=>{var r=n(6384),o=n(7114),i=n(8351),a=n(6096),s=n(4160),l=n(1469),c=n(4144),u=n(6719),d="[object Arguments]",f="[object Array]",h="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,g,m,b){var v=l(e),y=l(t),x=v?f:s(e),_=y?f:s(t),w=(x=x==d?h:x)==h,k=(_=_==d?h:_)==h,S=x==_;if(S&&c(e)){if(!c(t))return!1;v=!0,w=!1}if(S&&!w)return b||(b=new r),v||u(e)?o(e,t,n,g,m,b):i(e,t,x,n,g,m,b);if(!(1&n)){var M=w&&p.call(e,"__wrapped__"),E=k&&p.call(t,"__wrapped__");if(M||E){var C=M?e.value():e,P=E?t.value():t;return b||(b=new r),m(C,P,n,g,b)}}return!!S&&(b||(b=new r),a(e,t,n,g,m,b))}},2958:(e,t,n)=>{var r=n(6384),o=n(939);e.exports=function(e,t,n,i){var a=n.length,s=a,l=!i;if(null==e)return!s;for(e=Object(e);a--;){var c=n[a];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++a<s;){var u=(c=n[a])[0],d=e[u],f=c[1];if(l&&c[2]){if(void 0===d&&!(u in e))return!1}else{var h=new r;if(i)var p=i(d,f,u,e,t,h);if(!(void 0===p?o(f,d,3,i,h):p))return!1}}return!0}},8458:(e,t,n)=>{var r=n(3560),o=n(5346),i=n(3218),a=n(346),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,d=c.hasOwnProperty,f=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?f:s).test(a(e))}},8749:(e,t,n)=>{var r=n(4239),o=n(1780),i=n(7005),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},7206:(e,t,n)=>{var r=n(1573),o=n(6432),i=n(6557),a=n(1469),s=n(9601);e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?a(e)?o(e[0],e[1]):r(e):s(e)}},280:(e,t,n)=>{var r=n(5726),o=n(6916),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},313:(e,t,n)=>{var r=n(3218),o=n(5726),i=n(3498),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=o(e),n=[];for(var s in e)("constructor"!=s||!t&&a.call(e,s))&&n.push(s);return n}},1573:(e,t,n)=>{var r=n(2958),o=n(1499),i=n(2634);e.exports=function(e){var t=o(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},6432:(e,t,n)=>{var r=n(939),o=n(7361),i=n(9095),a=n(5403),s=n(9162),l=n(2634),c=n(327);e.exports=function(e,t){return a(e)&&s(t)?l(c(e),t):function(n){var a=o(n,e);return void 0===a&&a===t?i(n,e):r(t,a,3)}}},2980:(e,t,n)=>{var r=n(6384),o=n(6556),i=n(8483),a=n(9783),s=n(3218),l=n(1704),c=n(6390);e.exports=function e(t,n,u,d,f){t!==n&&i(n,(function(i,l){if(f||(f=new r),s(i))a(t,n,l,u,e,d,f);else{var h=d?d(c(t,l),i,l+"",t,n,f):void 0;void 0===h&&(h=i),o(t,l,h)}}),l)}},9783:(e,t,n)=>{var r=n(6556),o=n(4626),i=n(7133),a=n(278),s=n(8517),l=n(5694),c=n(1469),u=n(9246),d=n(4144),f=n(3560),h=n(3218),p=n(8630),g=n(6719),m=n(6390),b=n(9881);e.exports=function(e,t,n,v,y,x,_){var w=m(e,n),k=m(t,n),S=_.get(k);if(S)r(e,n,S);else{var M=x?x(w,k,n+"",e,t,_):void 0,E=void 0===M;if(E){var C=c(k),P=!C&&d(k),O=!C&&!P&&g(k);M=k,C||P||O?c(w)?M=w:u(w)?M=a(w):P?(E=!1,M=o(k,!0)):O?(E=!1,M=i(k,!0)):M=[]:p(k)||l(k)?(M=w,l(w)?M=b(w):h(w)&&!f(w)||(M=s(k))):E=!1}E&&(_.set(k,M),y(M,k,v,x,_),_.delete(k)),r(e,n,M)}}},371:e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},9152:(e,t,n)=>{var r=n(7786);e.exports=function(e){return function(t){return r(t,e)}}},5976:(e,t,n)=>{var r=n(6557),o=n(5357),i=n(61);e.exports=function(e,t){return i(o(e,t,r),e+"")}},6560:(e,t,n)=>{var r=n(5703),o=n(8777),i=n(6557),a=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:i;e.exports=a},2545:e=>{e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},531:(e,t,n)=>{var r=n(2705),o=n(9932),i=n(1469),a=n(3448),s=r?r.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return o(t,e)+"";if(a(t))return l?l.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},7561:(e,t,n)=>{var r=n(7990),o=/^\s+/;e.exports=function(e){return e?e.slice(0,r(e)+1).replace(o,""):e}},1717:e=>{e.exports=function(e){return function(t){return e(t)}}},4757:e=>{e.exports=function(e,t){return e.has(t)}},1811:(e,t,n)=>{var r=n(1469),o=n(5403),i=n(5514),a=n(9833);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:i(a(e))}},4318:(e,t,n)=>{var r=n(1149);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},4626:(e,t,n)=>{e=n.nmd(e);var r=n(5639),o=t&&!t.nodeType&&t,i=o&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.Buffer:void 0,s=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=s?s(n):new e.constructor(n);return e.copy(r),r}},7133:(e,t,n)=>{var r=n(4318);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},278:e=>{e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},8363:(e,t,n)=>{var r=n(4865),o=n(9465);e.exports=function(e,t,n,i){var a=!n;n||(n={});for(var s=-1,l=t.length;++s<l;){var c=t[s],u=i?i(n[c],e[c],c,n,e):void 0;void 0===u&&(u=e[c]),a?o(n,c,u):r(n,c,u)}return n}},4429:(e,t,n)=>{var r=n(5639)["__core-js_shared__"];e.exports=r},1463:(e,t,n)=>{var r=n(5976),o=n(6612);e.exports=function(e){return r((function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:void 0,s=i>2?n[2]:void 0;for(a=e.length>3&&"function"==typeof a?(i--,a):void 0,s&&o(n[0],n[1],s)&&(a=i<3?void 0:a,i=1),t=Object(t);++r<i;){var l=n[r];l&&e(t,l,r,a)}return t}))}},5063:e=>{e.exports=function(e){return function(t,n,r){for(var o=-1,i=Object(t),a=r(t),s=a.length;s--;){var l=a[e?s:++o];if(!1===n(i[l],l,i))break}return t}}},7740:(e,t,n)=>{var r=n(7206),o=n(8612),i=n(3674);e.exports=function(e){return function(t,n,a){var s=Object(t);if(!o(t)){var l=r(n,3);t=i(t),n=function(e){return l(s[e],e,s)}}var c=e(t,n,a);return c>-1?s[l?t[c]:c]:void 0}}},8777:(e,t,n)=>{var r=n(852),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},7114:(e,t,n)=>{var r=n(8668),o=n(2908),i=n(4757);e.exports=function(e,t,n,a,s,l){var c=1&n,u=e.length,d=t.length;if(u!=d&&!(c&&d>u))return!1;var f=l.get(e),h=l.get(t);if(f&&h)return f==t&&h==e;var p=-1,g=!0,m=2&n?new r:void 0;for(l.set(e,t),l.set(t,e);++p<u;){var b=e[p],v=t[p];if(a)var y=c?a(v,b,p,t,e,l):a(b,v,p,e,t,l);if(void 0!==y){if(y)continue;g=!1;break}if(m){if(!o(t,(function(e,t){if(!i(m,t)&&(b===e||s(b,e,n,a,l)))return m.push(t)}))){g=!1;break}}else if(b!==v&&!s(b,v,n,a,l)){g=!1;break}}return l.delete(e),l.delete(t),g}},8351:(e,t,n)=>{var r=n(2705),o=n(1149),i=n(7813),a=n(7114),s=n(8776),l=n(1814),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,d,f){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new o(e),new o(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var h=s;case"[object Set]":var p=1&r;if(h||(h=l),e.size!=t.size&&!p)return!1;var g=f.get(e);if(g)return g==t;r|=2,f.set(e,t);var m=a(h(e),h(t),r,c,d,f);return f.delete(e),m;case"[object Symbol]":if(u)return u.call(e)==u.call(t)}return!1}},6096:(e,t,n)=>{var r=n(8234),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,i,a,s){var l=1&n,c=r(e),u=c.length;if(u!=r(t).length&&!l)return!1;for(var d=u;d--;){var f=c[d];if(!(l?f in t:o.call(t,f)))return!1}var h=s.get(e),p=s.get(t);if(h&&p)return h==t&&p==e;var g=!0;s.set(e,t),s.set(t,e);for(var m=l;++d<u;){var b=e[f=c[d]],v=t[f];if(i)var y=l?i(v,b,f,t,e,s):i(b,v,f,e,t,s);if(!(void 0===y?b===v||a(b,v,n,i,s):y)){g=!1;break}m||(m="constructor"==f)}if(g&&!m){var x=e.constructor,_=t.constructor;x==_||!("constructor"in e)||!("constructor"in t)||"function"==typeof x&&x instanceof x&&"function"==typeof _&&_ instanceof _||(g=!1)}return s.delete(e),s.delete(t),g}},1957:(e,t,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;e.exports=r},8234:(e,t,n)=>{var r=n(8866),o=n(9551),i=n(3674);e.exports=function(e){return r(e,i,o)}},5050:(e,t,n)=>{var r=n(7019);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},1499:(e,t,n)=>{var r=n(9162),o=n(3674);e.exports=function(e){for(var t=o(e),n=t.length;n--;){var i=t[n],a=e[i];t[n]=[i,a,r(a)]}return t}},852:(e,t,n)=>{var r=n(8458),o=n(7801);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},5924:(e,t,n)=>{var r=n(5569)(Object.getPrototypeOf,Object);e.exports=r},9607:(e,t,n)=>{var r=n(2705),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[s]=n:delete e[s]),o}},9551:(e,t,n)=>{var r=n(4963),o=n(479),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return i.call(e,t)})))}:o;e.exports=s},4160:(e,t,n)=>{var r=n(8552),o=n(7071),i=n(3818),a=n(8525),s=n(577),l=n(4239),c=n(346),u="[object Map]",d="[object Promise]",f="[object Set]",h="[object WeakMap]",p="[object DataView]",g=c(r),m=c(o),b=c(i),v=c(a),y=c(s),x=l;(r&&x(new r(new ArrayBuffer(1)))!=p||o&&x(new o)!=u||i&&x(i.resolve())!=d||a&&x(new a)!=f||s&&x(new s)!=h)&&(x=function(e){var t=l(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case g:return p;case m:return u;case b:return d;case v:return f;case y:return h}return t}),e.exports=x},7801:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},222:(e,t,n)=>{var r=n(1811),o=n(5694),i=n(1469),a=n(5776),s=n(1780),l=n(327);e.exports=function(e,t,n){for(var c=-1,u=(t=r(t,e)).length,d=!1;++c<u;){var f=l(t[c]);if(!(d=null!=e&&n(e,f)))break;e=e[f]}return d||++c!=u?d:!!(u=null==e?0:e.length)&&s(u)&&a(f,u)&&(i(e)||o(e))}},1789:(e,t,n)=>{var r=n(4536);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},401:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},7667:(e,t,n)=>{var r=n(4536),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return o.call(t,e)?t[e]:void 0}},1327:(e,t,n)=>{var r=n(4536),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},1866:(e,t,n)=>{var r=n(4536);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},8517:(e,t,n)=>{var r=n(3118),o=n(5924),i=n(5726);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},5776:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var r=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&t.test(e))&&e>-1&&e%1==0&&e<n}},6612:(e,t,n)=>{var r=n(7813),o=n(8612),i=n(5776),a=n(3218);e.exports=function(e,t,n){if(!a(n))return!1;var s=typeof t;return!!("number"==s?o(n)&&i(t,n.length):"string"==s&&t in n)&&r(n[t],e)}},5403:(e,t,n)=>{var r=n(1469),o=n(3448),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||a.test(e)||!i.test(e)||null!=t&&e in Object(t)}},7019:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},5346:(e,t,n)=>{var r,o=n(4429),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},5726:e=>{var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},9162:(e,t,n)=>{var r=n(3218);e.exports=function(e){return e==e&&!r(e)}},7040:e=>{e.exports=function(){this.__data__=[],this.size=0}},4125:(e,t,n)=>{var r=n(8470),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():o.call(t,n,1),--this.size,0))}},2117:(e,t,n)=>{var r=n(8470);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},7518:(e,t,n)=>{var r=n(8470);e.exports=function(e){return r(this.__data__,e)>-1}},4705:(e,t,n)=>{var r=n(8470);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},4785:(e,t,n)=>{var r=n(1989),o=n(8407),i=n(7071);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},1285:(e,t,n)=>{var r=n(5050);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},6e3:(e,t,n)=>{var r=n(5050);e.exports=function(e){return r(this,e).get(e)}},9916:(e,t,n)=>{var r=n(5050);e.exports=function(e){return r(this,e).has(e)}},5265:(e,t,n)=>{var r=n(5050);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},8776:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},2634:e=>{e.exports=function(e,t){return function(n){return null!=n&&n[e]===t&&(void 0!==t||e in Object(n))}}},4523:(e,t,n)=>{var r=n(8306);e.exports=function(e){var t=r(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},4536:(e,t,n)=>{var r=n(852)(Object,"create");e.exports=r},6916:(e,t,n)=>{var r=n(5569)(Object.keys,Object);e.exports=r},3498:e=>{e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},1167:(e,t,n)=>{e=n.nmd(e);var r=n(1957),o=t&&!t.nodeType&&t,i=o&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,s=function(){try{return i&&i.require&&i.require("util").types||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=s},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5569:e=>{e.exports=function(e,t){return function(n){return e(t(n))}}},5357:(e,t,n)=>{var r=n(6874),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var i=arguments,a=-1,s=o(i.length-t,0),l=Array(s);++a<s;)l[a]=i[t+a];a=-1;for(var c=Array(t+1);++a<t;)c[a]=i[a];return c[t]=n(l),r(e,this,c)}}},5639:(e,t,n)=>{var r=n(1957),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},6390:e=>{e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},619:e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},2385:e=>{e.exports=function(e){return this.__data__.has(e)}},1814:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},61:(e,t,n)=>{var r=n(6560),o=n(1275)(r);e.exports=o},1275:e=>{var t=Date.now;e.exports=function(e){var n=0,r=0;return function(){var o=t(),i=16-(o-r);if(r=o,i>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},7465:(e,t,n)=>{var r=n(8407);e.exports=function(){this.__data__=new r,this.size=0}},3779:e=>{e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},7599:e=>{e.exports=function(e){return this.__data__.get(e)}},4758:e=>{e.exports=function(e){return this.__data__.has(e)}},4309:(e,t,n)=>{var r=n(8407),o=n(7071),i=n(3369);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!o||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(a)}return n.set(e,t),this.size=n.size,this}},5514:(e,t,n)=>{var r=n(4523),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(o,(function(e,n,r,o){t.push(r?o.replace(i,"$1"):n||e)})),t}));e.exports=a},327:(e,t,n)=>{var r=n(3448);e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},346:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},7990:e=>{var t=/\s/;e.exports=function(e){for(var n=e.length;n--&&t.test(e.charAt(n)););return n}},8583:(e,t,n)=>{var r=n(4865),o=n(8363),i=n(1463),a=n(8612),s=n(5726),l=n(3674),c=Object.prototype.hasOwnProperty,u=i((function(e,t){if(s(t)||a(t))o(t,l(t),e);else for(var n in t)c.call(t,n)&&r(e,n,t[n])}));e.exports=u},5703:e=>{e.exports=function(e){return function(){return e}}},7813:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},3311:(e,t,n)=>{var r=n(7740)(n(998));e.exports=r},998:(e,t,n)=>{var r=n(1848),o=n(7206),i=n(554),a=Math.max;e.exports=function(e,t,n){var s=null==e?0:e.length;if(!s)return-1;var l=null==n?0:i(n);return l<0&&(l=a(s+l,0)),r(e,o(t,3),l)}},7361:(e,t,n)=>{var r=n(7786);e.exports=function(e,t,n){var o=null==e?void 0:r(e,t);return void 0===o?n:o}},9095:(e,t,n)=>{var r=n(13),o=n(222);e.exports=function(e,t){return null!=e&&o(e,t,r)}},6557:e=>{e.exports=function(e){return e}},5694:(e,t,n)=>{var r=n(9454),o=n(7005),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},1469:e=>{var t=Array.isArray;e.exports=t},8612:(e,t,n)=>{var r=n(3560),o=n(1780);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},9246:(e,t,n)=>{var r=n(8612),o=n(7005);e.exports=function(e){return o(e)&&r(e)}},4144:(e,t,n)=>{e=n.nmd(e);var r=n(5639),o=n(5062),i=t&&!t.nodeType&&t,a=i&&e&&!e.nodeType&&e,s=a&&a.exports===i?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||o;e.exports=l},3560:(e,t,n)=>{var r=n(4239),o=n(3218);e.exports=function(e){if(!o(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},1780:e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},8630:(e,t,n)=>{var r=n(4239),o=n(5924),i=n(7005),a=Function.prototype,s=Object.prototype,l=a.toString,c=s.hasOwnProperty,u=l.call(Object);e.exports=function(e){if(!i(e)||"[object Object]"!=r(e))return!1;var t=o(e);if(null===t)return!0;var n=c.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&l.call(n)==u}},3448:(e,t,n)=>{var r=n(4239),o=n(7005);e.exports=function(e){return"symbol"==typeof e||o(e)&&"[object Symbol]"==r(e)}},6719:(e,t,n)=>{var r=n(8749),o=n(1717),i=n(1167),a=i&&i.isTypedArray,s=a?o(a):r;e.exports=s},3674:(e,t,n)=>{var r=n(4636),o=n(280),i=n(8612);e.exports=function(e){return i(e)?r(e):o(e)}},1704:(e,t,n)=>{var r=n(4636),o=n(313),i=n(8612);e.exports=function(e){return i(e)?r(e,!0):o(e)}},8306:(e,t,n)=>{var r=n(3369);function o(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(o.Cache||r),n}o.Cache=r,e.exports=o},2492:(e,t,n)=>{var r=n(2980),o=n(1463)((function(e,t,n){r(e,t,n)}));e.exports=o},9601:(e,t,n)=>{var r=n(371),o=n(9152),i=n(5403),a=n(327);e.exports=function(e){return i(e)?r(a(e)):o(e)}},479:e=>{e.exports=function(){return[]}},5062:e=>{e.exports=function(){return!1}},8601:(e,t,n)=>{var r=n(4841);e.exports=function(e){return e?Infinity===(e=r(e))||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},554:(e,t,n)=>{var r=n(8601);e.exports=function(e){var t=r(e),n=t%1;return t==t?n?t-n:t:0}},4841:(e,t,n)=>{var r=n(7561),o=n(3218),i=n(3448),a=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,l=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(i(e))return NaN;if(o(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=o(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=r(e);var n=s.test(e);return n||l.test(e)?c(e.slice(2),n?2:8):a.test(e)?NaN:+e}},9881:(e,t,n)=>{var r=n(8363),o=n(1704);e.exports=function(e){return r(e,o(e))}},9833:(e,t,n)=>{var r=n(531);e.exports=function(e){return null==e?"":r(e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,l=o(e),c=1;c<arguments.length;c++){for(var u in a=Object(arguments[c]))n.call(a,u)&&(l[u]=a[u]);if(t){s=t(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function c(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,p={},g={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){b[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];b[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){b[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){b[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){b[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){b[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){b[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){b[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){b[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function x(e,t,n,r){var o=b.hasOwnProperty(t)?b[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!h.call(g,e)||!h.call(p,e)&&(f.test(e)?g[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);b[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);b[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);b[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){b[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),b.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){b[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,S=60107,M=60108,E=60114,C=60109,P=60110,O=60112,T=60113,D=60120,L=60115,R=60116,A=60121,z=60128,N=60129,j=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var I=Symbol.for;w=I("react.element"),k=I("react.portal"),S=I("react.fragment"),M=I("react.strict_mode"),E=I("react.profiler"),C=I("react.provider"),P=I("react.context"),O=I("react.forward_ref"),T=I("react.suspense"),D=I("react.suspense_list"),L=I("react.memo"),R=I("react.lazy"),A=I("react.block"),I("react.scope"),z=I("react.opaque.id"),N=I("react.debug_trace_mode"),j=I("react.offscreen"),F=I("react.legacy_hidden")}var B,V="function"==typeof Symbol&&Symbol.iterator;function W(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function H(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var U=!1;function $(e,t){if(!e||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{U=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?H(e):""}function Y(e){switch(e.tag){case 5:return H(e.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 22:return $(e.type._render,!1);case 1:return $(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case E:return"Profiler";case M:return"StrictMode";case T:return"Suspense";case D:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return q(e.type);case A:return q(e._render);case R:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function ce(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ue(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var pe,ge,me=(ge=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((pe=pe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=pe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ge(e,t)}))}:ge);function be(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ve={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ve.hasOwnProperty(e)&&ve[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ve).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ve[t]=ve[e]}))}));var we=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Me(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ce=null,Pe=null;function Oe(e){if(e=Jr(e)){if("function"!=typeof Ee)throw Error(a(280));var t=e.stateNode;t&&(t=to(t),Ee(e.stateNode,e.type,t))}}function Te(e){Ce?Pe?Pe.push(e):Pe=[e]:Ce=e}function De(){if(Ce){var e=Ce,t=Pe;if(Pe=Ce=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Le(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function Ae(){}var ze=Le,Ne=!1,je=!1;function Fe(){null===Ce&&null===Pe||(Ae(),De())}function Ie(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(d)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(ge){Be=!1}function We(e,t,n,r,o,i,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var He=!1,Ue=null,$e=!1,Ye=null,qe={onError:function(e){He=!0,Ue=e}};function Qe(e,t,n,r,o,i,a,s,l){He=!1,Ue=null,We.apply(qe,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Xe(e)!==e)throw Error(a(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,st=null,lt=null,ct=new Map,ut=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function gt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=ht(t,n,r,o,i),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Zr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function vt(e,t,n){bt(e)&&n.delete(t)}function yt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&bt(at)&&(at=null),null!==st&&bt(st)&&(st=null),null!==lt&&bt(lt)&&(lt=null),ct.forEach(vt),ut.forEach(vt)}function xt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,yt)))}function _t(e){function t(t){return xt(t,e)}if(0<it.length){xt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&xt(at,e),null!==st&&xt(st,e),null!==lt&&xt(lt,e),ct.forEach(t),ut.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)mt(n),null===n.blockedOn&&dt.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},St={},Mt={};function Et(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Mt)return St[e]=n[t];return e}d&&(Mt=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ct=Et("animationend"),Pt=Et("animationiteration"),Ot=Et("animationstart"),Tt=Et("transitionend"),Dt=new Map,Lt=new Map,Rt=["abort","abort",Ct,"animationEnd",Pt,"animationIteration",Ot,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function At(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Lt.set(r,t),Dt.set(r,o),c(o,[r])}}(0,i.unstable_now)();var zt=8;function Nt(e){if(0!=(1&e))return zt=15,1;if(0!=(2&e))return zt=14,2;if(0!=(4&e))return zt=13,4;var t=24&e;return 0!==t?(zt=12,t):0!=(32&e)?(zt=11,32):0!=(t=192&e)?(zt=10,t):0!=(256&e)?(zt=9,256):0!=(t=3584&e)?(zt=8,t):0!=(4096&e)?(zt=7,4096):0!=(t=4186112&e)?(zt=6,t):0!=(t=62914560&e)?(zt=5,t):67108864&e?(zt=4,67108864):0!=(134217728&e)?(zt=3,134217728):0!=(t=805306368&e)?(zt=2,t):0!=(1073741824&e)?(zt=1,1073741824):(zt=8,e)}function jt(e,t){var n=e.pendingLanes;if(0===n)return zt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==i)r=i,o=zt=15;else if(0!=(i=134217727&n)){var l=i&~a;0!==l?(r=Nt(l),o=zt):0!=(s&=i)&&(r=Nt(s),o=zt)}else 0!=(i=n&~a)?(r=Nt(i),o=zt):0!==s&&(r=Nt(s),o=zt);if(0===r)return 0;if(r=n&((0>(r=31-Ht(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Nt(t),o<=zt)return t;zt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Ht(t)),r|=e[n],t&=~o;return r}function Ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function It(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?It(10,t):e;case 10:return 0===(e=Bt(192&~t))?It(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function Vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Wt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ut(e)/$t|0)|0},Ut=Math.log,$t=Math.LN2,Yt=i.unstable_UserBlockingPriority,qt=i.unstable_runWithPriority,Qt=!0;function Xt(e,t,n,r){Ne||Ae();var o=Gt,i=Ne;Ne=!0;try{Re(o,e,t,n,r)}finally{(Ne=i)||Fe()}}function Kt(e,t,n,r){qt(Yt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Qt)if((o=0==(4&t))&&0<it.length&&-1<ft.indexOf(e))e=ht(null,e,t,n,r),it.push(e);else{var i=Zt(e,t,n,r);if(null===i)o&&pt(e,r);else{if(o){if(-1<ft.indexOf(e))return e=ht(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=gt(at,e,t,n,r,o),!0;case"dragenter":return st=gt(st,e,t,n,r,o),!0;case"mouseover":return lt=gt(lt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ct.set(i,gt(ct.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ut.set(i,gt(ut.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;pt(e,r)}Dr(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=Me(r);if(null!==(o=Zr(o))){var i=Xe(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ke(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Dr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,cn,un,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=sn(dn),hn=o({},dn,{view:0,detail:0}),pn=sn(hn),gn=o({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,cn=e.screenY-un.screenY):cn=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),mn=sn(gn),bn=sn(o({},gn,{dataTransfer:0})),vn=sn(o({},hn,{relatedTarget:0})),yn=sn(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=sn(o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=sn(o({},dn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Mn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function En(){return Mn}var Cn=sn(o({},hn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=sn(o({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=sn(o({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Tn=sn(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Dn=sn(o({},gn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Ln=[9,13,27,32],Rn=d&&"CompositionEvent"in window,An=null;d&&"documentMode"in document&&(An=document.documentMode);var zn=d&&"TextEvent"in window&&!An,Nn=d&&(!Rn||An&&8<An&&11>=An),jn=String.fromCharCode(32),Fn=!1;function In(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Un(e,t,n,r){Te(r),0<(t=Rr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Yn=null;function qn(e){Mr(e,0)}function Qn(e){if(G(eo(e)))return e}function Xn(e,t){if("change"===e)return t}var Kn=!1;if(d){var Gn;if(d){var Zn="oninput"in document;if(!Zn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Zn="function"==typeof Jn.oninput}Gn=Zn}else Gn=!1;Kn=Gn&&(!document.documentMode||9<document.documentMode)}function er(){$n&&($n.detachEvent("onpropertychange",tr),Yn=$n=null)}function tr(e){if("value"===e.propertyName&&Qn(Yn)){var t=[];if(Un(t,Yn,e,Me(e)),e=qn,Ne)e(t);else{Ne=!0;try{Le(e,t)}finally{Ne=!1,Fe()}}}}function nr(e,t,n){"focusin"===e?(er(),Yn=n,($n=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Yn)}function or(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=d&&"documentMode"in document&&11>=document.documentMode,gr=null,mr=null,br=null,vr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==gr||gr!==Z(r)||(r="selectionStart"in(r=gr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&lr(br,r)||(br=r,0<(r=Rr(mr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}At("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),At("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),At(Rt,2);for(var xr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),_r=0;_r<xr.length;_r++)Lt.set(xr[_r],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var wr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(wr));function Sr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,l,c){if(Qe.apply(this,arguments),He){if(!He)throw Error(a(198));var u=Ue;He=!1,Ue=null,$e||($e=!0,Ye=u)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break e;Sr(o,s,c),i=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break e;Sr(o,s,c),i=l}}}if($e)throw e=Ye,$e=!1,Ye=null,e}function Er(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var Cr="_reactListening"+Math.random().toString(36).slice(2);function Pr(e){e[Cr]||(e[Cr]=!0,s.forEach((function(t){kr.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=no(i),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(o|=4),Tr(i,e,o,t),a.add(s))}function Tr(e,t,n,r){var o=Lt.get(t);switch(void 0===o?2:o){case 0:o=Xt;break;case 1:o=Kt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Dr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=Zr(s)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(je)return e();je=!0;try{ze(e,t,n)}finally{je=!1,Fe()}}((function(){var r=i,o=Me(n),a=[];e:{var s=Dt.get(e);if(void 0!==s){var l=fn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":c="focus",l=vn;break;case"focusout":c="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=On;break;case Ct:case Pt:case Ot:l=yn;break;case Tt:l=Tn;break;case"scroll":l=pn;break;case"wheel":l=Dn;break;case"copy":case"cut":case"paste":l=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var u=0!=(4&t),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=Ie(p,f))&&u.push(Lr(p,g,h))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,o),a.push({event:s,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Zr(c)&&!c[Kr])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?Zr(c):null)&&(c!==(d=Xe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=mn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=Pn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:eo(l),h=null==c?s:eo(c),(s=new u(g,p+"leave",l,n,o)).target=d,s.relatedTarget=h,g=null,Zr(o)===r&&((u=new u(f,p+"enter",c,n,o)).target=h,u.relatedTarget=d,g=u),d=g,l&&c)e:{for(f=c,p=0,h=u=l;h;h=Ar(h))p++;for(h=0,g=f;g;g=Ar(g))h++;for(;0<p-h;)u=Ar(u),p--;for(;0<h-p;)f=Ar(f),h--;for(;p--;){if(u===f||null!==f&&u===f.alternate)break e;u=Ar(u),f=Ar(f)}u=null}else u=null;null!==l&&zr(a,s,l,u,!1),null!==c&&null!==d&&zr(a,d,c,u,!0)}if("select"===(l=(s=r?eo(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Xn;else if(Hn(s))if(Kn)m=ir;else{m=rr;var b=nr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=or);switch(m&&(m=m(e,r))?Un(a,m,n,o):(b&&b(e,s,r),"focusout"===e&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&oe(s,"number",s.value)),b=r?eo(r):window,e){case"focusin":(Hn(b)||"true"===b.contentEditable)&&(gr=b,mr=r,br=null);break;case"focusout":br=mr=gr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,yr(a,n,o);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(a,n,o)}var v;if(Rn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Vn?In(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Nn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Vn&&(v=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Vn=!0)),0<(b=Rr(r,y)).length&&(y=new _n(y,e,null,n,o),a.push({event:y,listeners:b}),(v||null!==(v=Bn(n)))&&(y.data=v))),(v=zn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Fn=!0,jn);case"textInput":return(e=t.data)===jn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Rn&&In(e,t)?(e=nn(),tn=en=Jt=null,Vn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Nn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Rr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=v)}Mr(a,t)}))}function Lr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ie(e,n))&&r.unshift(Lr(e,i,o)),null!=(i=Ie(e,t))&&r.push(Lr(e,i,o))),e=e.return}return r}function Ar(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,o?null!=(l=Ie(n,i))&&a.unshift(Lr(n,l,s)):o||null!=(l=Ie(n,i))&&a.push(Lr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Nr(){}var jr=null,Fr=null;function Ir(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Vr="function"==typeof setTimeout?setTimeout:void 0,Wr="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Ur(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $r(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Yr=0,qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Xr="__reactProps$"+qr,Kr="__reactContainer$"+qr,Gr="__reactEvents$"+qr;function Zr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Kr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=$r(e);null!==e;){if(n=e[Qr])return n;e=$r(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Qr]||e[Kr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function to(e){return e[Xr]||null}function no(e){var t=e[Gr];return void 0===t&&(t=e[Gr]=new Set),t}var ro=[],oo=-1;function io(e){return{current:e}}function ao(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function so(e,t){oo++,ro[oo]=e.current,e.current=t}var lo={},co=io(lo),uo=io(!1),fo=lo;function ho(e,t){var n=e.type.contextTypes;if(!n)return lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function po(e){return null!=e.childContextTypes}function go(){ao(uo),ao(co)}function mo(e,t,n){if(co.current!==lo)throw Error(a(168));so(co,t),so(uo,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,q(t)||"Unknown",i));return o({},n,r)}function vo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||lo,fo=co.current,so(co,e),so(uo,uo.current),!0}function yo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bo(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,ao(uo),ao(co),so(co,e)):ao(uo),so(uo,n)}var xo=null,_o=null,wo=i.unstable_runWithPriority,ko=i.unstable_scheduleCallback,So=i.unstable_cancelCallback,Mo=i.unstable_shouldYield,Eo=i.unstable_requestPaint,Co=i.unstable_now,Po=i.unstable_getCurrentPriorityLevel,Oo=i.unstable_ImmediatePriority,To=i.unstable_UserBlockingPriority,Do=i.unstable_NormalPriority,Lo=i.unstable_LowPriority,Ro=i.unstable_IdlePriority,Ao={},zo=void 0!==Eo?Eo:function(){},No=null,jo=null,Fo=!1,Io=Co(),Bo=1e4>Io?Co:function(){return Co()-Io};function Vo(){switch(Po()){case Oo:return 99;case To:return 98;case Do:return 97;case Lo:return 96;case Ro:return 95;default:throw Error(a(332))}}function Wo(e){switch(e){case 99:return Oo;case 98:return To;case 97:return Do;case 96:return Lo;case 95:return Ro;default:throw Error(a(332))}}function Ho(e,t){return e=Wo(e),wo(e,t)}function Uo(e,t,n){return e=Wo(e),ko(e,t,n)}function $o(){if(null!==jo){var e=jo;jo=null,So(e)}Yo()}function Yo(){if(!Fo&&null!==No){Fo=!0;var e=0;try{var t=No;Ho(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),No=null}catch(t){throw null!==No&&(No=No.slice(e+1)),ko(Oo,$o),t}finally{Fo=!1}}}var qo=_.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Xo=io(null),Ko=null,Go=null,Zo=null;function Jo(){Zo=Go=Ko=null}function ei(e){var t=Xo.current;ao(Xo),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ni(e,t){Ko=e,Zo=Go=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ra=!0),e.firstContext=null)}function ri(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Go){if(null===Ko)throw Error(a(308));Go=t,Ko.dependencies={lanes:0,firstContext:t,responders:null}}else Go=Go.next=t;return e._currentValue}var oi=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ai(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function si(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function li(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ui(e,t,n,r){var i=e.updateQueue;oi=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,l=i.shared.pending;if(null!==l){i.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?a=u:s.next=u,s=c;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==s&&(null===f?d.firstBaseUpdate=u:f.next=u,d.lastBaseUpdate=c)}}if(null!==a){for(f=i.baseState,s=0,d=u=c=null;;){l=a.lane;var h=a.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:h,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var p=e,g=a;switch(l=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){f=p.call(h,f,l);break e}f=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(h,f,l):p))break e;f=o({},f,l);break e;case 2:oi=!0}}null!==a.callback&&(e.flags|=32,null===(l=i.effects)?i.effects=[a]:l.push(a))}else h={eventTime:h,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(u=d=h,c=f):d=d.next=h,s|=l;if(null===(a=a.next)){if(null===(l=i.shared.pending))break;a=l.next,l.next=null,i.lastBaseUpdate=l,i.shared.pending=null}}null===d&&(c=f),i.baseState=c,i.firstBaseUpdate=u,i.lastBaseUpdate=d,zs|=s,e.lanes=s,e.memoizedState=f}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var fi=(new r.Component).refs;function hi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=al(),o=sl(e),i=si(r,o);i.payload=t,null!=n&&(i.callback=n),li(e,i),ll(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=al(),o=sl(e),i=si(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),li(e,i),ll(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=al(),r=sl(e),o=si(n,r);o.tag=2,null!=t&&(o.callback=t),li(e,o),ll(e,r,n)}};function gi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,i))}function mi(e,t,n){var r=!1,o=lo,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(o=po(t)?fo:co.current,i=(r=null!=(r=t.contextTypes))?ho(e,o):lo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=pi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function vi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fi,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ri(i):(i=po(t)?fo:co.current,o.context=ho(e,i)),ui(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(hi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&pi.enqueueReplaceState(o,o.state,null),ui(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var yi=Array.isArray;function xi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function _i(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function wi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Bl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Ul(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=xi(e,t,n),r.return=e,r):((r=Vl(n.type,n.key,n.props,null,e.mode,r)).ref=xi(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$l(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,i){return null===t||7!==t.tag?((t=Wl(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ul(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Vl(t.type,t.key,t.props,null,e.mode,n)).ref=xi(e,null,t),n.return=e,n;case k:return(t=$l(t,e.mode,n)).return=e,t}if(yi(t)||W(t))return(t=Wl(t,e.mode,n,null)).return=e,t;_i(e,t)}return null}function h(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?n.type===S?d(e,t,n.props.children,r,o):c(e,t,n,r):null;case k:return n.key===o?u(e,t,n,r):null}if(yi(n)||W(n))return null!==o?null:d(e,t,n,r,null);_i(e,n)}return null}function p(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===S?d(t,e,r.props.children,o,r.key):c(t,e,r,o);case k:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(yi(r)||W(r))return d(t,e=e.get(n)||null,r,o,null);_i(t,r)}return null}function g(o,a,s,l){for(var c=null,u=null,d=a,g=a=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var b=h(o,d,s[g],l);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(o,d),a=i(b,a,g),null===u?c=b:u.sibling=b,u=b,d=m}if(g===s.length)return n(o,d),c;if(null===d){for(;g<s.length;g++)null!==(d=f(o,s[g],l))&&(a=i(d,a,g),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(o,d);g<s.length;g++)null!==(m=p(d,o,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),a=i(m,a,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(o,e)})),c}function m(o,s,l,c){var u=W(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var d=u=null,g=s,m=s=0,b=null,v=l.next();null!==g&&!v.done;m++,v=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var y=h(o,g,v.value,c);if(null===y){null===g&&(g=b);break}e&&g&&null===y.alternate&&t(o,g),s=i(y,s,m),null===d?u=y:d.sibling=y,d=y,g=b}if(v.done)return n(o,g),u;if(null===g){for(;!v.done;m++,v=l.next())null!==(v=f(o,v.value,c))&&(s=i(v,s,m),null===d?u=v:d.sibling=v,d=v);return u}for(g=r(o,g);!v.done;m++,v=l.next())null!==(v=p(g,o,m,v.value,c))&&(e&&null!==v.alternate&&g.delete(null===v.key?m:v.key),s=i(v,s,m),null===d?u=v:d.sibling=v,d=v);return e&&g.forEach((function(e){return t(o,e)})),u}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===S&&null===i.key;c&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case w:e:{for(u=i.key,c=r;null!==c;){if(c.key===u){switch(c.tag){case 7:if(i.type===S){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}break;default:if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=xi(e,c,i),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}i.type===S?((r=Wl(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Vl(i.type,i.key,i.props,null,e.mode,l)).ref=xi(e,r,i),l.return=e,e=l)}return s(e);case k:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=$l(i,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Ul(i,e.mode,l)).return=e,e=r),s(e);if(yi(i))return g(e,r,i,l);if(W(i))return m(e,r,i,l);if(u&&_i(e,i),void 0===i&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,q(e.type)||"Component"))}return n(e,r)}}var ki=wi(!0),Si=wi(!1),Mi={},Ei=io(Mi),Ci=io(Mi),Pi=io(Mi);function Oi(e){if(e===Mi)throw Error(a(174));return e}function Ti(e,t){switch(so(Pi,t),so(Ci,e),so(Ei,Mi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Ei),so(Ei,t)}function Di(){ao(Ei),ao(Ci),ao(Pi)}function Li(e){Oi(Pi.current);var t=Oi(Ei.current),n=he(t,e.type);t!==n&&(so(Ci,e),so(Ei,n))}function Ri(e){Ci.current===e&&(ao(Ei),ao(Ci))}var Ai=io(0);function zi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ni=null,ji=null,Fi=!1;function Ii(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Bi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Vi(e){if(Fi){var t=ji;if(t){var n=t;if(!Bi(e,t)){if(!(t=Ur(n.nextSibling))||!Bi(e,t))return e.flags=-1025&e.flags|2,Fi=!1,void(Ni=e);Ii(Ni,n)}Ni=e,ji=Ur(t.firstChild)}else e.flags=-1025&e.flags|2,Fi=!1,Ni=e}}function Wi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ni=e}function Hi(e){if(e!==Ni)return!1;if(!Fi)return Wi(e),Fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Br(t,e.memoizedProps))for(t=ji;t;)Ii(e,t),t=Ur(t.nextSibling);if(Wi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ji=Ur(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ji=null}}else ji=Ni?Ur(e.stateNode.nextSibling):null;return!0}function Ui(){ji=Ni=null,Fi=!1}var $i=[];function Yi(){for(var e=0;e<$i.length;e++)$i[e]._workInProgressVersionPrimary=null;$i.length=0}var qi=_.ReactCurrentDispatcher,Qi=_.ReactCurrentBatchConfig,Xi=0,Ki=null,Gi=null,Zi=null,Ji=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,o,i){if(Xi=i,Ki=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qi.current=null===e||null===e.memoizedState?Oa:Ta,e=n(r,o),ea){i=0;do{if(ea=!1,!(25>i))throw Error(a(301));i+=1,Zi=Gi=null,t.updateQueue=null,qi.current=Da,e=n(r,o)}while(ea)}if(qi.current=Pa,t=null!==Gi&&null!==Gi.next,Xi=0,Zi=Gi=Ki=null,Ji=!1,t)throw Error(a(300));return e}function oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Zi?Ki.memoizedState=Zi=e:Zi=Zi.next=e,Zi}function ia(){if(null===Gi){var e=Ki.alternate;e=null!==e?e.memoizedState:null}else e=Gi.next;var t=null===Zi?Ki.memoizedState:Zi.next;if(null!==t)Zi=t,Gi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Gi=e).memoizedState,baseState:Gi.baseState,baseQueue:Gi.baseQueue,queue:Gi.queue,next:null},null===Zi?Ki.memoizedState=Zi=e:Zi=Zi.next=e}return Zi}function aa(e,t){return"function"==typeof t?t(e):t}function sa(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Gi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=s=i=null,c=o;do{var u=c.lane;if((Xi&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var d={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(s=l=d,i=r):l=l.next=d,Ki.lanes|=u,zs|=u}c=c.next}while(null!==c&&c!==o);null===l?i=r:l.next=s,ar(r,t.memoizedState)||(Ra=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function la(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);ar(i,t.memoizedState)||(Ra=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ca(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Xi&e)===e)&&(t._workInProgressVersionPrimary=r,$i.push(t))),e)return n(t._source);throw $i.push(t),Error(a(350))}function ua(e,t,n,r){var o=Cs;if(null===o)throw Error(a(349));var i=t._getVersion,s=i(t._source),l=qi.current,c=l.useState((function(){return ca(o,t,n)})),u=c[1],d=c[0];c=Zi;var f=e.memoizedState,h=f.refs,p=h.getSnapshot,g=f.source;f=f.subscribe;var m=Ki;return e.memoizedState={refs:h,source:t,subscribe:r},l.useEffect((function(){h.getSnapshot=n,h.setSnapshot=u;var e=i(t._source);if(!ar(s,e)){e=n(t._source),ar(d,e)||(u(e),e=sl(m),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var l=31-Ht(a),c=1<<l;r[l]|=e,a&=~c}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=h.getSnapshot,n=h.setSnapshot;try{n(e(t._source));var r=sl(m);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(p,n)&&ar(g,t)&&ar(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:d}).dispatch=u=Ca.bind(null,Ki,e),c.queue=e,c.baseQueue=null,d=ca(o,t,n),c.memoizedState=c.baseState=d),d}function da(e,t,n){return ua(ia(),e,t,n)}function fa(e){var t=oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Ca.bind(null,Ki,e),[t.memoizedState,e]}function ha(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ki.updateQueue)?(t={lastEffect:null},Ki.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pa(e){return e={current:e},oa().memoizedState=e}function ga(){return ia().memoizedState}function ma(e,t,n,r){var o=oa();Ki.flags|=e,o.memoizedState=ha(1|t,n,void 0,void 0===r?null:r)}function ba(e,t,n,r){var o=ia();r=void 0===r?null:r;var i=void 0;if(null!==Gi){var a=Gi.memoizedState;if(i=a.destroy,null!==r&&na(r,a.deps))return void ha(t,n,i,r)}Ki.flags|=e,o.memoizedState=ha(1|t,n,i,r)}function va(e,t){return ma(516,4,e,t)}function ya(e,t){return ba(516,4,e,t)}function xa(e,t){return ba(4,2,e,t)}function _a(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function wa(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,_a.bind(null,t,e),n)}function ka(){}function Sa(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ma(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ea(e,t){var n=Vo();Ho(98>n?98:n,(function(){e(!0)})),Ho(97<n?97:n,(function(){var n=Qi.transition;Qi.transition=1;try{e(!1),t()}finally{Qi.transition=n}}))}function Ca(e,t,n){var r=al(),o=sl(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Ki||null!==a&&a===Ki)ea=Ji=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(i.eagerReducer=a,i.eagerState=l,ar(l,s))return}catch(e){}ll(e,o,r)}}var Pa={readContext:ri,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Oa={readContext:ri,useCallback:function(e,t){return oa().memoizedState=[e,void 0===t?null:t],e},useContext:ri,useEffect:va,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,_a.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ma(4,2,e,t)},useMemo:function(e,t){var n=oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ca.bind(null,Ki,e),[r.memoizedState,e]},useRef:pa,useState:fa,useDebugValue:ka,useDeferredValue:function(e){var t=fa(e),n=t[0],r=t[1];return va((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=fa(!1),t=e[0];return pa(e=Ea.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ua(r,e,t,n)},useOpaqueIdentifier:function(){if(Fi){var e=!1,t=function(e){return{$$typeof:z,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Yr++).toString(36))),Error(a(355))})),n=fa(t)[1];return 0==(2&Ki.mode)&&(Ki.flags|=516,ha(5,(function(){n("r:"+(Yr++).toString(36))}),void 0,null)),t}return fa(t="r:"+(Yr++).toString(36)),t},unstable_isNewReconciler:!1},Ta={readContext:ri,useCallback:Sa,useContext:ri,useEffect:ya,useImperativeHandle:wa,useLayoutEffect:xa,useMemo:Ma,useReducer:sa,useRef:ga,useState:function(){return sa(aa)},useDebugValue:ka,useDeferredValue:function(e){var t=sa(aa),n=t[0],r=t[1];return ya((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=sa(aa)[0];return[ga().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return sa(aa)[0]},unstable_isNewReconciler:!1},Da={readContext:ri,useCallback:Sa,useContext:ri,useEffect:ya,useImperativeHandle:wa,useLayoutEffect:xa,useMemo:Ma,useReducer:la,useRef:ga,useState:function(){return la(aa)},useDebugValue:ka,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return ya((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[ga().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},La=_.ReactCurrentOwner,Ra=!1;function Aa(e,t,n,r){t.child=null===e?Si(t,null,n,r):ki(t,e.child,n,r)}function za(e,t,n,r,o){n=n.render;var i=t.ref;return ni(t,o),r=ra(e,t,n,r,i,o),null===e||Ra?(t.flags|=1,Aa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ja(e,t,o))}function Na(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Il(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Vl(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ja(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?Ja(e,t,i):(t.flags|=1,(e=Bl(a,r)).ref=t.ref,e.return=t,t.child=e)}function ja(e,t,n,r,o,i){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Ra=!1,0==(i&o))return t.lanes=e.lanes,Ja(e,t,i);0!=(16384&e.flags)&&(Ra=!0)}return Ba(e,t,n,r,i)}function Fa(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ml(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ml(0,e),null;t.memoizedState={baseLanes:0},ml(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,ml(0,r);return Aa(e,t,o,n),t.child}function Ia(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ba(e,t,n,r,o){var i=po(n)?fo:co.current;return i=ho(t,i),ni(t,o),n=ra(e,t,n,r,i,o),null===e||Ra?(t.flags|=1,Aa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ja(e,t,o))}function Va(e,t,n,r,o){if(po(n)){var i=!0;vo(t)}else i=!1;if(ni(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),mi(t,n,r),vi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?ri(c):ho(t,c=po(n)?fo:co.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&bi(t,a,r,c),oi=!1;var f=t.memoizedState;a.state=f,ui(t,r,a,o),l=t.memoizedState,s!==r||f!==l||uo.current||oi?("function"==typeof u&&(hi(t,n,u,r),l=t.memoizedState),(s=oi||gi(t,n,s,r,f,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ai(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:Qo(t.type,s),a.props=c,d=t.pendingProps,f=a.context,l="object"==typeof(l=n.contextType)&&null!==l?ri(l):ho(t,l=po(n)?fo:co.current);var h=n.getDerivedStateFromProps;(u="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==l)&&bi(t,a,r,l),oi=!1,f=t.memoizedState,a.state=f,ui(t,r,a,o);var p=t.memoizedState;s!==d||f!==p||uo.current||oi?("function"==typeof h&&(hi(t,n,h,r),p=t.memoizedState),(c=oi||gi(t,n,c,r,f,p,l))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Wa(e,t,n,r,i,o)}function Wa(e,t,n,r,o,i){Ia(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&yo(t,n,!1),Ja(e,t,i);r=t.stateNode,La.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=ki(t,e.child,null,i),t.child=ki(t,null,s,i)):Aa(e,t,s,i),t.memoizedState=r.state,o&&yo(t,n,!0),t.child}function Ha(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ti(e,t.containerInfo)}var Ua,$a,Ya,qa={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,o=t.pendingProps,i=Ai.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),so(Ai,1&i),null===e?(void 0!==o.fallback&&Vi(t),e=o.children,i=o.fallback,a?(e=Xa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,e):"number"==typeof o.unstable_expectedLoadTime?(e=Xa(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,t.lanes=33554432,e):((n=Hl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Bl(a,s),null!==e?r=Bl(e,r):(r=Wl(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=qa,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Bl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Xa(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Hl(t,o,0,null),n=Wl(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ka(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ti(e.return,t)}function Ga(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Za(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Aa(e,t,r.children,n),0!=(2&(r=Ai.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ka(e,n);else if(19===e.tag)Ka(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(Ai,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===zi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ga(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===zi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ga(t,!0,n,null,i,t.lastEffect);break;case"together":Ga(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ja(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zs|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Bl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function es(e,t){if(!Fi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ts(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return po(t.type)&&go(),null;case 3:return Di(),ao(uo),ao(co),Yi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Hi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ri(t);var i=Oi(Pi.current);if(n=t.type,null!==e&&null!=t.stateNode)$a(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Oi(Ei.current),Hi(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Qr]=t,r[Xr]=s,n){case"dialog":Er("cancel",r),Er("close",r);break;case"iframe":case"object":case"embed":Er("load",r);break;case"video":case"audio":for(e=0;e<wr.length;e++)Er(wr[e],r);break;case"source":Er("error",r);break;case"img":case"image":case"link":Er("error",r),Er("load",r);break;case"details":Er("toggle",r);break;case"input":ee(r,s),Er("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Er("invalid",r);break;case"textarea":le(r,s),Er("invalid",r)}for(var c in ke(n,s),e=null,s)s.hasOwnProperty(c)&&(i=s[c],"children"===c?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):l.hasOwnProperty(c)&&null!=i&&"onScroll"===c&&Er("scroll",r));switch(n){case"input":K(r),re(r,s,!0);break;case"textarea":K(r),ue(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Nr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===i.nodeType?i:i.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Qr]=t,e[Xr]=r,Ua(e,t),t.stateNode=e,c=Se(n,r),n){case"dialog":Er("cancel",e),Er("close",e),i=r;break;case"iframe":case"object":case"embed":Er("load",e),i=r;break;case"video":case"audio":for(i=0;i<wr.length;i++)Er(wr[i],e);i=r;break;case"source":Er("error",e),i=r;break;case"img":case"image":case"link":Er("error",e),Er("load",e),i=r;break;case"details":Er("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Er("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Er("invalid",e);break;case"textarea":le(e,r),i=se(e,r),Er("invalid",e);break;default:i=r}ke(n,i);var u=i;for(s in u)if(u.hasOwnProperty(s)){var d=u[s];"style"===s?_e(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&me(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&be(e,d):"number"==typeof d&&be(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Er("scroll",e):null!=d&&x(e,s,d,c))}switch(n){case"input":K(e),re(e,r,!1);break;case"textarea":K(e),ue(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Nr)}Ir(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ya(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Oi(Pi.current),Oi(Ei.current),Hi(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return ao(Ai),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Hi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ai.current)?0===Ls&&(Ls=3):(0!==Ls&&3!==Ls||(Ls=4),null===Cs||0==(134217727&zs)&&0==(134217727&Ns)||fl(Cs,Os))),(r||n)&&(t.flags|=4),null);case 4:return Di(),null===e&&Pr(t.stateNode.containerInfo),null;case 10:return ei(t),null;case 17:return po(t.type)&&go(),null;case 19:if(ao(Ai),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(c=r.rendering))if(s)es(r,!1);else{if(0!==Ls||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=zi(e))){for(t.flags|=64,es(r,!1),null!==(s=c.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,e=c.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return so(Ai,1&Ai.current|2),t.child}e=e.sibling}null!==r.tail&&Bo()>Bs&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=zi(c))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),es(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Fi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Bo()-r.renderingStartTime>Bs&&1073741824!==n&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Bo(),n.sibling=null,t=Ai.current,so(Ai,s?1&t|2:1&t),n):null;case 23:case 24:return bl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function ns(e){switch(e.tag){case 1:po(e.type)&&go();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Di(),ao(uo),ao(co),Yi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ri(e),null;case 13:return ao(Ai),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Ai),null;case 4:return Di(),null;case 10:return ei(e),null;case 23:case 24:return bl(),null;default:return null}}function rs(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function os(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$a=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Oi(Ei.current);var a,s=null;switch(n){case"input":i=J(e,i),r=J(e,r),s=[];break;case"option":i=ie(e,i),r=ie(e,r),s=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":i=se(e,i),r=se(e,r),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Nr)}for(d in ke(n,r),n=null,i)if(!r.hasOwnProperty(d)&&i.hasOwnProperty(d)&&null!=i[d])if("style"===d){var c=i[d];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var u=r[d];if(c=null!=i?i[d]:void 0,r.hasOwnProperty(d)&&u!==c&&(null!=u||null!=c))if("style"===d)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(s||(s=[]),s.push(d,n)),n=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(s=s||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&Er("scroll",e),s||c===u||(s=[])):"object"==typeof u&&null!==u&&u.$$typeof===z?u.toString():(s=s||[]).push(d,u))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},Ya=function(e,t,n,r){n!==r&&(t.flags|=4)};var is="function"==typeof WeakMap?WeakMap:Map;function as(e,t,n){(n=si(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Us||(Us=!0,$s=r),os(0,t)},n}function ss(e,t,n){(n=si(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return os(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ys?Ys=new Set([this]):Ys.add(this),os(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ls="function"==typeof WeakSet?WeakSet:Set;function cs(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Al(e,t)}else t.current=null}function us(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ds(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Dl(n,e),Tl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ir(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function fs(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=xe("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hs(e,t){if(_o&&"function"==typeof _o.onCommitFiberUnmount)try{_o.onCommitFiberUnmount(xo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Dl(t,n);else{r=t;try{o()}catch(e){Al(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cs(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Al(t,e)}break;case 5:cs(t);break;case 4:ys(e,t)}}function ps(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gs(e){return 5===e.tag||3===e.tag||4===e.tag}function ms(e){e:{for(var t=e.return;null!==t;){if(gs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(be(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?bs(e,n,t):vs(e,n,t)}function bs(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Nr));else if(4!==r&&null!==(e=e.child))for(bs(e,t,n),e=e.sibling;null!==e;)bs(e,t,n),e=e.sibling}function vs(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(vs(e,t,n),e=e.sibling;null!==e;)vs(e,t,n),e=e.sibling}function ys(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var s=e,l=o,c=l;;)if(hs(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(s=n,l=o.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(hs(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function xs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,o),t=Se(e,r),o=0;o<i.length;o+=2){var s=i[o],l=i[o+1];"style"===s?_e(n,l):"dangerouslySetInnerHTML"===s?me(n,l):"children"===s?be(n,l):x(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Is=Bo(),fs(t.child,!0)),void _s(t);case 19:return void _s(t);case 17:return;case 23:case 24:return void fs(t,null!==t.memoizedState)}throw Error(a(163))}function _s(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ls),t.forEach((function(t){var r=Nl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ws(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var ks=Math.ceil,Ss=_.ReactCurrentDispatcher,Ms=_.ReactCurrentOwner,Es=0,Cs=null,Ps=null,Os=0,Ts=0,Ds=io(0),Ls=0,Rs=null,As=0,zs=0,Ns=0,js=0,Fs=null,Is=0,Bs=1/0;function Vs(){Bs=Bo()+500}var Ws,Hs=null,Us=!1,$s=null,Ys=null,qs=!1,Qs=null,Xs=90,Ks=[],Gs=[],Zs=null,Js=0,el=null,tl=-1,nl=0,rl=0,ol=null,il=!1;function al(){return 0!=(48&Es)?Bo():-1!==tl?tl:tl=Bo()}function sl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Vo()?1:2;if(0===nl&&(nl=As),0!==qo.transition){0!==rl&&(rl=null!==Fs?Fs.pendingLanes:0),e=nl;var t=4186112&~rl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Vo(),e=It(0!=(4&Es)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nl)}function ll(e,t,n){if(50<Js)throw Js=0,el=null,Error(a(185));if(null===(e=cl(e,t)))return null;Wt(e,t,n),e===Cs&&(Ns|=t,4===Ls&&fl(e,Os));var r=Vo();1===t?0!=(8&Es)&&0==(48&Es)?hl(e):(ul(e,n),0===Es&&(Vs(),$o())):(0==(4&Es)||98!==r&&99!==r||(null===Zs?Zs=new Set([e]):Zs.add(e)),ul(e,n)),Fs=e}function cl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ul(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Ht(s),c=1<<l,u=i[l];if(-1===u){if(0==(c&r)||0!=(c&o)){u=t,Nt(c);var d=zt;i[l]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=t&&(e.expiredLanes|=c);s&=~c}if(r=jt(e,e===Cs?Os:0),t=zt,0===r)null!==n&&(n!==Ao&&So(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ao&&So(n)}15===t?(n=hl.bind(null,e),null===No?(No=[n],jo=ko(Oo,Yo)):No.push(n),n=Ao):n=14===t?Uo(99,hl.bind(null,e)):Uo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),dl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function dl(e){if(tl=-1,rl=nl=0,0!=(48&Es))throw Error(a(327));var t=e.callbackNode;if(Ol()&&e.callbackNode!==t)return null;var n=jt(e,e===Cs?Os:0);if(0===n)return null;var r=n,o=Es;Es|=16;var i=xl();for(Cs===e&&Os===r||(Vs(),vl(e,r));;)try{kl();break}catch(t){yl(e,t)}if(Jo(),Ss.current=i,Es=o,null!==Ps?r=0:(Cs=null,Os=0,r=Ls),0!=(As&Ns))vl(e,0);else if(0!==r){if(2===r&&(Es|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=Ft(e))&&(r=_l(e,n))),1===r)throw t=Rs,vl(e,0),fl(e,n),ul(e,Bo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:El(e);break;case 3:if(fl(e,n),(62914560&n)===n&&10<(r=Is+500-Bo())){if(0!==jt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){al(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Vr(El.bind(null,e),r);break}El(e);break;case 4:if(fl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-Ht(n);i=1<<s,(s=r[s])>o&&(o=s),n&=~i}if(n=o,10<(n=(120>(n=Bo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*ks(n/1960))-n)){e.timeoutHandle=Vr(El.bind(null,e),n);break}El(e);break;case 5:El(e);break;default:throw Error(a(329))}}return ul(e,Bo()),e.callbackNode===t?dl.bind(null,e):null}function fl(e,t){for(t&=~js,t&=~Ns,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),r=1<<n;e[n]=-1,t&=~r}}function hl(e){if(0!=(48&Es))throw Error(a(327));if(Ol(),e===Cs&&0!=(e.expiredLanes&Os)){var t=Os,n=_l(e,t);0!=(As&Ns)&&(n=_l(e,t=jt(e,t)))}else n=_l(e,t=jt(e,0));if(0!==e.tag&&2===n&&(Es|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=Ft(e))&&(n=_l(e,t))),1===n)throw n=Rs,vl(e,0),fl(e,t),ul(e,Bo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,El(e),ul(e,Bo()),null}function pl(e,t){var n=Es;Es|=1;try{return e(t)}finally{0===(Es=n)&&(Vs(),$o())}}function gl(e,t){var n=Es;Es&=-2,Es|=8;try{return e(t)}finally{0===(Es=n)&&(Vs(),$o())}}function ml(e,t){so(Ds,Ts),Ts|=t,As|=t}function bl(){Ts=Ds.current,ao(Ds)}function vl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Wr(n)),null!==Ps)for(n=Ps.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:Di(),ao(uo),ao(co),Yi();break;case 5:Ri(r);break;case 4:Di();break;case 13:case 19:ao(Ai);break;case 10:ei(r);break;case 23:case 24:bl()}n=n.return}Cs=e,Ps=Bl(e.current,null),Os=Ts=As=t,Ls=0,Rs=null,js=Ns=zs=0}function yl(e,t){for(;;){var n=Ps;try{if(Jo(),qi.current=Pa,Ji){for(var r=Ki.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ji=!1}if(Xi=0,Zi=Gi=Ki=null,ea=!1,Ms.current=null,null===n||null===n.return){Ls=1,Rs=t,Ps=null;break}e:{var i=e,a=n.return,s=n,l=t;if(t=Os,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&Ai.current),f=a;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var g=f.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var m=f.updateQueue;if(null===m){var b=new Set;b.add(c),f.updateQueue=b}else m.add(c);if(0==(2&f.mode)){if(f.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var v=si(-1,1);v.tag=2,li(s,v)}s.lanes|=1;break e}l=void 0,s=t;var y=i.pingCache;if(null===y?(y=i.pingCache=new is,l=new Set,y.set(c,l)):void 0===(l=y.get(c))&&(l=new Set,y.set(c,l)),!l.has(s)){l.add(s);var x=zl.bind(null,i,c,s);c.then(x,x)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);l=Error((q(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ls&&(Ls=2),l=rs(l,s),f=a;do{switch(f.tag){case 3:i=l,f.flags|=4096,t&=-t,f.lanes|=t,ci(f,as(0,i,t));break e;case 1:i=l;var _=f.type,w=f.stateNode;if(0==(64&f.flags)&&("function"==typeof _.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Ys||!Ys.has(w)))){f.flags|=4096,t&=-t,f.lanes|=t,ci(f,ss(f,i,t));break e}}f=f.return}while(null!==f)}Ml(n)}catch(e){t=e,Ps===n&&null!==n&&(Ps=n=n.return);continue}break}}function xl(){var e=Ss.current;return Ss.current=Pa,null===e?Pa:e}function _l(e,t){var n=Es;Es|=16;var r=xl();for(Cs===e&&Os===t||vl(e,t);;)try{wl();break}catch(t){yl(e,t)}if(Jo(),Es=n,Ss.current=r,null!==Ps)throw Error(a(261));return Cs=null,Os=0,Ls}function wl(){for(;null!==Ps;)Sl(Ps)}function kl(){for(;null!==Ps&&!Mo();)Sl(Ps)}function Sl(e){var t=Ws(e.alternate,e,Ts);e.memoizedProps=e.pendingProps,null===t?Ml(e):Ps=t,Ms.current=null}function Ml(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ts(n,t,Ts)))return void(Ps=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ts)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ns(t)))return n.flags&=2047,void(Ps=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ps=t);Ps=t=e}while(null!==t);0===Ls&&(Ls=5)}function El(e){var t=Vo();return Ho(99,Cl.bind(null,e,t)),null}function Cl(e,t){do{Ol()}while(null!==Qs);if(0!=(48&Es))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<i;){var c=31-Ht(i),u=1<<c;o[c]=0,s[c]=-1,l[c]=-1,i&=~u}if(null!==Zs&&0==(24&r)&&Zs.has(e)&&Zs.delete(e),e===Cs&&(Ps=Cs=null,Os=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Es,Es|=32,Ms.current=null,jr=Qt,hr(s=fr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,i=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var d=0,f=-1,h=-1,p=0,g=0,m=s,b=null;t:for(;;){for(var v;m!==l||0!==i&&3!==m.nodeType||(f=d+i),m!==c||0!==u&&3!==m.nodeType||(h=d+u),3===m.nodeType&&(d+=m.nodeValue.length),null!==(v=m.firstChild);)b=m,m=v;for(;;){if(m===s)break t;if(b===l&&++p===i&&(f=d),b===c&&++g===u&&(h=d),null!==(v=m.nextSibling))break;b=(m=b).parentNode}m=v}l=-1===f||-1===h?null:{start:f,end:h}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:s,selectionRange:l},Qt=!1,ol=null,il=!1,Hs=r;do{try{Pl()}catch(e){if(null===Hs)throw Error(a(330));Al(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);ol=null,Hs=r;do{try{for(s=e;null!==Hs;){var y=Hs.flags;if(16&y&&be(Hs.stateNode,""),128&y){var x=Hs.alternate;if(null!==x){var _=x.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&y){case 2:ms(Hs),Hs.flags&=-3;break;case 6:ms(Hs),Hs.flags&=-3,xs(Hs.alternate,Hs);break;case 1024:Hs.flags&=-1025;break;case 1028:Hs.flags&=-1025,xs(Hs.alternate,Hs);break;case 4:xs(Hs.alternate,Hs);break;case 8:ys(s,l=Hs);var w=l.alternate;ps(l),null!==w&&ps(w)}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(a(330));Al(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);if(_=Fr,x=fr(),y=_.focusedElem,s=_.selectionRange,x!==y&&y&&y.ownerDocument&&dr(y.ownerDocument.documentElement,y)){null!==s&&hr(y)&&(x=s.start,void 0===(_=s.end)&&(_=x),"selectionStart"in y?(y.selectionStart=x,y.selectionEnd=Math.min(_,y.value.length)):(_=(x=y.ownerDocument||document)&&x.defaultView||window).getSelection&&(_=_.getSelection(),l=y.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!_.extend&&w>s&&(l=s,s=w,w=l),l=ur(y,w),i=ur(y,s),l&&i&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==i.node||_.focusOffset!==i.offset)&&((x=x.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),w>s?(_.addRange(x),_.extend(i.node,i.offset)):(x.setEnd(i.node,i.offset),_.addRange(x))))),x=[];for(_=y;_=_.parentNode;)1===_.nodeType&&x.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<x.length;y++)(_=x[y]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Qt=!!jr,Fr=jr=null,e.current=n,Hs=r;do{try{for(y=e;null!==Hs;){var k=Hs.flags;if(36&k&&ds(y,Hs.alternate,Hs),128&k){x=void 0;var S=Hs.ref;if(null!==S){var M=Hs.stateNode;switch(Hs.tag){case 5:x=M;break;default:x=M}"function"==typeof S?S(x):S.current=x}}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(a(330));Al(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);Hs=null,zo(),Es=o}else e.current=n;if(qs)qs=!1,Qs=e,Xs=t;else for(Hs=r;null!==Hs;)t=Hs.nextEffect,Hs.nextEffect=null,8&Hs.flags&&((k=Hs).sibling=null,k.stateNode=null),Hs=t;if(0===(r=e.pendingLanes)&&(Ys=null),1===r?e===el?Js++:(Js=0,el=e):Js=0,n=n.stateNode,_o&&"function"==typeof _o.onCommitFiberRoot)try{_o.onCommitFiberRoot(xo,n,void 0,64==(64&n.current.flags))}catch(e){}if(ul(e,Bo()),Us)throw Us=!1,e=$s,$s=null,e;return 0!=(8&Es)||$o(),null}function Pl(){for(;null!==Hs;){var e=Hs.alternate;il||null===ol||(0!=(8&Hs.flags)?Je(Hs,ol)&&(il=!0):13===Hs.tag&&ws(e,Hs)&&Je(Hs,ol)&&(il=!0));var t=Hs.flags;0!=(256&t)&&us(e,Hs),0==(512&t)||qs||(qs=!0,Uo(97,(function(){return Ol(),null}))),Hs=Hs.nextEffect}}function Ol(){if(90!==Xs){var e=97<Xs?97:Xs;return Xs=90,Ho(e,Ll)}return!1}function Tl(e,t){Ks.push(t,e),qs||(qs=!0,Uo(97,(function(){return Ol(),null})))}function Dl(e,t){Gs.push(t,e),qs||(qs=!0,Uo(97,(function(){return Ol(),null})))}function Ll(){if(null===Qs)return!1;var e=Qs;if(Qs=null,0!=(48&Es))throw Error(a(331));var t=Es;Es|=32;var n=Gs;Gs=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(a(330));Al(i,e)}}for(n=Ks,Ks=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===i)throw Error(a(330));Al(i,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Es=t,$o(),!0}function Rl(e,t,n){li(e,t=as(0,t=rs(n,t),1)),t=al(),null!==(e=cl(e,1))&&(Wt(e,1,t),ul(e,t))}function Al(e,t){if(3===e.tag)Rl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ys||!Ys.has(r))){var o=ss(n,e=rs(t,e),1);if(li(n,o),o=al(),null!==(n=cl(n,1)))Wt(n,1,o),ul(n,o);else if("function"==typeof r.componentDidCatch&&(null===Ys||!Ys.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function zl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=al(),e.pingedLanes|=e.suspendedLanes&n,Cs===e&&(Os&n)===n&&(4===Ls||3===Ls&&(62914560&Os)===Os&&500>Bo()-Is?vl(e,0):js|=n),ul(e,t)}function Nl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Vo()?1:2:(0===nl&&(nl=As),0===(t=Bt(62914560&~nl))&&(t=4194304))),n=al(),null!==(e=cl(e,t))&&(Wt(e,t,n),ul(e,n))}function jl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(e,t,n,r){return new jl(e,t,n,r)}function Il(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bl(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Vl(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Il(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return Wl(n.children,o,i,t);case N:s=8,o|=16;break;case M:s=8,o|=1;break;case E:return(e=Fl(12,n,t,8|o)).elementType=E,e.type=E,e.lanes=i,e;case T:return(e=Fl(13,n,t,o)).type=T,e.elementType=T,e.lanes=i,e;case D:return(e=Fl(19,n,t,o)).elementType=D,e.lanes=i,e;case j:return Hl(n,o,i,t);case F:return(e=Fl(24,n,t,o)).elementType=F,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:s=10;break e;case P:s=9;break e;case O:s=11;break e;case L:s=14;break e;case R:s=16,r=null;break e;case A:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fl(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Wl(e,t,n,r){return(e=Fl(7,e,r,t)).lanes=n,e}function Hl(e,t,n,r){return(e=Fl(23,e,r,t)).elementType=j,e.lanes=n,e}function Ul(e,t,n){return(e=Fl(6,e,null,t)).lanes=n,e}function $l(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Vt(0),this.expirationTimes=Vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vt(0),this.mutableSourceEagerHydrationData=null}function ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ql(e,t,n,r){var o=t.current,i=al(),s=sl(o);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(po(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(po(c)){n=bo(n,c,l);break e}}n=l}else n=lo;return null===t.context?t.context=n:t.pendingContext=n,(t=si(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),li(o,t),ll(o,s,i),s}function Xl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Kl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gl(e,t){Kl(e,t),(e=e.alternate)&&Kl(e,t)}function Zl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Yl(e,t,null!=n&&!0===n.hydrate),t=Fl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ii(t),e[Kr]=n.current,Pr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ec(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Xl(a);s.call(e)}}Ql(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Zl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Xl(a);l.call(e)}}gl((function(){Ql(t,a,e,o)}))}return Xl(a)}function tc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jl(t))throw Error(a(200));return ql(e,t,null,n)}Ws=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||uo.current)Ra=!0;else{if(0==(n&r)){switch(Ra=!1,t.tag){case 3:Ha(t),Ui();break;case 5:Li(t);break;case 1:po(t.type)&&vo(t);break;case 4:Ti(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;so(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(so(Ai,1&Ai.current),null!==(t=Ja(e,t,n))?t.sibling:null);so(Ai,1&Ai.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Za(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),so(Ai,Ai.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return Ja(e,t,n)}Ra=0!=(16384&e.flags)}else Ra=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=ho(t,co.current),ni(t,n),o=ra(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,po(r)){var i=!0;vo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ii(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&hi(t,r,s,e),o.updater=pi,t.stateNode=o,o._reactInternals=t,vi(t,r,e,n),t=Wa(null,t,r,!0,i,n)}else t.tag=0,Aa(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Il(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===L)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=Ba(null,t,o,e,n);break e;case 1:t=Va(null,t,o,e,n);break e;case 11:t=za(null,t,o,e,n);break e;case 14:t=Na(null,t,o,Qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ba(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Va(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Ha(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ai(e,t),ui(t,r,null,n),(r=t.memoizedState.element)===o)Ui(),t=Ja(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(ji=Ur(t.stateNode.containerInfo.firstChild),Ni=t,i=Fi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],$i.push(i);for(n=Si(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Aa(e,t,r,n),Ui();t=t.child}return t;case 5:return Li(t),null===e&&Vi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,Br(r,o)?s=null:null!==i&&Br(r,i)&&(t.flags|=16),Ia(e,t),Aa(e,t,s,n),t.child;case 6:return null===e&&Vi(t),null;case 13:return Qa(e,t,n);case 4:return Ti(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ki(t,null,r,n):Aa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,za(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Aa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Aa(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,i=o.value;var l=t.type._context;if(so(Xo,l._currentValue),l._currentValue=i,null!==s)if(l=s.value,0==(i=ar(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(s.children===o.children&&!uo.current){t=Ja(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&i)){1===l.tag&&((u=si(-1,n&-n)).tag=2,li(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),ti(l.return,n),c.lanes|=n;break}u=u.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Aa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(o=ri(o,i.unstable_observedBits)),t.flags|=1,Aa(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),Na(e,t,o,i=Qo(o.type,i),r,n);case 15:return ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,po(r)?(e=!0,vo(t)):e=!1,ni(t,n),mi(t,r,o),vi(t,r,o,n),Wa(null,t,r,!0,e,n);case 19:return Za(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},Zl.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},Zl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Kr]=null}))},et=function(e){13===e.tag&&(ll(e,4,al()),Gl(e,4))},tt=function(e){13===e.tag&&(ll(e,67108864,al()),Gl(e,67108864))},nt=function(e){if(13===e.tag){var t=al(),n=sl(e);ll(e,n,t),Gl(e,n)}},rt=function(e,t){return t()},Ee=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(a(90));G(r),ne(r,o)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Le=pl,Re=function(e,t,n,r,o){var i=Es;Es|=4;try{return Ho(98,e.bind(null,t,n,r,o))}finally{0===(Es=i)&&(Vs(),$o())}},Ae=function(){0==(49&Es)&&(function(){if(null!==Zs){var e=Zs;Zs=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,ul(e,Bo())}))}$o()}(),Ol())},ze=function(e,t){var n=Es;Es|=2;try{return e(t)}finally{0===(Es=n)&&(Vs(),$o())}};var nc={Events:[Jr,eo,to,Te,De,Ol,{current:!1}]},rc={findFiberByHostInstance:Zr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},oc={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{xo=ic.inject(oc),_o=ic}catch(ge){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,t.createPortal=tc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Es;if(0!=(48&n))return e(t);Es|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Es=n,$o()}},t.hydrate=function(e,t,n){if(!Jl(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jl(e))throw Error(a(40));return!!e._reactRootContainer&&(gl((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[Kr]=null}))})),!0)},t.unstable_batchedUpdates=pl,t.unstable_createPortal=function(e,t){return tc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),i=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),c=d("react.memo"),u=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}function b(){}function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=m.prototype;var y=v.prototype=new b;y.constructor=v,r(y,m.prototype),y.isPureReactComponent=!0;var x={current:null},_=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!w.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var M=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===r?"."+E(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(M,"$&/")+"/"),C(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(M,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var u=r+E(s=e[c],c);l+=C(s,t,n,u,a)}else if("function"==typeof(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e)))for(e=u.call(e),c=0;!(s=e.next()).done;)l+=C(s=s.value,t,n,u=r+E(s,c++),a);else if("object"===s)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function D(){var e=T.current;if(null===e)throw Error(h(321));return e}var L={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(h(143));return e}},t.Component=m,t.PureComponent=v,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,n){if(null==e)throw Error(h(267,e));var i=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)_.call(t,u)&&!w.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){c=Array(u);for(var d=0;d<u;d++)c[d]=arguments[d+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:s,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return D().useCallback(e,t)},t.useContext=function(e,t){return D().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return D().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return D().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return D().useLayoutEffect(e,t)},t.useMemo=function(e,t){return D().useMemo(e,t)},t.useReducer=function(e,t,n){return D().useReducer(e,t,n)},t.useRef=function(e){return D().useRef(e)},t.useState=function(e){return D().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,d=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(d,0))},r=function(e,t){u=setTimeout(e,t)},o=function(){clearTimeout(u)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,b=-1,v=5,y=0;t.unstable_shouldYield=function(){return t.unstable_now()>=y},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):v=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,_=x.port2;x.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();y=e+v;try{m(!0,e)?_.postMessage(null):(g=!1,m=null)}catch(e){throw _.postMessage(null),e}}else g=!1},n=function(e){m=e,g||(g=!0,_.postMessage(null))},r=function(e,n){b=f((function(){e(t.unstable_now())}),n)},o=function(){h(b),b=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<M(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],s=i+1,l=e[s];if(void 0!==a&&0>M(a,n))void 0!==l&&0>M(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>M(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function M(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var E=[],C=[],P=1,O=null,T=3,D=!1,L=!1,R=!1;function A(e){for(var t=k(C);null!==t;){if(null===t.callback)S(C);else{if(!(t.startTime<=e))break;S(C),t.sortIndex=t.expirationTime,w(E,t)}t=k(C)}}function z(e){if(R=!1,A(e),!L)if(null!==k(E))L=!0,n(N);else{var t=k(C);null!==t&&r(z,t.startTime-e)}}function N(e,n){L=!1,R&&(R=!1,o()),D=!0;var i=T;try{for(A(n),O=k(E);null!==O&&(!(O.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=O.callback;if("function"==typeof a){O.callback=null,T=O.priorityLevel;var s=a(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?O.callback=s:O===k(E)&&S(E),A(n)}else S(E);O=k(E)}if(null!==O)var l=!0;else{var c=k(C);null!==c&&r(z,c.startTime-n),l=!1}return l}finally{O=null,T=i,D=!1}}var j=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||D||(L=!0,n(N))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(E)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=j,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:P++,callback:i,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,w(C,e),null===k(E)&&e===k(C)&&(R?o():R=!0,r(z,a-s))):(e.sortIndex=l,w(E,e),L||D||(L=!0,n(N))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r](i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=n(7294),t=n(3935),r=n(9669),o=n.n(r);const i="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function a(e,t,n){const r=n||(e=>Array.prototype.slice.call(e));let o=!1,a=[];return function(...n){a=r(n),o||(o=!0,i.call(window,(()=>{o=!1,e.apply(t,a)})))}}const s=e=>"start"===e?"left":"end"===e?"right":"center",l=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2;function c(){}const u=function(){let e=0;return function(){return e++}}();function d(e){return null==e}function f(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)}function h(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}const p=e=>("number"==typeof e||e instanceof Number)&&isFinite(+e);function g(e,t){return p(e)?e:t}function m(e,t){return void 0===e?t:e}const b=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function v(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function y(e,t,n,r){let o,i,a;if(f(e))if(i=e.length,r)for(o=i-1;o>=0;o--)t.call(n,e[o],o);else for(o=0;o<i;o++)t.call(n,e[o],o);else if(h(e))for(a=Object.keys(e),i=a.length,o=0;o<i;o++)t.call(n,e[a[o]],a[o])}function x(e,t){let n,r,o,i;if(!e||!t||e.length!==t.length)return!1;for(n=0,r=e.length;n<r;++n)if(o=e[n],i=t[n],o.datasetIndex!==i.datasetIndex||o.index!==i.index)return!1;return!0}function _(e){if(f(e))return e.map(_);if(h(e)){const t=Object.create(null),n=Object.keys(e),r=n.length;let o=0;for(;o<r;++o)t[n[o]]=_(e[n[o]]);return t}return e}function w(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function k(e,t,n,r){if(!w(e))return;const o=t[e],i=n[e];h(o)&&h(i)?S(o,i,r):t[e]=_(i)}function S(e,t,n){const r=f(t)?t:[t],o=r.length;if(!h(e))return e;const i=(n=n||{}).merger||k;for(let a=0;a<o;++a){if(!h(t=r[a]))continue;const o=Object.keys(t);for(let r=0,a=o.length;r<a;++r)i(o[r],e,t,n)}return e}function M(e,t){return S(e,t,{merger:E})}function E(e,t,n){if(!w(e))return;const r=t[e],o=n[e];h(r)&&h(o)?M(r,o):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=_(o))}function C(e,t){const n=e.indexOf(".",t);return-1===n?e.length:n}function P(e,t){if(""===t)return e;let n=0,r=C(t,n);for(;e&&r>n;)e=e[t.substr(n,r-n)],n=r+1,r=C(t,n);return e}function O(e){return e.charAt(0).toUpperCase()+e.slice(1)}const T=e=>void 0!==e,D=e=>"function"==typeof e,L=Math.PI,R=2*L,A=R+L,z=Number.POSITIVE_INFINITY,N=L/180,j=L/2,F=L/4,I=2*L/3,B=Math.log10,V=Math.sign;function W(e){const t=Math.pow(10,Math.floor(B(e))),n=e/t;return(n<=1?1:n<=2?2:n<=5?5:10)*t}function H(e){return!isNaN(parseFloat(e))&&isFinite(e)}function U(e,t,n){return Math.abs(e-t)<n}function $(e,t,n){let r,o,i;for(r=0,o=e.length;r<o;r++)i=e[r][n],isNaN(i)||(t.min=Math.min(t.min,i),t.max=Math.max(t.max,i))}function Y(e){return e*(L/180)}function q(e){return e*(180/L)}function Q(e){if(!p(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}function X(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function K(e,t){return(e-t+A)%R-L}function G(e){return(e%R+R)%R}function Z(e,t,n,r){const o=G(e),i=G(t),a=G(n),s=G(i-o),l=G(a-o),c=G(o-i),u=G(o-a);return o===i||o===a||r&&i===a||s>l&&c<u}function J(e,t,n){return Math.max(t,Math.min(n,e))}const ee=e=>0===e||1===e,te=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*R/n),ne=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*R/n)+1,re={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*j),easeOutSine:e=>Math.sin(e*j),easeInOutSine:e=>-.5*(Math.cos(L*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>ee(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>ee(e)?e:te(e,.075,.3),easeOutElastic:e=>ee(e)?e:ne(e,.075,.3),easeInOutElastic(e){const t=.1125;return ee(e)?e:e<.5?.5*te(2*e,t,.45):.5+.5*ne(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-re.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*re.easeInBounce(2*e):.5*re.easeOutBounce(2*e-1)+.5},oe={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},ie="0123456789ABCDEF",ae=e=>ie[15&e],se=e=>ie[(240&e)>>4]+ie[15&e],le=e=>(240&e)>>4==(15&e);function ce(e){return e+.5|0}const ue=(e,t,n)=>Math.max(Math.min(e,n),t);function de(e){return ue(ce(2.55*e),0,255)}function fe(e){return ue(ce(255*e),0,255)}function he(e){return ue(ce(e/2.55)/100,0,1)}function pe(e){return ue(ce(100*e),0,100)}const ge=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,me=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function be(e,t,n){const r=t*Math.min(n,1-n),o=(t,o=(t+e/30)%12)=>n-r*Math.max(Math.min(o-3,9-o,1),-1);return[o(0),o(8),o(4)]}function ve(e,t,n){const r=(r,o=(r+e/60)%6)=>n-n*t*Math.max(Math.min(o,4-o,1),0);return[r(5),r(3),r(1)]}function ye(e,t,n){const r=be(e,1,.5);let o;for(t+n>1&&(o=1/(t+n),t*=o,n*=o),o=0;o<3;o++)r[o]*=1-t-n,r[o]+=t;return r}function xe(e){const t=e.r/255,n=e.g/255,r=e.b/255,o=Math.max(t,n,r),i=Math.min(t,n,r),a=(o+i)/2;let s,l,c;return o!==i&&(c=o-i,l=a>.5?c/(2-o-i):c/(o+i),s=o===t?(n-r)/c+(n<r?6:0):o===n?(r-t)/c+2:(t-n)/c+4,s=60*s+.5),[0|s,l||0,a]}function _e(e,t,n,r){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,r)).map(fe)}function we(e,t,n){return _e(be,e,t,n)}function ke(e){return(e%360+360)%360}const Se={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Me={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ee;function Ce(e,t,n){if(e){let r=xe(e);r[t]=Math.max(0,Math.min(r[t]+r[t]*n,0===t?360:1)),r=we(r),e.r=r[0],e.g=r[1],e.b=r[2]}}function Pe(e,t){return e?Object.assign(t||{},e):e}function Oe(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=fe(e[3]))):(t=Pe(e,{r:0,g:0,b:0,a:1})).a=fe(t.a),t}function Te(e){return"r"===e.charAt(0)?function(e){const t=ge.exec(e);let n,r,o,i=255;if(t){if(t[7]!==n){const e=+t[7];i=255&(t[8]?de(e):255*e)}return n=+t[1],r=+t[3],o=+t[5],n=255&(t[2]?de(n):n),r=255&(t[4]?de(r):r),o=255&(t[6]?de(o):o),{r:n,g:r,b:o,a:i}}}(e):function(e){const t=me.exec(e);let n,r=255;if(!t)return;t[5]!==n&&(r=t[6]?de(+t[5]):fe(+t[5]));const o=ke(+t[2]),i=+t[3]/100,a=+t[4]/100;return n="hwb"===t[1]?function(e,t,n){return _e(ye,e,t,n)}(o,i,a):"hsv"===t[1]?function(e,t,n){return _e(ve,e,t,n)}(o,i,a):we(o,i,a),{r:n[0],g:n[1],b:n[2],a:r}}(e)}class De{constructor(e){if(e instanceof De)return e;const t=typeof e;let n;var r,o,i;"object"===t?n=Oe(e):"string"===t&&(i=(r=e).length,"#"===r[0]&&(4===i||5===i?o={r:255&17*oe[r[1]],g:255&17*oe[r[2]],b:255&17*oe[r[3]],a:5===i?17*oe[r[4]]:255}:7!==i&&9!==i||(o={r:oe[r[1]]<<4|oe[r[2]],g:oe[r[3]]<<4|oe[r[4]],b:oe[r[5]]<<4|oe[r[6]],a:9===i?oe[r[7]]<<4|oe[r[8]]:255})),n=o||function(e){Ee||(Ee=function(){const e={},t=Object.keys(Me),n=Object.keys(Se);let r,o,i,a,s;for(r=0;r<t.length;r++){for(a=s=t[r],o=0;o<n.length;o++)i=n[o],s=s.replace(i,Se[i]);i=parseInt(Me[a],16),e[s]=[i>>16&255,i>>8&255,255&i]}return e}(),Ee.transparent=[0,0,0,0]);const t=Ee[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}(e)||Te(e)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=Pe(this._rgb);return e&&(e.a=he(e.a)),e}set rgb(e){this._rgb=Oe(e)}rgbString(){return this._valid?(e=this._rgb)&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${he(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`):this._rgb;var e}hexString(){return this._valid?(e=this._rgb,t=function(e){return le(e.r)&&le(e.g)&&le(e.b)&&le(e.a)}(e)?ae:se,e?"#"+t(e.r)+t(e.g)+t(e.b)+(e.a<255?t(e.a):""):e):this._rgb;var e,t}hslString(){return this._valid?function(e){if(!e)return;const t=xe(e),n=t[0],r=pe(t[1]),o=pe(t[2]);return e.a<255?`hsla(${n}, ${r}%, ${o}%, ${he(e.a)})`:`hsl(${n}, ${r}%, ${o}%)`}(this._rgb):this._rgb}mix(e,t){const n=this;if(e){const r=n.rgb,o=e.rgb;let i;const a=t===i?.5:t,s=2*a-1,l=r.a-o.a,c=((s*l==-1?s:(s+l)/(1+s*l))+1)/2;i=1-c,r.r=255&c*r.r+i*o.r+.5,r.g=255&c*r.g+i*o.g+.5,r.b=255&c*r.b+i*o.b+.5,r.a=a*r.a+(1-a)*o.a,n.rgb=r}return n}clone(){return new De(this.rgb)}alpha(e){return this._rgb.a=fe(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=ce(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return Ce(this._rgb,2,e),this}darken(e){return Ce(this._rgb,2,-e),this}saturate(e){return Ce(this._rgb,1,e),this}desaturate(e){return Ce(this._rgb,1,-e),this}rotate(e){return function(e,t){var n=xe(e);n[0]=ke(n[0]+t),n=we(n),e.r=n[0],e.g=n[1],e.b=n[2]}(this._rgb,e),this}}function Le(e){return new De(e)}const Re=e=>e instanceof CanvasGradient||e instanceof CanvasPattern;function Ae(e){return Re(e)?e:Le(e)}function ze(e){return Re(e)?e:Le(e).saturate(.5).darken(.1).hexString()}const Ne=Object.create(null),je=Object.create(null);function Fe(e,t){if(!t)return e;const n=t.split(".");for(let t=0,r=n.length;t<r;++t){const r=n[t];e=e[r]||(e[r]=Object.create(null))}return e}function Ie(e,t,n){return"string"==typeof t?S(Fe(e,t),n):S(Fe(e,""),t)}var Be=new class{constructor(e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>ze(t.backgroundColor),this.hoverBorderColor=(e,t)=>ze(t.borderColor),this.hoverColor=(e,t)=>ze(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(e)}set(e,t){return Ie(this,e,t)}get(e){return Fe(this,e)}describe(e,t){return Ie(je,e,t)}override(e,t){return Ie(Ne,e,t)}route(e,t,n,r){const o=Fe(this,e),i=Fe(this,n),a="_"+t;Object.defineProperties(o,{[a]:{value:o[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[a],t=i[r];return h(e)?Object.assign({},t,e):m(e,t)},set(e){this[a]=e}}})}}({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Ve(e,t,n,r,o){let i=t[o];return i||(i=t[o]=e.measureText(o).width,n.push(o)),i>r&&(r=i),r}function We(e,t,n,r){let o=(r=r||{}).data=r.data||{},i=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(o=r.data={},i=r.garbageCollect=[],r.font=t),e.save(),e.font=t;let a=0;const s=n.length;let l,c,u,d,h;for(l=0;l<s;l++)if(d=n[l],null!=d&&!0!==f(d))a=Ve(e,o,i,a,d);else if(f(d))for(c=0,u=d.length;c<u;c++)h=d[c],null==h||f(h)||(a=Ve(e,o,i,a,h));e.restore();const p=i.length/2;if(p>n.length){for(l=0;l<p;l++)delete o[i[l]];i.splice(0,p)}return a}function He(e,t,n){const r=e.currentDevicePixelRatio,o=0!==n?Math.max(n/2,.5):0;return Math.round((t-o)*r)/r+o}function Ue(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function $e(e,t,n,r){let o,i,a,s,l;const c=t.pointStyle,u=t.rotation,d=t.radius;let f=(u||0)*N;if(c&&"object"==typeof c&&(o=c.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return e.save(),e.translate(n,r),e.rotate(f),e.drawImage(c,-c.width/2,-c.height/2,c.width,c.height),void e.restore();if(!(isNaN(d)||d<=0)){switch(e.beginPath(),c){default:e.arc(n,r,d,0,R),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=I,e.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=I,e.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),e.closePath();break;case"rectRounded":l=.516*d,s=d-l,i=Math.cos(f+F)*s,a=Math.sin(f+F)*s,e.arc(n-i,r-a,l,f-L,f-j),e.arc(n+a,r-i,l,f-j,f),e.arc(n+i,r+a,l,f,f+j),e.arc(n-a,r+i,l,f+j,f+L),e.closePath();break;case"rect":if(!u){s=Math.SQRT1_2*d,e.rect(n-s,r-s,2*s,2*s);break}f+=F;case"rectRot":i=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-i,r-a),e.lineTo(n+a,r-i),e.lineTo(n+i,r+a),e.lineTo(n-a,r+i),e.closePath();break;case"crossRot":f+=F;case"cross":i=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-i,r-a),e.lineTo(n+i,r+a),e.moveTo(n+a,r-i),e.lineTo(n-a,r+i);break;case"star":i=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-i,r-a),e.lineTo(n+i,r+a),e.moveTo(n+a,r-i),e.lineTo(n-a,r+i),f+=F,i=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-i,r-a),e.lineTo(n+i,r+a),e.moveTo(n+a,r-i),e.lineTo(n-a,r+i);break;case"line":i=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-i,r-a),e.lineTo(n+i,r+a);break;case"dash":e.moveTo(n,r),e.lineTo(n+Math.cos(f)*d,r+Math.sin(f)*d)}e.fill(),t.borderWidth>0&&e.stroke()}}function Ye(e,t,n){return n=n||.5,e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function qe(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function Qe(e){e.restore()}function Xe(e,t,n,r,o){if(!t)return e.lineTo(n.x,n.y);if("middle"===o){const r=(t.x+n.x)/2;e.lineTo(r,t.y),e.lineTo(r,n.y)}else"after"===o!=!!r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function Ke(e,t,n,r){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(r?t.cp1x:t.cp2x,r?t.cp1y:t.cp2y,r?n.cp2x:n.cp1x,r?n.cp2y:n.cp1y,n.x,n.y)}function Ge(e,t,n,r,o,i={}){const a=f(t)?t:[t],s=i.strokeWidth>0&&""!==i.strokeColor;let l,c;for(e.save(),i.translation&&e.translate(i.translation[0],i.translation[1]),d(i.rotation)||e.rotate(i.rotation),e.font=o.string,i.color&&(e.fillStyle=i.color),i.textAlign&&(e.textAlign=i.textAlign),i.textBaseline&&(e.textBaseline=i.textBaseline),l=0;l<a.length;++l){if(c=a[l],s&&(i.strokeColor&&(e.strokeStyle=i.strokeColor),d(i.strokeWidth)||(e.lineWidth=i.strokeWidth),e.strokeText(c,n,r,i.maxWidth)),e.fillText(c,n,r,i.maxWidth),i.strikethrough||i.underline){const t=e.measureText(c),o=n-t.actualBoundingBoxLeft,a=n+t.actualBoundingBoxRight,s=r-t.actualBoundingBoxAscent,l=r+t.actualBoundingBoxDescent,u=i.strikethrough?(s+l)/2:l;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=i.decorationWidth||2,e.moveTo(o,u),e.lineTo(a,u),e.stroke()}r+=o.lineHeight}e.restore()}function Ze(e,t){const{x:n,y:r,w:o,h:i,radius:a}=t;e.arc(n+a.topLeft,r+a.topLeft,a.topLeft,-j,L,!0),e.lineTo(n,r+i-a.bottomLeft),e.arc(n+a.bottomLeft,r+i-a.bottomLeft,a.bottomLeft,L,j,!0),e.lineTo(n+o-a.bottomRight,r+i),e.arc(n+o-a.bottomRight,r+i-a.bottomRight,a.bottomRight,j,0,!0),e.lineTo(n+o,r+a.topRight),e.arc(n+o-a.topRight,r+a.topRight,a.topRight,0,-j,!0),e.lineTo(n+a.topLeft,r)}const Je=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),et=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function tt(e,t){const n=(""+e).match(Je);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}function nt(e,t){const n={},r=h(t),o=r?Object.keys(t):t,i=h(e)?r?n=>m(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of o)n[e]=+i(e)||0;return n}function rt(e){return nt(e,{top:"y",right:"x",bottom:"y",left:"x"})}function ot(e){return nt(e,["topLeft","topRight","bottomLeft","bottomRight"])}function it(e){const t=rt(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function at(e,t){e=e||{},t=t||Be.font;let n=m(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let r=m(e.style,t.style);r&&!(""+r).match(et)&&(console.warn('Invalid font style specified: "'+r+'"'),r="");const o={family:m(e.family,t.family),lineHeight:tt(m(e.lineHeight,t.lineHeight),n),size:n,style:r,weight:m(e.weight,t.weight),string:""};return o.string=function(e){return!e||d(e.size)||d(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(o),o}function st(e,t,n,r){let o,i,a,s=!0;for(o=0,i=e.length;o<i;++o)if(a=e[o],void 0!==a&&(void 0!==t&&"function"==typeof a&&(a=a(t),s=!1),void 0!==n&&f(a)&&(a=a[n%a.length],s=!1),void 0!==a))return r&&!s&&(r.cacheable=!1),a}function lt(e,t,n){n=n||(n=>e[n]<t);let r,o=e.length-1,i=0;for(;o-i>1;)r=i+o>>1,n(r)?i=r:o=r;return{lo:i,hi:o}}const ct=(e,t,n)=>lt(e,n,(r=>e[r][t]<n)),ut=(e,t,n)=>lt(e,n,(r=>e[r][t]>=n)),dt=["push","pop","shift","splice","unshift"];function ft(e,t){const n=e._chartjs;if(!n)return;const r=n.listeners,o=r.indexOf(t);-1!==o&&r.splice(o,1),r.length>0||(dt.forEach((t=>{delete e[t]})),delete e._chartjs)}function ht(e){const t=new Set;let n,r;for(n=0,r=e.length;n<r;++n)t.add(e[n]);if(t.size===r)return e;const o=[];return t.forEach((e=>{o.push(e)})),o}function pt(e,t=[""],n=e,r,o=(()=>e[0])){T(r)||(r=Mt("_fallback",e));const i={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:n,_fallback:r,_getTarget:o,override:o=>pt([o,...e],t,n,r)};return new Proxy(i,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,r)=>yt(n,r,(()=>function(e,t,n,r){let o;for(const i of t)if(o=Mt(bt(i,e),n),T(o))return vt(e,o)?kt(n,r,e,o):o}(r,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>Et(e).includes(t),ownKeys:e=>Et(e),set:(e,t,n)=>((e._storage||(e._storage=o()))[t]=n,delete e[t],delete e._keys,!0)})}function gt(e,t,n,r){const o={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:mt(e,r),setContext:t=>gt(e,t,n,r),override:o=>gt(e.override(o),t,n,r)};return new Proxy(o,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>yt(e,t,(()=>function(e,t,n){const{_proxy:r,_context:o,_subProxy:i,_descriptors:a}=e;let s=r[t];return D(s)&&a.isScriptable(t)&&(s=function(e,t,n,r){const{_proxy:o,_context:i,_subProxy:a,_stack:s}=n;if(s.has(e))throw new Error("Recursion detected: "+[...s].join("->")+"->"+e);return s.add(e),t=t(i,a||r),s.delete(e),h(t)&&(t=kt(o._scopes,o,e,t)),t}(t,s,e,n)),f(s)&&s.length&&(s=function(e,t,n,r){const{_proxy:o,_context:i,_subProxy:a,_descriptors:s}=n;if(T(i.index)&&r(e))t=t[i.index%t.length];else if(h(t[0])){const n=t,r=o._scopes.filter((e=>e!==n));t=[];for(const l of n){const n=kt(r,o,e,l);t.push(gt(n,i,a&&a[e],s))}}return t}(t,s,e,a.isIndexable)),vt(t,s)&&(s=gt(s,o,i&&i[t],a)),s}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,r)=>(e[n]=r,delete t[n],!0)})}function mt(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:r=t.indexable,_allKeys:o=t.allKeys}=e;return{allKeys:o,scriptable:n,indexable:r,isScriptable:D(n)?n:()=>n,isIndexable:D(r)?r:()=>r}}const bt=(e,t)=>e?e+O(t):t,vt=(e,t)=>h(t)&&"adapters"!==e;function yt(e,t,n){let r=e[t];return T(r)||(r=n(),T(r)&&(e[t]=r)),r}function xt(e,t,n){return D(e)?e(t,n):e}const _t=(e,t)=>!0===e?t:"string"==typeof e?P(t,e):void 0;function wt(e,t,n,r){for(const o of t){const t=_t(n,o);if(t){e.add(t);const o=xt(t._fallback,n,t);if(T(o)&&o!==n&&o!==r)return o}else if(!1===t&&T(r)&&n!==r)return null}return!1}function kt(e,t,n,r){const o=t._rootScopes,i=xt(t._fallback,n,r),a=[...e,...o],s=new Set;s.add(r);let l=St(s,a,n,i||n);return null!==l&&(!T(i)||i===n||(l=St(s,a,i,l),null!==l))&&pt([...s],[""],o,i,(()=>function(e,t,n){const r=e._getTarget();t in r||(r[t]={});const o=r[t];return f(o)&&h(n)?n:o}(t,n,r)))}function St(e,t,n,r){for(;n;)n=wt(e,t,n,r);return n}function Mt(e,t){for(const n of t){if(!n)continue;const t=n[e];if(T(t))return t}}function Et(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return[...t]}(e._scopes)),t}const Ct=Number.EPSILON||1e-14,Pt=(e,t)=>t<e.length&&!e[t].skip&&e[t],Ot=e=>"x"===e?"y":"x";function Tt(e,t,n,r){const o=e.skip?t:e,i=t,a=n.skip?t:n,s=X(i,o),l=X(a,i);let c=s/(s+l),u=l/(s+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const d=r*c,f=r*u;return{previous:{x:i.x-d*(a.x-o.x),y:i.y-d*(a.y-o.y)},next:{x:i.x+f*(a.x-o.x),y:i.y+f*(a.y-o.y)}}}function Dt(e,t,n){return Math.max(Math.min(e,n),t)}function Lt(e,t,n,r,o){let i,a,s,l;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)!function(e,t="x"){const n=Ot(t),r=e.length,o=Array(r).fill(0),i=Array(r);let a,s,l,c=Pt(e,0);for(a=0;a<r;++a)if(s=l,l=c,c=Pt(e,a+1),l){if(c){const e=c[t]-l[t];o[a]=0!==e?(c[n]-l[n])/e:0}i[a]=s?c?V(o[a-1])!==V(o[a])?0:(o[a-1]+o[a])/2:o[a-1]:o[a]}!function(e,t,n){const r=e.length;let o,i,a,s,l,c=Pt(e,0);for(let u=0;u<r-1;++u)l=c,c=Pt(e,u+1),l&&c&&(U(t[u],0,Ct)?n[u]=n[u+1]=0:(o=n[u]/t[u],i=n[u+1]/t[u],s=Math.pow(o,2)+Math.pow(i,2),s<=9||(a=3/Math.sqrt(s),n[u]=o*a*t[u],n[u+1]=i*a*t[u])))}(e,o,i),function(e,t,n="x"){const r=Ot(n),o=e.length;let i,a,s,l=Pt(e,0);for(let c=0;c<o;++c){if(a=s,s=l,l=Pt(e,c+1),!s)continue;const o=s[n],u=s[r];a&&(i=(o-a[n])/3,s[`cp1${n}`]=o-i,s[`cp1${r}`]=u-i*t[c]),l&&(i=(l[n]-o)/3,s[`cp2${n}`]=o+i,s[`cp2${r}`]=u+i*t[c])}}(e,i,t)}(e,o);else{let n=r?e[e.length-1]:e[0];for(i=0,a=e.length;i<a;++i)s=e[i],l=Tt(n,s,e[Math.min(i+1,a-(r?0:1))%a],t.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}t.capBezierPoints&&function(e,t){let n,r,o,i,a,s=Ye(e[0],t);for(n=0,r=e.length;n<r;++n)a=i,i=s,s=n<r-1&&Ye(e[n+1],t),i&&(o=e[n],a&&(o.cp1x=Dt(o.cp1x,t.left,t.right),o.cp1y=Dt(o.cp1y,t.top,t.bottom)),s&&(o.cp2x=Dt(o.cp2x,t.left,t.right),o.cp2y=Dt(o.cp2y,t.top,t.bottom)))}(e,n)}function Rt(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function At(e,t,n){let r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}const zt=e=>window.getComputedStyle(e,null),Nt=["top","right","bottom","left"];function jt(e,t,n){const r={};n=n?"-"+n:"";for(let o=0;o<4;o++){const i=Nt[o];r[i]=parseFloat(e[t+"-"+i+n])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}function Ft(e,t){const{canvas:n,currentDevicePixelRatio:r}=t,o=zt(n),i="border-box"===o.boxSizing,a=jt(o,"padding"),s=jt(o,"border","width"),{x:l,y:c,box:u}=function(e,t){const n=e.native||e,r=n.touches,o=r&&r.length?r[0]:n,{offsetX:i,offsetY:a}=o;let s,l,c=!1;if(((e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot))(i,a,n.target))s=i,l=a;else{const e=t.getBoundingClientRect();s=o.clientX-e.left,l=o.clientY-e.top,c=!0}return{x:s,y:l,box:c}}(e,n),d=a.left+(u&&s.left),f=a.top+(u&&s.top);let{width:h,height:p}=t;return i&&(h-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-d)/h*n.width/r),y:Math.round((c-f)/p*n.height/r)}}const It=e=>Math.round(10*e)/10;function Bt(e,t,n){const r=t||1,o=Math.floor(e.height*r),i=Math.floor(e.width*r);e.height=o/r,e.width=i/r;const a=e.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${e.height}px`,a.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==r||a.height!==o||a.width!==i)&&(e.currentDevicePixelRatio=r,a.height=o,a.width=i,e.ctx.setTransform(r,0,0,r,0,0),!0)}const Vt=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function Wt(e,t){const n=function(e,t){return zt(e).getPropertyValue(t)}(e,t),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?+r[1]:void 0}function Ht(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function Ut(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:"middle"===r?n<.5?e.y:t.y:"after"===r?n<1?e.y:t.y:n>0?t.y:e.y}}function $t(e,t,n,r){const o={x:e.cp2x,y:e.cp2y},i={x:t.cp1x,y:t.cp1y},a=Ht(e,o,n),s=Ht(o,i,n),l=Ht(i,t,n),c=Ht(a,s,n),u=Ht(s,l,n);return Ht(c,u,n)}const Yt=new Map;function qt(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let r=Yt.get(n);return r||(r=new Intl.NumberFormat(e,t),Yt.set(n,r)),r}(t,n).format(e)}function Qt(e,t,n){return e?function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}}(t,n):{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}}function Xt(e,t){let n,r;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,r=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=r)}function Kt(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function Gt(e){return"angle"===e?{between:Z,compare:K,normalize:G}:{between:(e,t,n)=>e>=Math.min(t,n)&&e<=Math.max(n,t),compare:(e,t)=>e-t,normalize:e=>e}}function Zt({start:e,end:t,count:n,loop:r,style:o}){return{start:e%n,end:t%n,loop:r&&(t-e+1)%n==0,style:o}}function Jt(e,t,n){if(!n)return[e];const{property:r,start:o,end:i}=n,a=t.length,{compare:s,between:l,normalize:c}=Gt(r),{start:u,end:d,loop:f,style:h}=function(e,t,n){const{property:r,start:o,end:i}=n,{between:a,normalize:s}=Gt(r),l=t.length;let c,u,{start:d,end:f,loop:h}=e;if(h){for(d+=l,f+=l,c=0,u=l;c<u&&a(s(t[d%l][r]),o,i);++c)d--,f--;d%=l,f%=l}return f<d&&(f+=l),{start:d,end:f,loop:h,style:e.style}}(e,t,n),p=[];let g,m,b,v=!1,y=null;for(let e=u,n=u;e<=d;++e)m=t[e%a],m.skip||(g=c(m[r]),g!==b&&(v=l(g,o,i),null===y&&(v||l(o,b,g)&&0!==s(o,b))&&(y=0===s(g,o)?e:n),null!==y&&(!v||0===s(i,g)||l(i,b,g))&&(p.push(Zt({start:y,end:e,loop:f,count:a,style:h})),y=null),n=e,b=g));return null!==y&&p.push(Zt({start:y,end:d,loop:f,count:a,style:h})),p}function en(e,t){const n=[],r=e.segments;for(let o=0;o<r.length;o++){const i=Jt(r[o],e.points,t);i.length&&n.push(...i)}return n}function tn(e,t){return t&&JSON.stringify(e)!==JSON.stringify(t)}var nn=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,r){const o=t.listeners[r],i=t.duration;o.forEach((r=>r({chart:e,initial:t.initial,numSteps:i,currentStep:Math.min(n-t.start,i)})))}_refresh(){const e=this;e._request||(e._running=!0,e._request=i.call(window,(()=>{e._update(),e._request=null,e._running&&e._refresh()})))}_update(e=Date.now()){const t=this;let n=0;t._charts.forEach(((r,o)=>{if(!r.running||!r.items.length)return;const i=r.items;let a,s=i.length-1,l=!1;for(;s>=0;--s)a=i[s],a._active?(a._total>r.duration&&(r.duration=a._total),a.tick(e),l=!0):(i[s]=i[i.length-1],i.pop());l&&(o.draw(),t._notify(o,r,e,"progress")),i.length||(r.running=!1,t._notify(o,r,e,"complete"),r.initial=!1),n+=i.length})),t._lastDate=e,0===n&&(t._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let r=n.length-1;for(;r>=0;--r)n[r].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}};const rn="transparent",on={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const r=Ae(e||rn),o=r.valid&&Ae(t||rn);return o&&o.valid?o.mix(r,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class an{constructor(e,t,n,r){const o=t[n];r=st([e.to,r,o,e.from]);const i=st([e.from,o,r]);this._active=!0,this._fn=e.fn||on[e.type||typeof i],this._easing=re[e.easing]||re.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=i,this._to=r,this._promises=void 0}active(){return this._active}update(e,t,n){const r=this;if(r._active){r._notify(!1);const o=r._target[r._prop],i=n-r._start,a=r._duration-i;r._start=n,r._duration=Math.floor(Math.max(a,e.duration)),r._total+=i,r._loop=!!e.loop,r._to=st([e.to,t,o,e.from]),r._from=st([e.from,o,t])}}cancel(){const e=this;e._active&&(e.tick(Date.now()),e._active=!1,e._notify(!1))}tick(e){const t=this,n=e-t._start,r=t._duration,o=t._prop,i=t._from,a=t._loop,s=t._to;let l;if(t._active=i!==s&&(a||n<r),!t._active)return t._target[o]=s,void t._notify(!0);n<0?t._target[o]=i:(l=n/r%2,l=a&&l>1?2-l:l,l=t._easing(Math.min(1,Math.max(0,l))),t._target[o]=t._fn(i,s,l))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}Be.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const sn=Object.keys(Be.animation);Be.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),Be.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Be.describe("animations",{_fallback:"animation"}),Be.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}});class ln{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!h(e))return;const t=this._properties;Object.getOwnPropertyNames(e).forEach((n=>{const r=e[n];if(!h(r))return;const o={};for(const e of sn)o[e]=r[e];(f(r.properties)&&r.properties||[n]).forEach((e=>{e!==n&&t.has(e)||t.set(e,o)}))}))}_animateOptions(e,t){const n=t.options,r=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!r)return[];const o=this._createAnimations(r,n);return n.$shared&&function(e,t){const n=[],r=Object.keys(t);for(let t=0;t<r.length;t++){const o=e[r[t]];o&&o.active()&&n.push(o.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),o}_createAnimations(e,t){const n=this._properties,r=[],o=e.$animations||(e.$animations={}),i=Object.keys(t),a=Date.now();let s;for(s=i.length-1;s>=0;--s){const l=i[s];if("$"===l.charAt(0))continue;if("options"===l){r.push(...this._animateOptions(e,t));continue}const c=t[l];let u=o[l];const d=n.get(l);if(u){if(d&&u.active()){u.update(d,c,a);continue}u.cancel()}d&&d.duration?(o[l]=u=new an(d,e,l,c),r.push(u)):e[l]=c}return r}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(nn.add(this._chart,n),!0):void 0}}function cn(e,t){const n=e&&e.options||{},r=n.reverse,o=void 0===n.min?t:0,i=void 0===n.max?t:0;return{start:r?i:o,end:r?o:i}}function un(e,t){const n=[],r=e._getSortedDatasetMetas(t);let o,i;for(o=0,i=r.length;o<i;++o)n.push(r[o].index);return n}function dn(e,t,n,r){const o=e.keys,i="single"===r.mode;let a,s,l,c;if(null!==t){for(a=0,s=o.length;a<s;++a){if(l=+o[a],l===n){if(r.all)continue;break}c=e.values[l],p(c)&&(i||0===t||V(t)===V(c))&&(t+=c)}return t}}function fn(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function hn(e,t,n){const r=e[t]||(e[t]={});return r[n]||(r[n]={})}function pn(e,t,n){for(const r of t.getMatchingVisibleMetas("bar").reverse()){const t=e[r.index];if(n&&t>0||!n&&t<0)return r.index}return null}function gn(e,t){const{chart:n,_cachedMeta:r}=e,o=n._stacks||(n._stacks={}),{iScale:i,vScale:a,index:s}=r,l=i.axis,c=a.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(i,a,r),d=t.length;let f;for(let e=0;e<d;++e){const n=t[e],{[l]:r,[c]:i}=n;f=(n._stacks||(n._stacks={}))[c]=hn(o,u,r),f[s]=i,f._top=pn(f,a,!0),f._bottom=pn(f,a,!1)}}function mn(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function bn(e,t){t=t||e._parsed;for(const n of t){const t=n._stacks;if(!t||void 0===t[e.vScale.id]||void 0===t[e.vScale.id][e.index])return;delete t[e.vScale.id][e.index]}}const vn=e=>"reset"===e||"none"===e,yn=(e,t)=>t?e:Object.assign({},e);class xn{constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const e=this,t=e._cachedMeta;e.configure(),e.linkScales(),t._stacked=fn(t.vScale,t),e.addElements()}updateIndex(e){this.index!==e&&bn(this._cachedMeta),this.index=e}linkScales(){const e=this,t=e.chart,n=e._cachedMeta,r=e.getDataset(),o=(e,t,n,r)=>"x"===e?t:"r"===e?r:n,i=n.xAxisID=m(r.xAxisID,mn(t,"x")),a=n.yAxisID=m(r.yAxisID,mn(t,"y")),s=n.rAxisID=m(r.rAxisID,mn(t,"r")),l=n.indexAxis,c=n.iAxisID=o(l,i,a,s),u=n.vAxisID=o(l,a,i,s);n.xScale=e.getScaleForId(i),n.yScale=e.getScaleForId(a),n.rScale=e.getScaleForId(s),n.iScale=e.getScaleForId(c),n.vScale=e.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&ft(this._data,this),e._stacked&&bn(e)}_dataCheck(){const e=this,t=e.getDataset(),n=t.data||(t.data=[]),r=e._data;if(h(n))e._data=function(e){const t=Object.keys(e),n=new Array(t.length);let r,o,i;for(r=0,o=t.length;r<o;++r)i=t[r],n[r]={x:i,y:e[i]};return n}(n);else if(r!==n){if(r){ft(r,e);const t=e._cachedMeta;bn(t),t._parsed=[]}n&&Object.isExtensible(n)&&(i=e,(o=n)._chartjs?o._chartjs.listeners.push(i):(Object.defineProperty(o,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[i]}}),dt.forEach((e=>{const t="_onData"+O(e),n=o[e];Object.defineProperty(o,e,{configurable:!0,enumerable:!1,value(...e){const r=n.apply(this,e);return o._chartjs.listeners.forEach((n=>{"function"==typeof n[t]&&n[t](...e)})),r}})})))),e._syncList=[],e._data=n}var o,i}addElements(){const e=this,t=e._cachedMeta;e._dataCheck(),e.datasetElementType&&(t.dataset=new e.datasetElementType)}buildOrUpdateElements(e){const t=this,n=t._cachedMeta,r=t.getDataset();let o=!1;t._dataCheck();const i=n._stacked;n._stacked=fn(n.vScale,n),n.stack!==r.stack&&(o=!0,bn(n),n.stack=r.stack),t._resyncElements(e),(o||i!==n._stacked)&&gn(t,n._parsed)}configure(){const e=this,t=e.chart.config,n=t.datasetScopeKeys(e._type),r=t.getOptionScopes(e.getDataset(),n,!0);e.options=t.createResolver(r,e.getContext()),e._parsing=e.options.parsing}parse(e,t){const n=this,{_cachedMeta:r,_data:o}=n,{iScale:i,_stacked:a}=r,s=i.axis;let l,c,u,d=0===e&&t===o.length||r._sorted,p=e>0&&r._parsed[e-1];if(!1===n._parsing)r._parsed=o,r._sorted=!0,u=o;else{u=f(o[e])?n.parseArrayData(r,o,e,t):h(o[e])?n.parseObjectData(r,o,e,t):n.parsePrimitiveData(r,o,e,t);const i=()=>null===c[s]||p&&c[s]<p[s];for(l=0;l<t;++l)r._parsed[l+e]=c=u[l],d&&(i()&&(d=!1),p=c);r._sorted=d}a&&gn(n,u)}parsePrimitiveData(e,t,n,r){const{iScale:o,vScale:i}=e,a=o.axis,s=i.axis,l=o.getLabels(),c=o===i,u=new Array(r);let d,f,h;for(d=0,f=r;d<f;++d)h=d+n,u[d]={[a]:c||o.parse(l[h],h),[s]:i.parse(t[h],h)};return u}parseArrayData(e,t,n,r){const{xScale:o,yScale:i}=e,a=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=t[c],a[s]={x:o.parse(u[0],c),y:i.parse(u[1],c)};return a}parseObjectData(e,t,n,r){const{xScale:o,yScale:i}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=new Array(r);let c,u,d,f;for(c=0,u=r;c<u;++c)d=c+n,f=t[d],l[c]={x:o.parse(P(f,a),d),y:i.parse(P(f,s),d)};return l}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const r=this.chart,o=this._cachedMeta,i=t[e.axis];return dn({keys:un(r,!0),values:t._stacks[e.axis]},i,o.index,{mode:n})}updateRangeFromParsed(e,t,n,r){const o=n[t.axis];let i=null===o?NaN:o;const a=r&&n._stacks[t.axis];r&&a&&(r.values=a,e.min=Math.min(e.min,i),e.max=Math.max(e.max,i),i=dn(r,o,this._cachedMeta.index,{all:!0})),e.min=Math.min(e.min,i),e.max=Math.max(e.max,i)}getMinMax(e,t){const n=this,r=n._cachedMeta,o=r._parsed,i=r._sorted&&e===r.iScale,a=o.length,s=n._getOtherScale(e),l=t&&r._stacked&&{keys:un(n.chart,!0),values:null},c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:d}=function(e){const{min:t,max:n,minDefined:r,maxDefined:o}=e.getUserBounds();return{min:r?t:Number.NEGATIVE_INFINITY,max:o?n:Number.POSITIVE_INFINITY}}(s);let f,h,g,m;function b(){return g=o[f],h=g[e.axis],m=g[s.axis],!p(h)||u>m||d<m}for(f=0;f<a&&(b()||(n.updateRangeFromParsed(c,e,g,l),!i));++f);if(i)for(f=a-1;f>=0;--f)if(!b()){n.updateRangeFromParsed(c,e,g,l);break}return c}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let r,o,i;for(r=0,o=t.length;r<o;++r)i=t[r][e.axis],p(i)&&n.push(i);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,r=t.vScale,o=this.getParsed(e);return{label:n?""+n.getLabelForValue(o[n.axis]):"",value:r?""+r.getLabelForValue(o[r.axis]):""}}_update(e){const t=this,n=t._cachedMeta;t.configure(),t._cachedDataOpts={},t.update(e||"default"),n._clip=function(e){let t,n,r,o;return h(e)?(t=e.top,n=e.right,r=e.bottom,o=e.left):t=n=r=o=e,{top:t,right:n,bottom:r,left:o}}(m(t.options.clip,function(e,t,n){if(!1===n)return!1;const r=cn(e,n),o=cn(t,n);return{top:o.end,right:r.end,bottom:o.start,left:r.start}}(n.xScale,n.yScale,t.getMaxOverflow())))}update(e){}draw(){const e=this,t=e._ctx,n=e.chart,r=e._cachedMeta,o=r.data||[],i=n.chartArea,a=[],s=e._drawStart||0,l=e._drawCount||o.length-s;let c;for(r.dataset&&r.dataset.draw(t,i,s,l),c=s;c<s+l;++c){const e=o[c];e.active?a.push(e):e.draw(t,i)}for(c=0;c<a.length;++c)a[c].draw(t,i)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const r=this,o=r.getDataset();let i;if(e>=0&&e<r._cachedMeta.data.length){const t=r._cachedMeta.data[e];i=t.$context||(t.$context=function(e,t,n){return Object.assign(Object.create(e),{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(r.getContext(),e,t)),i.parsed=r.getParsed(e),i.raw=o.data[e],i.index=i.dataIndex=e}else i=r.$context||(r.$context=function(e,t){return Object.assign(Object.create(e),{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(r.chart.getContext(),r.index)),i.dataset=o,i.index=i.datasetIndex=r.index;return i.active=!!t,i.mode=n,i}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const r=this,o="active"===t,i=r._cachedDataOpts,a=e+"-"+t,s=i[a],l=r.enableOptionSharing&&T(n);if(s)return yn(s,l);const c=r.chart.config,u=c.datasetElementScopeKeys(r._type,e),d=o?[`${e}Hover`,"hover",e,""]:[e,""],f=c.getOptionScopes(r.getDataset(),u),h=Object.keys(Be.elements[e]),p=c.resolveNamedOptions(f,h,(()=>r.getContext(n,o)),d);return p.$shared&&(p.$shared=l,i[a]=Object.freeze(yn(p,l))),p}_resolveAnimations(e,t,n){const r=this,o=r.chart,i=r._cachedDataOpts,a=`animation-${t}`,s=i[a];if(s)return s;let l;if(!1!==o.options.animation){const o=r.chart.config,i=o.datasetAnimationScopeKeys(r._type,t),a=o.getOptionScopes(r.getDataset(),i);l=o.createResolver(a,r.getContext(e,n,t))}const c=new ln(o,l&&l.animations);return l&&l._cacheable&&(i[a]=Object.freeze(c)),c}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||vn(e)||this.chart._animationsDisabled}updateElement(e,t,n,r){vn(r)?Object.assign(e,n):this._resolveAnimations(t,r).update(e,n)}updateSharedOptions(e,t,n){e&&!vn(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,r){e.active=r;const o=this.getStyle(t,r);this._resolveAnimations(t,n,r).update(e,{options:!r&&this.getSharedOptions(o)||o})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this,n=t._data,r=t._cachedMeta.data;for(const[e,n,r]of t._syncList)t[e](n,r);t._syncList=[];const o=r.length,i=n.length,a=Math.min(i,o);i>o?t._insertElements(o,i-o,e):i<o&&t._removeElements(i,o-i),a&&t.parse(0,a)}_insertElements(e,t,n=!0){const r=this,o=r._cachedMeta,i=o.data,a=e+t;let s;const l=e=>{for(e.length+=t,s=e.length-1;s>=a;s--)e[s]=e[s-t]};for(l(i),s=e;s<a;++s)i[s]=new r.dataElementType;r._parsing&&l(o._parsed),r.parse(e,t),n&&r.updateElements(i,e,t,"reset")}updateElements(e,t,n,r){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const r=n._parsed.splice(e,t);n._stacked&&bn(n,r)}n.data.splice(e,t)}_onDataPush(){const e=arguments.length;this._syncList.push(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._syncList.push(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._syncList.push(["_removeElements",0,1])}_onDataSplice(e,t){this._syncList.push(["_removeElements",e,t]),this._syncList.push(["_insertElements",e,arguments.length-2])}_onDataUnshift(){this._syncList.push(["_insertElements",0,arguments.length])}}function _n(e){const t=function(e){if(!e._cache.$bar){const t=e.getMatchingVisibleMetas("bar");let n=[];for(let r=0,o=t.length;r<o;r++)n=n.concat(t[r].controller.getAllParsedValues(e));e._cache.$bar=ht(n.sort(((e,t)=>e-t)))}return e._cache.$bar}(e);let n,r,o,i,a=e._length;const s=()=>{32767!==o&&-32768!==o&&(T(i)&&(a=Math.min(a,Math.abs(o-i)||a)),i=o)};for(n=0,r=t.length;n<r;++n)o=e.getPixelForValue(t[n]),s();for(i=void 0,n=0,r=e.ticks.length;n<r;++n)o=e.getPixelForTick(n),s();return a}function wn(e,t,n,r){return f(e)?function(e,t,n,r){const o=n.parse(e[0],r),i=n.parse(e[1],r),a=Math.min(o,i),s=Math.max(o,i);let l=a,c=s;Math.abs(a)>Math.abs(s)&&(l=s,c=a),t[n.axis]=c,t._custom={barStart:l,barEnd:c,start:o,end:i,min:a,max:s}}(e,t,n,r):t[n.axis]=n.parse(e,r),t}function kn(e,t,n,r){const o=e.iScale,i=e.vScale,a=o.getLabels(),s=o===i,l=[];let c,u,d,f;for(c=n,u=n+r;c<u;++c)f=t[c],d={},d[o.axis]=s||o.parse(a[c],c),l.push(wn(f,d,i,c));return l}function Sn(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}xn.defaults={},xn.prototype.datasetElementType=null,xn.prototype.dataElementType=null;class Mn extends xn{parsePrimitiveData(e,t,n,r){return kn(e,t,n,r)}parseArrayData(e,t,n,r){return kn(e,t,n,r)}parseObjectData(e,t,n,r){const{iScale:o,vScale:i}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l="x"===o.axis?a:s,c="x"===i.axis?a:s,u=[];let d,f,h,p;for(d=n,f=n+r;d<f;++d)p=t[d],h={},h[o.axis]=o.parse(P(p,l),d),u.push(wn(P(p,c),h,i,d));return u}updateRangeFromParsed(e,t,n,r){super.updateRangeFromParsed(e,t,n,r);const o=n._custom;o&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,o.min),e.max=Math.max(e.max,o.max))}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:r}=t,o=this.getParsed(e),i=o._custom,a=Sn(i)?"["+i.start+", "+i.end+"]":""+r.getLabelForValue(o[r.axis]);return{label:""+n.getLabelForValue(o[n.axis]),value:a}}initialize(){const e=this;e.enableOptionSharing=!0,super.initialize(),e._cachedMeta.stack=e.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,r){const o=this,i="reset"===r,a=o._cachedMeta.vScale,s=a.getBasePixel(),l=a.isHorizontal(),c=o._getRuler(),u=o.resolveDataElementOptions(t,r),f=o.getSharedOptions(u),h=o.includeOptions(r,f);o.updateSharedOptions(f,r,u);for(let u=t;u<t+n;u++){const t=o.getParsed(u),n=i||d(t[a.axis])?{base:s,head:s}:o._calculateBarValuePixels(u),p=o._calculateBarIndexPixels(u,c),g=(t._stacks||{})[a.axis],m={horizontal:l,base:n.base,enableBorderRadius:!g||Sn(t._custom)||o.index===g._top||o.index===g._bottom,x:l?n.head:p.center,y:l?p.center:n.head,height:l?p.size:void 0,width:l?void 0:p.size};h&&(m.options=f||o.resolveDataElementOptions(u,r)),o.updateElement(e[u],u,m,r)}}_getStacks(e,t){const n=this._cachedMeta.iScale,r=n.getMatchingVisibleMetas(this._type),o=n.options.stacked,i=r.length,a=[];let s,l;for(s=0;s<i;++s){if(l=r[s],void 0!==t){const e=l.controller.getParsed(t)[l.controller._cachedMeta.vScale.axis];if(d(e)||isNaN(e))continue}if((!1===o||-1===a.indexOf(l.stack)||void 0===o&&void 0===l.stack)&&a.push(l.stack),l.index===e)break}return a.length||a.push(void 0),a}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const r=this._getStacks(e,n),o=void 0!==t?r.indexOf(t):-1;return-1===o?r.length-1:o}_getRuler(){const e=this,t=e.options,n=e._cachedMeta,r=n.iScale,o=[];let i,a;for(i=0,a=n.data.length;i<a;++i)o.push(r.getPixelForValue(e.getParsed(i)[r.axis],i));const s=t.barThickness;return{min:s||_n(r),pixels:o,start:r._startPixel,end:r._endPixel,stackCount:e._getStackCount(),scale:r,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(e){const t=this,{vScale:n,_stacked:r}=t._cachedMeta,{base:o,minBarLength:i}=t.options,a=t.getParsed(e),s=a._custom,l=Sn(s);let c,u,f=a[n.axis],h=0,p=r?t.applyStack(n,a,r):f;p!==f&&(h=p-f,p=f),l&&(f=s.barStart,p=s.barEnd-s.barStart,0!==f&&V(f)!==V(s.barEnd)&&(h=0),h+=f);const g=d(o)||l?h:o;let m=n.getPixelForValue(g);c=this.chart.getDataVisibility(e)?n.getPixelForValue(h+p):m,u=c-m,void 0!==i&&Math.abs(u)<i&&(u=u<0?-i:i,0===f&&(m-=u/2),c=m+u);const b=o||0;if(m===n.getPixelForValue(b)){const e=n.getLineWidthForValue(b)/2;u>0?(m+=e,u-=e):u<0&&(m-=e,u+=e)}return{size:u,base:m,head:c,center:c+u/2}}_calculateBarIndexPixels(e,t){const n=this,r=t.scale,o=n.options,i=o.skipNull,a=m(o.maxBarThickness,1/0);let s,l;if(t.grouped){const r=i?n._getStackCount(e):t.stackCount,c="flex"===o.barThickness?function(e,t,n,r){const o=t.pixels,i=o[e];let a=e>0?o[e-1]:null,s=e<o.length-1?o[e+1]:null;const l=n.categoryPercentage;null===a&&(a=i-(null===s?t.end-t.start:s-i)),null===s&&(s=i+i-a);const c=i-(i-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/r,ratio:n.barPercentage,start:c}}(e,t,o,r):function(e,t,n,r){const o=n.barThickness;let i,a;return d(o)?(i=t.min*n.categoryPercentage,a=n.barPercentage):(i=o*r,a=1),{chunk:i/r,ratio:a,start:t.pixels[e]-i/2}}(e,t,o,r),u=n._getStackIndex(n.index,n._cachedMeta.stack,i?e:void 0);s=c.start+c.chunk*u+c.chunk/2,l=Math.min(a,c.chunk*c.ratio)}else s=r.getPixelForValue(n.getParsed(e)[r.axis],e),l=Math.min(a,t.min*t.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}}draw(){const e=this,t=e.chart,n=e._cachedMeta,r=n.vScale,o=n.data,i=o.length;let a=0;for(qe(t.ctx,t.chartArea);a<i;++a)null!==e.getParsed(a)[r.axis]&&o[a].draw(e._ctx);Qe(t.ctx)}}Mn.id="bar",Mn.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Mn.overrides={interaction:{mode:"index"},scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class En extends xn{initialize(){this.enableOptionSharing=!0,super.initialize()}parseObjectData(e,t,n,r){const{xScale:o,yScale:i}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=[];let c,u,d;for(c=n,u=n+r;c<u;++c)d=t[c],l.push({x:o.parse(P(d,a),c),y:i.parse(P(d,s),c),_custom:d&&d.r&&+d.r});return l}getMaxOverflow(){const{data:e,_parsed:t}=this._cachedMeta;let n=0;for(let r=e.length-1;r>=0;--r)n=Math.max(n,e[r].size()/2,t[r]._custom);return n>0&&n}getLabelAndValue(e){const t=this._cachedMeta,{xScale:n,yScale:r}=t,o=this.getParsed(e),i=n.getLabelForValue(o.x),a=r.getLabelForValue(o.y),s=o._custom;return{label:t.label,value:"("+i+", "+a+(s?", "+s:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,r){const o=this,i="reset"===r,{iScale:a,vScale:s}=o._cachedMeta,l=o.resolveDataElementOptions(t,r),c=o.getSharedOptions(l),u=o.includeOptions(r,c),d=a.axis,f=s.axis;for(let l=t;l<t+n;l++){const t=e[l],n=!i&&o.getParsed(l),c={},h=c[d]=i?a.getPixelForDecimal(.5):a.getPixelForValue(n[d]),p=c[f]=i?s.getBasePixel():s.getPixelForValue(n[f]);c.skip=isNaN(h)||isNaN(p),u&&(c.options=o.resolveDataElementOptions(l,r),i&&(c.options.radius=0)),o.updateElement(t,l,c,r)}o.updateSharedOptions(c,r,l)}resolveDataElementOptions(e,t){const n=this.getParsed(e);let r=super.resolveDataElementOptions(e,t);r.$shared&&(r=Object.assign({},r,{$shared:!1}));const o=r.radius;return"active"!==t&&(r.radius=0),r.radius+=m(n&&n._custom,o),r}}En.id="bubble",En.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},En.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Cn extends xn{constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,r=this._cachedMeta;let o,i;for(o=e,i=e+t;o<i;++o)r._parsed[o]=+n[o]}_getRotation(){return Y(this.options.rotation-90)}_getCircumference(){return Y(this.options.circumference)}_getRotationExtents(){let e=R,t=-R;const n=this;for(let r=0;r<n.chart.data.datasets.length;++r)if(n.chart.isDatasetVisible(r)){const o=n.chart.getDatasetMeta(r).controller,i=o._getRotation(),a=o._getCircumference();e=Math.min(e,i),t=Math.max(t,i+a)}return{rotation:e,circumference:t-e}}update(e){const t=this,n=t.chart,{chartArea:r}=n,o=t._cachedMeta,i=o.data,a=t.getMaxBorderWidth()+t.getMaxOffset(i),s=Math.max((Math.min(r.width,r.height)-a)/2,0),l=Math.min((u=s,"string"==typeof(c=t.options.cutout)&&c.endsWith("%")?parseFloat(c)/100:c/u),1);var c,u;const d=t._getRingWeight(t.index),{circumference:f,rotation:h}=t._getRotationExtents(),{ratioX:p,ratioY:g,offsetX:m,offsetY:v}=function(e,t,n){let r=1,o=1,i=0,a=0;if(t<R){const s=e,l=s+t,c=Math.cos(s),u=Math.sin(s),d=Math.cos(l),f=Math.sin(l),h=(e,t,r)=>Z(e,s,l,!0)?1:Math.max(t,t*n,r,r*n),p=(e,t,r)=>Z(e,s,l,!0)?-1:Math.min(t,t*n,r,r*n),g=h(0,c,d),m=h(j,u,f),b=p(L,c,d),v=p(L+j,u,f);r=(g-b)/2,o=(m-v)/2,i=-(g+b)/2,a=-(m+v)/2}return{ratioX:r,ratioY:o,offsetX:i,offsetY:a}}(h,f,l),y=(r.width-a)/p,x=(r.height-a)/g,_=Math.max(Math.min(y,x)/2,0),w=b(t.options.radius,_),k=(w-Math.max(w*l,0))/t._getVisibleDatasetWeightTotal();t.offsetX=m*w,t.offsetY=v*w,o.total=t.calculateTotal(),t.outerRadius=w-k*t._getRingWeightOffset(t.index),t.innerRadius=Math.max(t.outerRadius-k*d,0),t.updateElements(i,0,i.length,e)}_circumference(e,t){const n=this,r=n.options,o=n._cachedMeta,i=n._getCircumference();return t&&r.animation.animateRotate||!this.chart.getDataVisibility(e)||null===o._parsed[e]?0:n.calculateCircumference(o._parsed[e]*i/R)}updateElements(e,t,n,r){const o=this,i="reset"===r,a=o.chart,s=a.chartArea,l=a.options.animation,c=(s.left+s.right)/2,u=(s.top+s.bottom)/2,d=i&&l.animateScale,f=d?0:o.innerRadius,h=d?0:o.outerRadius,p=o.resolveDataElementOptions(t,r),g=o.getSharedOptions(p),m=o.includeOptions(r,g);let b,v=o._getRotation();for(b=0;b<t;++b)v+=o._circumference(b,i);for(b=t;b<t+n;++b){const t=o._circumference(b,i),n=e[b],a={x:c+o.offsetX,y:u+o.offsetY,startAngle:v,endAngle:v+t,circumference:t,outerRadius:h,innerRadius:f};m&&(a.options=g||o.resolveDataElementOptions(b,r)),v+=t,o.updateElement(n,b,a,r)}o.updateSharedOptions(g,r,p)}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,r=0;for(n=0;n<t.length;n++){const t=e._parsed[n];null!==t&&!isNaN(t)&&this.chart.getDataVisibility(n)&&(r+=Math.abs(t))}return r}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?R*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,r=n.data.labels||[],o=qt(t._parsed[e],n.options.locale);return{label:r[e]||"",value:o}}getMaxBorderWidth(e){const t=this;let n=0;const r=t.chart;let o,i,a,s,l;if(!e)for(o=0,i=r.data.datasets.length;o<i;++o)if(r.isDatasetVisible(o)){a=r.getDatasetMeta(o),e=a.data,s=a.controller,s!==t&&s.configure();break}if(!e)return 0;for(o=0,i=e.length;o<i;++o)l=s.resolveDataElementOptions(o),"inner"!==l.borderAlign&&(n=Math.max(n,l.borderWidth||0,l.hoverBorderWidth||0));return n}getMaxOffset(e){let t=0;for(let n=0,r=e.length;n<r;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max(m(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Cn.id="doughnut",Cn.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",indexAxis:"r"},Cn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(((t,n)=>{const r=e.getDatasetMeta(0).controller.getStyle(n);return{text:t,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:!e.getDataVisibility(n),index:n}})):[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(e){let t=e.label;const n=": "+e.formattedValue;return f(t)?(t=t.slice(),t[0]+=n):t+=n,t}}}}};class Pn extends xn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(e){const t=this,n=t._cachedMeta,{dataset:r,data:o=[],_dataset:i}=n,a=t.chart._animationsDisabled;let{start:s,count:l}=function(e,t,n){const r=t.length;let o=0,i=r;if(e._sorted){const{iScale:a,_parsed:s}=e,l=a.axis,{min:c,max:u,minDefined:d,maxDefined:f}=a.getUserBounds();d&&(o=J(Math.min(ct(s,a.axis,c).lo,n?r:ct(t,l,a.getPixelForValue(c)).lo),0,r-1)),i=f?J(Math.max(ct(s,a.axis,u).hi+1,n?0:ct(t,l,a.getPixelForValue(u)).hi+1),o,r)-o:r-o}return{start:o,count:i}}(n,o,a);t._drawStart=s,t._drawCount=l,function(e){const{xScale:t,yScale:n,_scaleRanges:r}=e,o={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!r)return e._scaleRanges=o,!0;const i=r.xmin!==t.min||r.xmax!==t.max||r.ymin!==n.min||r.ymax!==n.max;return Object.assign(r,o),i}(n)&&(s=0,l=o.length),r._decimated=!!i._decimated,r.points=o;const c=t.resolveDatasetElementOptions(e);t.options.showLine||(c.borderWidth=0),c.segment=t.options.segment,t.updateElement(r,void 0,{animated:!a,options:c},e),t.updateElements(o,s,l,e)}updateElements(e,t,n,r){const o=this,i="reset"===r,{iScale:a,vScale:s,_stacked:l}=o._cachedMeta,c=o.resolveDataElementOptions(t,r),u=o.getSharedOptions(c),f=o.includeOptions(r,u),h=a.axis,p=s.axis,g=o.options.spanGaps,m=H(g)?g:Number.POSITIVE_INFINITY,b=o.chart._animationsDisabled||i||"none"===r;let v=t>0&&o.getParsed(t-1);for(let c=t;c<t+n;++c){const t=e[c],n=o.getParsed(c),g=b?t:{},y=d(n[p]),x=g[h]=a.getPixelForValue(n[h],c),_=g[p]=i||y?s.getBasePixel():s.getPixelForValue(l?o.applyStack(s,n,l):n[p],c);g.skip=isNaN(x)||isNaN(_)||y,g.stop=c>0&&n[h]-v[h]>m,g.parsed=n,f&&(g.options=u||o.resolveDataElementOptions(c,r)),b||o.updateElement(t,c,g,r),v=n}o.updateSharedOptions(u,r,c)}getMaxOverflow(){const e=this,t=e._cachedMeta,n=t.dataset,r=n.options&&n.options.borderWidth||0,o=t.data||[];if(!o.length)return r;const i=o[0].size(e.resolveDataElementOptions(0)),a=o[o.length-1].size(e.resolveDataElementOptions(o.length-1));return Math.max(r,i,a)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}Pn.id="line",Pn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Pn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class On extends xn{constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,r=n.data.labels||[],o=qt(t._parsed[e].r,n.options.locale);return{label:r[e]||"",value:o}}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}_updateRadius(){const e=this,t=e.chart,n=t.chartArea,r=t.options,o=Math.min(n.right-n.left,n.bottom-n.top),i=Math.max(o/2,0),a=(i-Math.max(r.cutoutPercentage?i/100*r.cutoutPercentage:1,0))/t.getVisibleDatasetCount();e.outerRadius=i-a*e.index,e.innerRadius=e.outerRadius-a}updateElements(e,t,n,r){const o=this,i="reset"===r,a=o.chart,s=o.getDataset(),l=a.options.animation,c=o._cachedMeta.rScale,u=c.xCenter,d=c.yCenter,f=c.getIndexAngle(0)-.5*L;let h,p=f;const g=360/o.countVisibleElements();for(h=0;h<t;++h)p+=o._computeAngle(h,r,g);for(h=t;h<t+n;h++){const t=e[h];let n=p,m=p+o._computeAngle(h,r,g),b=a.getDataVisibility(h)?c.getDistanceFromCenterForValue(s.data[h]):0;p=m,i&&(l.animateScale&&(b=0),l.animateRotate&&(n=m=f));const v={x:u,y:d,innerRadius:0,outerRadius:b,startAngle:n,endAngle:m,options:o.resolveDataElementOptions(h,r)};o.updateElement(t,h,v,r)}}countVisibleElements(){const e=this.getDataset(),t=this._cachedMeta;let n=0;return t.data.forEach(((t,r)=>{!isNaN(e.data[r])&&this.chart.getDataVisibility(r)&&n++})),n}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?Y(this.resolveDataElementOptions(e,t).angle||n):0}}On.id="polarArea",On.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},On.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(((t,n)=>{const r=e.getDatasetMeta(0).controller.getStyle(n);return{text:t,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,hidden:!e.getDataVisibility(n),index:n}})):[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:e=>e.chart.data.labels[e.dataIndex]+": "+e.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Tn extends Cn{}Tn.id="pie",Tn.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Dn extends xn{getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}update(e){const t=this,n=t._cachedMeta,r=n.dataset,o=n.data||[],i=n.iScale.getLabels();if(r.points=o,"resize"!==e){const n=t.resolveDatasetElementOptions(e);t.options.showLine||(n.borderWidth=0);const a={_loop:!0,_fullLoop:i.length===o.length,options:n};t.updateElement(r,void 0,a,e)}t.updateElements(o,0,o.length,e)}updateElements(e,t,n,r){const o=this,i=o.getDataset(),a=o._cachedMeta.rScale,s="reset"===r;for(let l=t;l<t+n;l++){const t=e[l],n=o.resolveDataElementOptions(l,r),c=a.getPointPositionForValue(l,i.data[l]),u=s?a.xCenter:c.x,d=s?a.yCenter:c.y,f={x:u,y:d,angle:c.angle,skip:isNaN(u)||isNaN(d),options:n};o.updateElement(t,l,f,r)}}}Dn.id="radar",Dn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Dn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Ln extends Pn{}Ln.id="scatter",Ln.defaults={showLine:!1,fill:!1},Ln.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:e=>"("+e.label+", "+e.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Rn=Object.freeze({__proto__:null,BarController:Mn,BubbleController:En,DoughnutController:Cn,LineController:Pn,PolarAreaController:On,PieController:Tn,RadarController:Dn,ScatterController:Ln});function An(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class zn{constructor(e){this.options=e||{}}formats(){return An()}parse(e,t){return An()}format(e,t){return An()}add(e,t,n){return An()}diff(e,t,n){return An()}startOf(e,t,n){return An()}endOf(e,t){return An()}}zn.override=function(e){Object.assign(zn.prototype,e)};var Nn={_date:zn};function jn(e,t){return"native"in e?{x:e.x,y:e.y}:Ft(e,t)}function Fn(e,t,n,r){const{controller:o,data:i,_sorted:a}=e,s=o._cachedMeta.iScale;if(s&&t===s.axis&&a&&i.length){const e=s._reversePixels?ut:ct;if(!r)return e(i,t,n);if(o._sharedOptions){const r=i[0],o="function"==typeof r.getRange&&r.getRange(t);if(o){const r=e(i,t,n-o),a=e(i,t,n+o);return{lo:r.lo,hi:a.hi}}}}return{lo:0,hi:i.length-1}}function In(e,t,n,r,o){const i=e.getSortedVisibleDatasetMetas(),a=n[t];for(let e=0,n=i.length;e<n;++e){const{index:n,data:s}=i[e],{lo:l,hi:c}=Fn(i[e],t,a,o);for(let e=l;e<=c;++e){const t=s[e];t.skip||r(t,n,e)}}}function Bn(e,t,n,r){const o=[];return Ye(t,e.chartArea,e._minPadding)?(In(e,n,t,(function(e,n,i){e.inRange(t.x,t.y,r)&&o.push({element:e,datasetIndex:n,index:i})}),!0),o):o}function Vn(e,t,n,r,o){const i=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){const o=t?Math.abs(e.x-r.x):0,i=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(o,2)+Math.pow(i,2))}}(n);let a=Number.POSITIVE_INFINITY,s=[];return Ye(t,e.chartArea,e._minPadding)?(In(e,n,t,(function(e,n,l){if(r&&!e.inRange(t.x,t.y,o))return;const c=e.getCenterPoint(o),u=i(t,c);u<a?(s=[{element:e,datasetIndex:n,index:l}],a=u):u===a&&s.push({element:e,datasetIndex:n,index:l})})),s):s}function Wn(e,t,n,r){const o=jn(t,e),i=[],a=n.axis,s="x"===a?"inXRange":"inYRange";let l=!1;return function(e,t){const n=e.getSortedVisibleDatasetMetas();let r,o,i;for(let e=0,a=n.length;e<a;++e){({index:r,data:o}=n[e]);for(let e=0,n=o.length;e<n;++e)i=o[e],i.skip||t(i,r,e)}}(e,((e,t,n)=>{e[s](o[a],r)&&i.push({element:e,datasetIndex:t,index:n}),e.inRange(o.x,o.y,r)&&(l=!0)})),n.intersect&&!l?[]:i}var Hn={modes:{index(e,t,n,r){const o=jn(t,e),i=n.axis||"x",a=n.intersect?Bn(e,o,i,r):Vn(e,o,i,!1,r),s=[];return a.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=a[0].index,n=e.data[t];n&&!n.skip&&s.push({element:n,datasetIndex:e.index,index:t})})),s):[]},dataset(e,t,n,r){const o=jn(t,e),i=n.axis||"xy";let a=n.intersect?Bn(e,o,i,r):Vn(e,o,i,!1,r);if(a.length>0){const t=a[0].datasetIndex,n=e.getDatasetMeta(t).data;a=[];for(let e=0;e<n.length;++e)a.push({element:n[e],datasetIndex:t,index:e})}return a},point:(e,t,n,r)=>Bn(e,jn(t,e),n.axis||"xy",r),nearest:(e,t,n,r)=>Vn(e,jn(t,e),n.axis||"xy",n.intersect,r),x:(e,t,n,r)=>(n.axis="x",Wn(e,t,n,r)),y:(e,t,n,r)=>(n.axis="y",Wn(e,t,n,r))}};const Un=["left","top","right","bottom"];function $n(e,t){return e.filter((e=>e.pos===t))}function Yn(e,t){return e.filter((e=>-1===Un.indexOf(e.pos)&&e.box.axis===t))}function qn(e,t){return e.sort(((e,n)=>{const r=t?n:e,o=t?e:n;return r.weight===o.weight?r.index-o.index:r.weight-o.weight}))}function Qn(e,t,n,r){return Math.max(e[n],t[n])+Math.max(e[r],t[r])}function Xn(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function Kn(e,t,n){const r=n.box,o=e.maxPadding;h(n.pos)||(n.size&&(e[n.pos]-=n.size),n.size=n.horizontal?r.height:r.width,e[n.pos]+=n.size),r.getPadding&&Xn(o,r.getPadding());const i=Math.max(0,t.outerWidth-Qn(o,e,"left","right")),a=Math.max(0,t.outerHeight-Qn(o,e,"top","bottom")),s=i!==e.w,l=a!==e.h;return e.w=i,e.h=a,n.horizontal?{same:s,other:l}:{same:l,other:s}}function Gn(e,t){const n=t.maxPadding;return function(e){const r={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{r[e]=Math.max(t[e],n[e])})),r}(e?["left","right"]:["top","bottom"])}function Zn(e,t,n){const r=[];let o,i,a,s,l,c;for(o=0,i=e.length,l=0;o<i;++o){a=e[o],s=a.box,s.update(a.width||t.w,a.height||t.h,Gn(a.horizontal,t));const{same:i,other:u}=Kn(t,n,a);l|=i&&r.length,c=c||u,s.fullSize||r.push(a)}return l&&Zn(r,t,n)||c}function Jn(e,t,n){const r=n.padding;let o,i,a,s,l=t.x,c=t.y;for(o=0,i=e.length;o<i;++o)a=e[o],s=a.box,a.horizontal?(s.left=s.fullSize?r.left:t.left,s.right=s.fullSize?n.outerWidth-r.right:t.left+t.w,s.top=c,s.bottom=c+s.height,s.width=s.right-s.left,c=s.bottom):(s.left=l,s.right=l+s.width,s.top=s.fullSize?r.top:t.top,s.bottom=s.fullSize?n.outerHeight-r.right:t.top+t.h,s.height=s.bottom-s.top,l=s.right);t.x=l,t.y=c}Be.set("layout",{padding:{top:0,right:0,bottom:0,left:0}});var er={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,r){if(!e)return;const o=it(e.options.layout.padding),i=Math.max(t-o.width,0),a=Math.max(n-o.height,0),s=function(e){const t=function(e){const t=[];let n,r,o;for(n=0,r=(e||[]).length;n<r;++n)o=e[n],t.push({index:n,box:o,pos:o.position,horizontal:o.isHorizontal(),weight:o.weight});return t}(e),n=qn(t.filter((e=>e.box.fullSize)),!0),r=qn($n(t,"left"),!0),o=qn($n(t,"right")),i=qn($n(t,"top"),!0),a=qn($n(t,"bottom")),s=Yn(t,"x"),l=Yn(t,"y");return{fullSize:n,leftAndTop:r.concat(i),rightAndBottom:o.concat(l).concat(a).concat(s),chartArea:$n(t,"chartArea"),vertical:r.concat(o).concat(l),horizontal:i.concat(a).concat(s)}}(e.boxes),l=s.vertical,c=s.horizontal;y(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const u=l.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,d=Object.freeze({outerWidth:t,outerHeight:n,padding:o,availableWidth:i,availableHeight:a,vBoxMaxWidth:i/2/u,hBoxMaxHeight:a/2}),f=Object.assign({},o);Xn(f,it(r));const h=Object.assign({maxPadding:f,w:i,h:a,x:o.left,y:o.top},o);!function(e,t){let n,r,o;for(n=0,r=e.length;n<r;++n)o=e[n],o.horizontal?(o.width=o.box.fullSize&&t.availableWidth,o.height=t.hBoxMaxHeight):(o.width=t.vBoxMaxWidth,o.height=o.box.fullSize&&t.availableHeight)}(l.concat(c),d),Zn(s.fullSize,h,d),Zn(l,h,d),Zn(c,h,d)&&Zn(l,h,d),function(e){const t=e.maxPadding;function n(n){const r=Math.max(t[n]-e[n],0);return e[n]+=r,r}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(h),Jn(s.leftAndTop,h,d),h.x+=h.w,h.y+=h.h,Jn(s.rightAndBottom,h,d),e.chartArea={left:h.left,top:h.top,right:h.left+h.w,bottom:h.top+h.h,height:h.h,width:h.w},y(s.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(h.w,h.h)}))}};class tr{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,r){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,r?Math.floor(t/r):n)}}isAttached(e){return!0}}class nr extends tr{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}}const rr={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},or=e=>null===e||""===e,ir=!!Vt&&{passive:!0};function ar(e,t,n){e.canvas.removeEventListener(t,n,ir)}function sr(e,t,n){const r=e.canvas,o=r&&Rt(r)||r,i=new MutationObserver((e=>{const t=Rt(o);e.forEach((e=>{for(let r=0;r<e.addedNodes.length;r++){const i=e.addedNodes[r];i!==o&&i!==t||n(e.target)}}))}));return i.observe(document,{childList:!0,subtree:!0}),i}function lr(e,t,n){const r=e.canvas,o=r&&Rt(r);if(!o)return;const i=new MutationObserver((e=>{e.forEach((e=>{for(let t=0;t<e.removedNodes.length;t++)if(e.removedNodes[t]===r){n();break}}))}));return i.observe(o,{childList:!0}),i}const cr=new Map;let ur=0;function dr(){const e=window.devicePixelRatio;e!==ur&&(ur=e,cr.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function fr(e,t,n){const r=e.canvas,o=r&&Rt(r);if(!o)return;const i=a(((e,t)=>{const r=o.clientWidth;n(e,t),r<o.clientWidth&&n()}),window),s=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,r=t.contentRect.height;0===n&&0===r||i(n,r)}));return s.observe(o),function(e,t){cr.size||window.addEventListener("resize",dr),cr.set(e,t)}(e,i),s}function hr(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){cr.delete(e),cr.size||window.removeEventListener("resize",dr)}(e)}function pr(e,t,n){const r=e.canvas,o=a((t=>{null!==e.ctx&&n(function(e,t){const n=rr[e.type]||e.type,{x:r,y:o}=Ft(e,t);return{type:n,chart:t,native:e,x:void 0!==r?r:null,y:void 0!==o?o:null}}(t,e))}),e,(e=>{const t=e[0];return[t,t.offsetX,t.offsetY]}));return function(e,t,n){e.addEventListener(t,n,ir)}(r,t,o),o}class gr extends tr{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,r=e.getAttribute("height"),o=e.getAttribute("width");if(e.$chartjs={initial:{height:r,width:o,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",or(o)){const t=Wt(e,"width");void 0!==t&&(e.width=t)}if(or(r))if(""===e.style.height)e.height=e.width/(t||2);else{const t=Wt(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t.$chartjs)return!1;const n=t.$chartjs.initial;["height","width"].forEach((e=>{const r=n[e];d(r)?t.removeAttribute(e):t.setAttribute(e,r)}));const r=n.style||{};return Object.keys(r).forEach((e=>{t.style[e]=r[e]})),t.width=t.width,delete t.$chartjs,!0}addEventListener(e,t,n){this.removeEventListener(e,t);const r=e.$proxies||(e.$proxies={}),o={attach:sr,detach:lr,resize:fr}[t]||pr;r[t]=o(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),r=n[t];r&&(({attach:hr,detach:hr,resize:hr}[t]||ar)(e,t,r),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,r){return function(e,t,n,r){const o=zt(e),i=jt(o,"margin"),a=At(o.maxWidth,e,"clientWidth")||z,s=At(o.maxHeight,e,"clientHeight")||z,l=function(e,t,n){let r,o;if(void 0===t||void 0===n){const i=Rt(e);if(i){const e=i.getBoundingClientRect(),a=zt(i),s=jt(a,"border","width"),l=jt(a,"padding");t=e.width-l.width-s.width,n=e.height-l.height-s.height,r=At(a.maxWidth,i,"clientWidth"),o=At(a.maxHeight,i,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:r||z,maxHeight:o||z}}(e,t,n);let{width:c,height:u}=l;if("content-box"===o.boxSizing){const e=jt(o,"border","width"),t=jt(o,"padding");c-=t.width+e.width,u-=t.height+e.height}return c=Math.max(0,c-i.width),u=Math.max(0,r?Math.floor(c/r):u-i.height),c=It(Math.min(c,a,l.maxWidth)),u=It(Math.min(u,s,l.maxHeight)),c&&!u&&(u=It(c/2)),{width:c,height:u}}(e,t,n,r)}isAttached(e){const t=Rt(e);return!(!t||!Rt(t))}}class mr{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return H(this.x)&&H(this.y)}getProps(e,t){const n=this,r=this.$animations;if(!t||!r)return n;const o={};return e.forEach((e=>{o[e]=r[e]&&r[e].active()?r[e]._to:n[e]})),o}}mr.defaults={},mr.defaultRoutes=void 0;const br={values:e=>f(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const r=this.chart.options.locale;let o,i=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(o="scientific"),i=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const a=B(Math.abs(i)),s=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:o,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),qt(e,r,l)},logarithmic(e,t,n){if(0===e)return"0";const r=e/Math.pow(10,Math.floor(B(e)));return 1===r||2===r||5===r?br.numeric.call(this,e,t,n):""}};var vr={formatters:br};function yr(e,t,n,r,o){const i=m(r,0),a=Math.min(m(o,e.length),e.length);let s,l,c,u=0;for(n=Math.ceil(n),o&&(s=o-r,n=s/Math.floor(s/n)),c=i;c<0;)u++,c=Math.round(i+u*n);for(l=Math.max(i,0);l<a;l++)l===c&&(t.push(e[l]),u++,c=Math.round(i+u*n))}Be.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:vr.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Be.route("scale.ticks","color","","color"),Be.route("scale.grid","color","","borderColor"),Be.route("scale.grid","borderColor","","borderColor"),Be.route("scale.title","color","","color"),Be.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e}),Be.describe("scales",{_fallback:"scale"});const xr=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n;function _r(e,t){const n=[],r=e.length/t,o=e.length;let i=0;for(;i<o;i+=r)n.push(e[Math.floor(i)]);return n}function wr(e,t,n){const r=e.ticks.length,o=Math.min(t,r-1),i=e._startPixel,a=e._endPixel,s=1e-6;let l,c=e.getPixelForTick(o);if(!(n&&(l=1===r?Math.max(c-i,a-c):0===t?(e.getPixelForTick(1)-c)/2:(c-e.getPixelForTick(o-1))/2,c+=o<t?l:-l,c<i-s||c>a+s)))return c}function kr(e){return e.drawTicks?e.tickLength:0}function Sr(e,t){if(!e.display)return 0;const n=at(e.font,t),r=it(e.padding);return(f(e.text)?e.text.length:1)*n.lineHeight+r.height}function Mr(e,t,n){let r=s(e);return(n&&"right"!==t||!n&&"right"===t)&&(r=(e=>"left"===e?"right":"right"===e?"left":e)(r)),r}class Er extends mr{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){const t=this;t.options=e.setContext(t.getContext()),t.axis=e.axis,t._userMin=t.parse(e.min),t._userMax=t.parse(e.max),t._suggestedMin=t.parse(e.suggestedMin),t._suggestedMax=t.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:r}=this;return e=g(e,Number.POSITIVE_INFINITY),t=g(t,Number.NEGATIVE_INFINITY),n=g(n,Number.POSITIVE_INFINITY),r=g(r,Number.NEGATIVE_INFINITY),{min:g(e,n),max:g(t,r),minDefined:p(e),maxDefined:p(t)}}getMinMax(e){const t=this;let n,{min:r,max:o,minDefined:i,maxDefined:a}=t.getUserBounds();if(i&&a)return{min:r,max:o};const s=t.getMatchingVisibleMetas();for(let l=0,c=s.length;l<c;++l)n=s[l].controller.getMinMax(t,e),i||(r=Math.min(r,n.min)),a||(o=Math.max(o,n.max));return{min:g(r,g(o,r)),max:g(o,g(r,o))}}getPadding(){const e=this;return{left:e.paddingLeft||0,top:e.paddingTop||0,right:e.paddingRight||0,bottom:e.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){v(this.options.beforeUpdate,[this])}update(e,t,n){const r=this,o=r.options.ticks,i=o.sampleSize;r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),r.ticks=null,r._labelSizes=null,r._gridLineItems=null,r._labelItems=null,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r._maxLength=r.isHorizontal()?r.width+n.left+n.right:r.height+n.top+n.bottom,r._dataLimitsCached||(r.beforeDataLimits(),r.determineDataLimits(),r.afterDataLimits(),r._range=function(e,t){const{min:n,max:r}=e;return{min:n-Math.abs(b(t,n)),max:r+b(t,r)}}(r,r.options.grace),r._dataLimitsCached=!0),r.beforeBuildTicks(),r.ticks=r.buildTicks()||[],r.afterBuildTicks();const a=i<r.ticks.length;r._convertTicksToLabels(a?_r(r.ticks,i):r.ticks),r.configure(),r.beforeCalculateLabelRotation(),r.calculateLabelRotation(),r.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(r.ticks=function(e,t){const n=e.options.ticks,r=n.maxTicksLimit||function(e){const t=e.options.offset,n=e._tickSize(),r=e._length/n+(t?0:1),o=e._maxLength/n;return Math.floor(Math.min(r,o))}(e),o=n.major.enabled?function(e){const t=[];let n,r;for(n=0,r=e.length;n<r;n++)e[n].major&&t.push(n);return t}(t):[],i=o.length,a=o[0],s=o[i-1],l=[];if(i>r)return function(e,t,n,r){let o,i=0,a=n[0];for(r=Math.ceil(r),o=0;o<e.length;o++)o===a&&(t.push(e[o]),i++,a=n[i*r])}(t,l,o,i/r),l;const c=function(e,t,n){const r=function(e){const t=e.length;let n,r;if(t<2)return!1;for(r=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==r)return!1;return r}(e),o=t.length/n;if(!r)return Math.max(o,1);const i=function(e){const t=[],n=Math.sqrt(e);let r;for(r=1;r<n;r++)e%r==0&&(t.push(r),t.push(e/r));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}(r);for(let e=0,t=i.length-1;e<t;e++){const t=i[e];if(t>o)return t}return Math.max(o,1)}(o,t,r);if(i>0){let e,n;const r=i>1?Math.round((s-a)/(i-1)):null;for(yr(t,l,c,d(r)?0:a-r,a),e=0,n=i-1;e<n;e++)yr(t,l,c,o[e],o[e+1]);return yr(t,l,c,s,d(r)?t.length:s+r),l}return yr(t,l,c),l}(r,r.ticks),r._labelSizes=null),a&&r._convertTicksToLabels(r.ticks),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate()}configure(){const e=this;let t,n,r=e.options.reverse;e.isHorizontal()?(t=e.left,n=e.right):(t=e.top,n=e.bottom,r=!r),e._startPixel=t,e._endPixel=n,e._reversePixels=r,e._length=n-t,e._alignToPixels=e.options.alignToPixels}afterUpdate(){v(this.options.afterUpdate,[this])}beforeSetDimensions(){v(this.options.beforeSetDimensions,[this])}setDimensions(){const e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0}afterSetDimensions(){v(this.options.afterSetDimensions,[this])}_callHooks(e){const t=this;t.chart.notifyPlugins(e,t.getContext()),v(t.options[e],[t])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){v(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this,n=t.options.ticks;let r,o,i;for(r=0,o=e.length;r<o;r++)i=e[r],i.label=v(n.callback,[i.value,r,e],t);for(r=0;r<o;r++)d(e[r].label)&&(e.splice(r,1),o--,r--)}afterTickToLabelConversion(){v(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){v(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this,t=e.options,n=t.ticks,r=e.ticks.length,o=n.minRotation||0,i=n.maxRotation;let a,s,l,c=o;if(!e._isVisible()||!n.display||o>=i||r<=1||!e.isHorizontal())return void(e.labelRotation=o);const u=e._getLabelSizes(),d=u.widest.width,f=u.highest.height,h=J(e.chart.width-d,0,e.maxWidth);a=t.offset?e.maxWidth/r:h/(r-1),d+6>a&&(a=h/(r-(t.offset?.5:1)),s=e.maxHeight-kr(t.grid)-n.padding-Sr(t.title,e.chart.options.font),l=Math.sqrt(d*d+f*f),c=q(Math.min(Math.asin(Math.min((u.highest.height+6)/a,1)),Math.asin(Math.min(s/l,1))-Math.asin(f/l))),c=Math.max(o,Math.min(i,c))),e.labelRotation=c}afterCalculateLabelRotation(){v(this.options.afterCalculateLabelRotation,[this])}beforeFit(){v(this.options.beforeFit,[this])}fit(){const e=this,t={width:0,height:0},{chart:n,options:{ticks:r,title:o,grid:i}}=e,a=e._isVisible(),s=e.isHorizontal();if(a){const a=Sr(o,n.options.font);if(s?(t.width=e.maxWidth,t.height=kr(i)+a):(t.height=e.maxHeight,t.width=kr(i)+a),r.display&&e.ticks.length){const{first:n,last:o,widest:i,highest:a}=e._getLabelSizes(),l=2*r.padding,c=Y(e.labelRotation),u=Math.cos(c),d=Math.sin(c);if(s){const n=r.mirror?0:d*i.width+u*a.height;t.height=Math.min(e.maxHeight,t.height+n+l)}else{const n=r.mirror?0:u*i.width+d*a.height;t.width=Math.min(e.maxWidth,t.width+n+l)}e._calculatePadding(n,o,d,u)}}e._handleMargins(),s?(e.width=e._length=n.width-e._margins.left-e._margins.right,e.height=t.height):(e.width=t.width,e.height=e._length=n.height-e._margins.top-e._margins.bottom)}_calculatePadding(e,t,n,r){const o=this,{ticks:{align:i,padding:a},position:s}=o.options,l=0!==o.labelRotation,c="top"!==s&&"x"===o.axis;if(o.isHorizontal()){const s=o.getPixelForTick(0)-o.left,u=o.right-o.getPixelForTick(o.ticks.length-1);let d=0,f=0;l?c?(d=r*e.width,f=n*t.height):(d=n*e.height,f=r*t.width):"start"===i?f=t.width:"end"===i?d=e.width:(d=e.width/2,f=t.width/2),o.paddingLeft=Math.max((d-s+a)*o.width/(o.width-s),0),o.paddingRight=Math.max((f-u+a)*o.width/(o.width-u),0)}else{let n=t.height/2,r=e.height/2;"start"===i?(n=0,r=e.height):"end"===i&&(n=t.height,r=0),o.paddingTop=n+a,o.paddingBottom=r+a}}_handleMargins(){const e=this;e._margins&&(e._margins.left=Math.max(e.paddingLeft,e._margins.left),e._margins.top=Math.max(e.paddingTop,e._margins.top),e._margins.right=Math.max(e.paddingRight,e._margins.right),e._margins.bottom=Math.max(e.paddingBottom,e._margins.bottom))}afterFit(){v(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){const t=this;t.beforeTickToLabelConversion(),t.generateTickLabels(e),t.afterTickToLabelConversion()}_getLabelSizes(){const e=this;let t=e._labelSizes;if(!t){const n=e.options.ticks.sampleSize;let r=e.ticks;n<r.length&&(r=_r(r,n)),e._labelSizes=t=e._computeLabelSizes(r,r.length)}return t}_computeLabelSizes(e,t){const{ctx:n,_longestTextCache:r}=this,o=[],i=[];let a,s,l,c,u,h,p,g,m,b,v,x=0,_=0;for(a=0;a<t;++a){if(c=e[a].label,u=this._resolveTickFontOptions(a),n.font=h=u.string,p=r[h]=r[h]||{data:{},gc:[]},g=u.lineHeight,m=b=0,d(c)||f(c)){if(f(c))for(s=0,l=c.length;s<l;++s)v=c[s],d(v)||f(v)||(m=Ve(n,p.data,p.gc,m,v),b+=g)}else m=Ve(n,p.data,p.gc,m,c),b=g;o.push(m),i.push(b),x=Math.max(m,x),_=Math.max(b,_)}!function(e,t){y(e,(e=>{const n=e.gc,r=n.length/2;let o;if(r>t){for(o=0;o<r;++o)delete e.data[n[o]];n.splice(0,r)}}))}(r,t);const w=o.indexOf(x),k=i.indexOf(_),S=e=>({width:o[e]||0,height:i[e]||0});return{first:S(0),last:S(t-1),widest:S(w),highest:S(k),widths:o,heights:i}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){const t=this;t._reversePixels&&(e=1-e);const n=t._startPixel+e*t._length;return J(t._alignToPixels?He(t.chart,n,0):n,-32768,32767)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this,n=t.ticks||[];if(e>=0&&e<n.length){const r=n[e];return r.$context||(r.$context=function(e,t,n){return Object.assign(Object.create(e),{tick:n,index:t,type:"tick"})}(t.getContext(),e,r))}return t.$context||(t.$context=(r=t.chart.getContext(),o=t,Object.assign(Object.create(r),{scale:o,type:"scale"})));var r,o}_tickSize(){const e=this,t=e.options.ticks,n=Y(e.labelRotation),r=Math.abs(Math.cos(n)),o=Math.abs(Math.sin(n)),i=e._getLabelSizes(),a=t.autoSkipPadding||0,s=i?i.widest.width+a:0,l=i?i.highest.height+a:0;return e.isHorizontal()?l*r>s*o?s/r:l/o:l*o<s*r?l/r:s/o}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this,n=t.axis,r=t.chart,o=t.options,{grid:i,position:a}=o,s=i.offset,l=t.isHorizontal(),c=t.ticks.length+(s?1:0),u=kr(i),d=[],f=i.setContext(t.getContext()),p=f.drawBorder?f.borderWidth:0,g=p/2,m=function(e){return He(r,e,p)};let b,v,y,x,_,w,k,S,M,E,C,P;if("top"===a)b=m(t.bottom),w=t.bottom-u,S=b-g,E=m(e.top)+g,P=e.bottom;else if("bottom"===a)b=m(t.top),E=e.top,P=m(e.bottom)-g,w=b+g,S=t.top+u;else if("left"===a)b=m(t.right),_=t.right-u,k=b-g,M=m(e.left)+g,C=e.right;else if("right"===a)b=m(t.left),M=e.left,C=m(e.right)-g,_=b+g,k=t.left+u;else if("x"===n){if("center"===a)b=m((e.top+e.bottom)/2+.5);else if(h(a)){const e=Object.keys(a)[0],n=a[e];b=m(t.chart.scales[e].getPixelForValue(n))}E=e.top,P=e.bottom,w=b+g,S=w+u}else if("y"===n){if("center"===a)b=m((e.left+e.right)/2);else if(h(a)){const e=Object.keys(a)[0],n=a[e];b=m(t.chart.scales[e].getPixelForValue(n))}_=b-g,k=_-u,M=e.left,C=e.right}for(v=0;v<c;++v){const e=i.setContext(t.getContext(v)),n=e.lineWidth,o=e.color,a=i.borderDash||[],c=e.borderDashOffset,u=e.tickWidth,f=e.tickColor,h=e.tickBorderDash||[],p=e.tickBorderDashOffset;y=wr(t,v,s),void 0!==y&&(x=He(r,y,n),l?_=k=M=C=x:w=S=E=P=x,d.push({tx1:_,ty1:w,tx2:k,ty2:S,x1:M,y1:E,x2:C,y2:P,width:n,color:o,borderDash:a,borderDashOffset:c,tickWidth:u,tickColor:f,tickBorderDash:h,tickBorderDashOffset:p}))}return t._ticksLength=c,t._borderValue=b,d}_computeLabelItems(e){const t=this,n=t.axis,r=t.options,{position:o,ticks:i}=r,a=t.isHorizontal(),s=t.ticks,{align:l,crossAlign:c,padding:u,mirror:d}=i,p=kr(r.grid),g=p+u,m=d?-u:g,b=-Y(t.labelRotation),v=[];let y,x,_,w,k,S,M,E,C,P,O,T,D="middle";if("top"===o)S=t.bottom-m,M=t._getXAxisLabelAlignment();else if("bottom"===o)S=t.top+m,M=t._getXAxisLabelAlignment();else if("left"===o){const e=t._getYAxisLabelAlignment(p);M=e.textAlign,k=e.x}else if("right"===o){const e=t._getYAxisLabelAlignment(p);M=e.textAlign,k=e.x}else if("x"===n){if("center"===o)S=(e.top+e.bottom)/2+g;else if(h(o)){const e=Object.keys(o)[0],n=o[e];S=t.chart.scales[e].getPixelForValue(n)+g}M=t._getXAxisLabelAlignment()}else if("y"===n){if("center"===o)k=(e.left+e.right)/2-g;else if(h(o)){const e=Object.keys(o)[0],n=o[e];k=t.chart.scales[e].getPixelForValue(n)}M=t._getYAxisLabelAlignment(p).textAlign}"y"===n&&("start"===l?D="top":"end"===l&&(D="bottom"));const L=t._getLabelSizes();for(y=0,x=s.length;y<x;++y){_=s[y],w=_.label;const e=i.setContext(t.getContext(y));E=t.getPixelForTick(y)+i.labelOffset,C=t._resolveTickFontOptions(y),P=C.lineHeight,O=f(w)?w.length:1;const n=O/2,r=e.color,l=e.textStrokeColor,u=e.textStrokeWidth;let h;if(a?(k=E,T="top"===o?"near"===c||0!==b?-O*P+P/2:"center"===c?-L.highest.height/2-n*P+P:-L.highest.height+P/2:"near"===c||0!==b?P/2:"center"===c?L.highest.height/2-n*P:L.highest.height-O*P,d&&(T*=-1)):(S=E,T=(1-O)*P/2),e.showLabelBackdrop){const t=it(e.backdropPadding),n=L.heights[y],r=L.widths[y];let o=S+T-t.top,i=k-t.left;switch(D){case"middle":o-=n/2;break;case"bottom":o-=n}switch(M){case"center":i-=r/2;break;case"right":i-=r}h={left:i,top:o,width:r+t.width,height:n+t.height,color:e.backdropColor}}v.push({rotation:b,label:w,font:C,color:r,strokeColor:l,strokeWidth:u,textOffset:T,textAlign:M,textBaseline:D,translation:[k,S],backdrop:h})}return v}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-Y(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align&&(n="right"),n}_getYAxisLabelAlignment(e){const t=this,{position:n,ticks:{crossAlign:r,mirror:o,padding:i}}=t.options,a=e+i,s=t._getLabelSizes().widest.width;let l,c;return"left"===n?o?(l="left",c=t.right+i):(c=t.right-a,"near"===r?l="right":"center"===r?(l="center",c-=s/2):(l="left",c=t.left)):"right"===n?o?(l="right",c=t.left+i):(c=t.left+a,"near"===r?l="left":"center"===r?(l="center",c+=s/2):(l="right",c=t.right)):l="right",{textAlign:l,x:c}}_computeLabelArea(){const e=this;if(e.options.ticks.mirror)return;const t=e.chart,n=e.options.position;return"left"===n||"right"===n?{top:0,left:e.left,bottom:t.height,right:e.right}:"top"===n||"bottom"===n?{top:e.top,left:0,bottom:e.bottom,right:t.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:r,width:o,height:i}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,r,o,i),e.restore())}getLineWidthForValue(e){const t=this,n=t.options.grid;if(!t._isVisible()||!n.display)return 0;const r=t.ticks.findIndex((t=>t.value===e));return r>=0?n.setContext(t.getContext(r)).lineWidth:0}drawGrid(e){const t=this,n=t.options.grid,r=t.ctx,o=t._gridLineItems||(t._gridLineItems=t._computeGridLineItems(e));let i,a;const s=(e,t,n)=>{n.width&&n.color&&(r.save(),r.lineWidth=n.width,r.strokeStyle=n.color,r.setLineDash(n.borderDash||[]),r.lineDashOffset=n.borderDashOffset,r.beginPath(),r.moveTo(e.x,e.y),r.lineTo(t.x,t.y),r.stroke(),r.restore())};if(n.display)for(i=0,a=o.length;i<a;++i){const e=o[i];n.drawOnChartArea&&s({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),n.drawTicks&&s({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const e=this,{chart:t,ctx:n,options:{grid:r}}=e,o=r.setContext(e.getContext()),i=r.drawBorder?o.borderWidth:0;if(!i)return;const a=r.setContext(e.getContext(0)).lineWidth,s=e._borderValue;let l,c,u,d;e.isHorizontal()?(l=He(t,e.left,i)-i/2,c=He(t,e.right,a)+a/2,u=d=s):(u=He(t,e.top,i)-i/2,d=He(t,e.bottom,a)+a/2,l=c=s),n.save(),n.lineWidth=o.borderWidth,n.strokeStyle=o.borderColor,n.beginPath(),n.moveTo(l,u),n.lineTo(c,d),n.stroke(),n.restore()}drawLabels(e){const t=this;if(!t.options.ticks.display)return;const n=t.ctx,r=t._computeLabelArea();r&&qe(n,r);const o=t._labelItems||(t._labelItems=t._computeLabelItems(e));let i,a;for(i=0,a=o.length;i<a;++i){const e=o[i],t=e.font,r=e.label;e.backdrop&&(n.fillStyle=e.backdrop.color,n.fillRect(e.backdrop.left,e.backdrop.top,e.backdrop.width,e.backdrop.height)),Ge(n,r,0,e.textOffset,t,e)}r&&Qe(n)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:r}}=this;if(!n.display)return;const o=at(n.font),i=it(n.padding),a=n.align;let s=o.lineHeight/2;"bottom"===t?(s+=i.bottom,f(n.text)&&(s+=o.lineHeight*(n.text.length-1))):s+=i.top;const{titleX:c,titleY:u,maxWidth:d,rotation:h}=function(e,t,n,r){const{top:o,left:i,bottom:a,right:s}=e;let c,u,d,f=0;return e.isHorizontal()?(u=l(r,i,s),d=xr(e,n,t),c=s-i):(u=xr(e,n,t),d=l(r,a,o),f="left"===n?-j:j),{titleX:u,titleY:d,maxWidth:c,rotation:f}}(this,s,t,a);Ge(e,n.text,0,0,o,{color:n.color,maxWidth:d,rotation:h,textAlign:Mr(a,t,r),textBaseline:"middle",translation:[c,u]})}draw(e){const t=this;t._isVisible()&&(t.drawBackground(),t.drawGrid(e),t.drawBorder(),t.drawTitle(),t.drawLabels(e))}_layers(){const e=this,t=e.options,n=t.ticks&&t.ticks.z||0,r=t.grid&&t.grid.z||0;return e._isVisible()&&e.draw===Er.prototype.draw?[{z:r,draw(t){e.drawBackground(),e.drawGrid(t),e.drawTitle()}},{z:r+1,draw(){e.drawBorder()}},{z:n,draw(t){e.drawLabels(t)}}]:[{z:n,draw(t){e.draw(t)}}]}getMatchingVisibleMetas(e){const t=this,n=t.chart.getSortedVisibleDatasetMetas(),r=t.axis+"AxisID",o=[];let i,a;for(i=0,a=n.length;i<a;++i){const a=n[i];a[r]!==t.id||e&&a.type!==e||o.push(a)}return o}_resolveTickFontOptions(e){return at(this.options.ticks.setContext(this.getContext(e)).font)}_maxDigits(){const e=this,t=e._resolveTickFontOptions(0).lineHeight;return(e.isHorizontal()?e.width:e.height)/t}}class Cr{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=this,n=Object.getPrototypeOf(e);let r;(function(e){return"id"in e&&"defaults"in e})(n)&&(r=t.register(n));const o=t.items,i=e.id,a=t.scope+"."+i;if(!i)throw new Error("class does not have id: "+e);return i in o||(o[i]=e,function(e,t,n){const r=S(Object.create(null),[n?Be.get(n):{},Be.get(t),e.defaults]);Be.set(t,r),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const r=n.split("."),o=r.pop(),i=[e].concat(r).join("."),a=t[n].split("."),s=a.pop(),l=a.join(".");Be.route(i,o,l,s)}))}(t,e.defaultRoutes),e.descriptors&&Be.describe(t,e.descriptors)}(e,a,r),t.override&&Be.override(e.id,e.overrides)),a}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,r=this.scope;n in t&&delete t[n],r&&n in Be[r]&&(delete Be[r][n],this.override&&delete Ne[n])}}var Pr=new class{constructor(){this.controllers=new Cr(xn,"datasets",!0),this.elements=new Cr(mr,"elements"),this.plugins=new Cr(Object,"plugins"),this.scales=new Cr(Er,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){const r=this;[...t].forEach((t=>{const o=n||r._getRegistryForType(t);n||o.isForType(t)||o===r.plugins&&t.id?r._exec(e,o,t):y(t,(t=>{const o=n||r._getRegistryForType(t);r._exec(e,o,t)}))}))}_exec(e,t,n){const r=O(e);v(n["before"+r],[],n),t[e](n),v(n["after"+r],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const r=t.get(e);if(void 0===r)throw new Error('"'+e+'" is not a registered '+n+".");return r}};class Or{constructor(){this._init=[]}notify(e,t,n,r){const o=this;"beforeInit"===t&&(o._init=o._createDescriptors(e,!0),o._notify(o._init,e,"install"));const i=r?o._descriptors(e).filter(r):o._descriptors(e),a=o._notify(i,e,t,n);return"destroy"===t&&(o._notify(i,e,"stop"),o._notify(o._init,e,"uninstall")),a}_notify(e,t,n,r){r=r||{};for(const o of e){const e=o.plugin;if(!1===v(e[n],[t,r,o.options],e)&&r.cancelable)return!1}return!0}invalidate(){d(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,r=m(n.options&&n.options.plugins,{}),o=function(e){const t=[],n=Object.keys(Pr.plugins.items);for(let e=0;e<n.length;e++)t.push(Pr.getPlugin(n[e]));const r=e.plugins||[];for(let e=0;e<r.length;e++){const n=r[e];-1===t.indexOf(n)&&t.push(n)}return t}(n);return!1!==r||t?function(e,t,n,r){const o=[],i=e.getContext();for(let a=0;a<t.length;a++){const s=t[a],l=Tr(n[s.id],r);null!==l&&o.push({plugin:s,options:Dr(e.config,s,l,i)})}return o}(e,o,r,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,r=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(r(t,n),e,"stop"),this._notify(r(n,t),e,"start")}}function Tr(e,t){return t||!1!==e?!0===e?{}:e:null}function Dr(e,t,n,r){const o=e.pluginScopeKeys(t),i=e.getOptionScopes(n,o);return e.createResolver(i,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Lr(e,t){const n=Be.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function Rr(e,t){return"x"===e||"y"===e?e:t.axis||("top"===(n=t.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.charAt(0).toLowerCase();var n}function Ar(e){const t=e.options||(e.options={});t.plugins=m(t.plugins,{}),t.scales=function(e,t){const n=Ne[e.type]||{scales:{}},r=t.scales||{},o=Lr(e.type,t),i=Object.create(null),a=Object.create(null);return Object.keys(r).forEach((e=>{const t=r[e],s=Rr(e,t),l=function(e,t){return e===t?"_index_":"_value_"}(s,o),c=n.scales||{};i[s]=i[s]||e,a[e]=M(Object.create(null),[{axis:s},t,c[s],c[l]])})),e.data.datasets.forEach((n=>{const o=n.type||e.type,s=n.indexAxis||Lr(o,t),l=(Ne[o]||{}).scales||{};Object.keys(l).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,s),o=n[t+"AxisID"]||i[t]||t;a[o]=a[o]||Object.create(null),M(a[o],[{axis:t},r[o],l[e]])}))})),Object.keys(a).forEach((e=>{const t=a[e];M(t,[Be.scales[t.type],Be.scale])})),a}(e,t)}function zr(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const Nr=new Map,jr=new Set;function Fr(e,t){let n=Nr.get(e);return n||(n=t(),Nr.set(e,n),jr.add(n)),n}const Ir=(e,t,n)=>{const r=P(t,n);void 0!==r&&e.add(r)};class Br{constructor(e){this._config=function(e){return(e=e||{}).data=zr(e.data),Ar(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=zr(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),Ar(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return Fr(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return Fr(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return Fr(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return Fr(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let r=n.get(e);return r&&!t||(r=new Map,n.set(e,r)),r}getOptionScopes(e,t,n){const{options:r,type:o}=this,i=this._cachedScopes(e,n),a=i.get(t);if(a)return a;const s=new Set;t.forEach((t=>{e&&(s.add(e),t.forEach((t=>Ir(s,e,t)))),t.forEach((e=>Ir(s,r,e))),t.forEach((e=>Ir(s,Ne[o]||{},e))),t.forEach((e=>Ir(s,Be,e))),t.forEach((e=>Ir(s,je,e)))}));const l=[...s];return jr.has(t)&&i.set(t,l),l}chartOptionScopes(){const{options:e,type:t}=this;return[e,Ne[t]||{},Be.datasets[t]||{},{type:t},Be,je]}resolveNamedOptions(e,t,n,r=[""]){const o={$shared:!0},{resolver:i,subPrefixes:a}=Vr(this._resolverCache,e,r);let s=i;(function(e,t){const{isScriptable:n,isIndexable:r}=mt(e);for(const o of t)if(n(o)&&D(e[o])||r(o)&&f(e[o]))return!0;return!1})(i,t)&&(o.$shared=!1,s=gt(i,n=D(n)?n():n,this.createResolver(e,n,a)));for(const e of t)o[e]=s[e];return o}createResolver(e,t,n=[""],r){const{resolver:o}=Vr(this._resolverCache,e,n);return h(t)?gt(o,t,void 0,r):o}}function Vr(e,t,n){let r=e.get(t);r||(r=new Map,e.set(t,r));const o=n.join();let i=r.get(o);return i||(i={resolver:pt(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},r.set(o,i)),i}const Wr=["top","bottom","left","right","chartArea"];function Hr(e,t){return"top"===e||"bottom"===e||-1===Wr.indexOf(e)&&"x"===t}function Ur(e,t){return function(n,r){return n[e]===r[e]?n[t]-r[t]:n[e]-r[e]}}function $r(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),v(n&&n.onComplete,[e],t)}function Yr(e){const t=e.chart,n=t.options.animation;v(n&&n.onProgress,[e],t)}function qr(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Qr(e){return qr()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const Xr={},Kr=e=>{const t=Qr(e);return Object.values(Xr).filter((e=>e.canvas===t)).pop()};class Gr{constructor(e,t){const n=this;this.config=t=new Br(t);const r=Qr(e),o=Kr(r);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas can be reused.");const i=t.createResolver(t.chartOptionScopes(),n.getContext());this.platform=n._initializePlatform(r,t);const a=n.platform.acquireContext(r,i.aspectRatio),s=a&&a.canvas,l=s&&s.height,c=s&&s.width;this.id=u(),this.ctx=a,this.canvas=s,this.width=c,this.height=l,this._options=i,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this.scale=void 0,this._plugins=new Or,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(e,t){let n;return function(){return t?(clearTimeout(n),n=setTimeout(e,t)):e(),t}}((()=>this.update("resize")),i.resizeDelay||0),Xr[n.id]=n,a&&s?(nn.listen(n,"complete",$r),nn.listen(n,"progress",Yr),n._initialize(),n.attached&&n.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:r,_aspectRatio:o}=this;return d(e)?t&&o?o:r?n/r:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}_initialize(){const e=this;return e.notifyPlugins("beforeInit"),e.options.responsive?e.resize():Bt(e,e.options.devicePixelRatio),e.bindEvents(),e.notifyPlugins("afterInit"),e}_initializePlatform(e,t){return t.platform?new t.platform:!qr()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?new nr:new gr}clear(){return Ue(this.canvas,this.ctx),this}stop(){return nn.stop(this),this}resize(e,t){nn.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this,r=n.options,o=n.canvas,i=r.maintainAspectRatio&&n.aspectRatio,a=n.platform.getMaximumSize(o,e,t,i),s=r.devicePixelRatio||n.platform.getDevicePixelRatio();n.width=a.width,n.height=a.height,n._aspectRatio=n.aspectRatio,Bt(n,s,!0)&&(n.notifyPlugins("resize",{size:a}),v(r.onResize,[n,a],n),n.attached&&n._doResize()&&n.render())}ensureScalesHaveIDs(){y(this.options.scales||{},((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this,t=e.options,n=t.scales,r=e.scales,o=Object.keys(r).reduce(((e,t)=>(e[t]=!1,e)),{});let i=[];n&&(i=i.concat(Object.keys(n).map((e=>{const t=n[e],r=Rr(e,t),o="r"===r,i="x"===r;return{options:t,dposition:o?"chartArea":i?"bottom":"left",dtype:o?"radialLinear":i?"category":"linear"}})))),y(i,(n=>{const i=n.options,a=i.id,s=Rr(a,i),l=m(i.type,n.dtype);void 0!==i.position&&Hr(i.position,s)===Hr(n.dposition)||(i.position=n.dposition),o[a]=!0;let c=null;a in r&&r[a].type===l?c=r[a]:(c=new(Pr.getScale(l))({id:a,type:l,ctx:e.ctx,chart:e}),r[c.id]=c),c.init(i,t)})),y(o,((e,t)=>{e||delete r[t]})),y(r,(t=>{er.configure(e,t,t.options),er.addBox(e,t)}))}_updateMetasetIndex(e,t){const n=this._metasets,r=e.index;r!==t&&(n[r]=n[t],n[t]=e,e.index=t)}_updateMetasets(){const e=this,t=e._metasets,n=e.data.datasets.length,r=t.length;if(r>n){for(let t=n;t<r;++t)e._destroyDatasetMeta(t);t.splice(n,r-n)}e._sortedMetasets=t.slice(0).sort(Ur("order","index"))}_removeUnreferencedMetasets(){const e=this,{_metasets:t,data:{datasets:n}}=e;t.length>n.length&&delete e._stacks,t.forEach(((t,r)=>{0===n.filter((e=>e===t._dataset)).length&&e._destroyDatasetMeta(r)}))}buildOrUpdateControllers(){const e=this,t=[],n=e.data.datasets;let r,o;for(e._removeUnreferencedMetasets(),r=0,o=n.length;r<o;r++){const o=n[r];let i=e.getDatasetMeta(r);const a=o.type||e.config.type;if(i.type&&i.type!==a&&(e._destroyDatasetMeta(r),i=e.getDatasetMeta(r)),i.type=a,i.indexAxis=o.indexAxis||Lr(a,e.options),i.order=o.order||0,e._updateMetasetIndex(i,r),i.label=""+o.label,i.visible=e.isDatasetVisible(r),i.controller)i.controller.updateIndex(r),i.controller.linkScales();else{const n=Pr.getController(a),{datasetElementType:o,dataElementType:s}=Be.datasets[a];Object.assign(n.prototype,{dataElementType:Pr.getElement(s),datasetElementType:o&&Pr.getElement(o)}),i.controller=new n(e,r),t.push(i.controller)}}return e._updateMetasets(),t}_resetElements(){const e=this;y(e.data.datasets,((t,n)=>{e.getDatasetMeta(n).controller.reset()}),e)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this,n=t.config;n.update(),t._options=n.createResolver(n.chartOptionScopes(),t.getContext()),y(t.scales,(e=>{er.removeBox(t,e)}));const r=t._animationsDisabled=!t.options.animation;if(t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),((e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0})(new Set(Object.keys(t._listeners)),new Set(t.options.events))&&!!this._responsiveListeners===t.options.responsive||(t.unbindEvents(),t.bindEvents()),t._plugins.invalidate(),!1===t.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const o=t.buildOrUpdateControllers();t.notifyPlugins("beforeElementsUpdate");let i=0;for(let e=0,n=t.data.datasets.length;e<n;e++){const{controller:n}=t.getDatasetMeta(e),a=!r&&-1===o.indexOf(n);n.buildOrUpdateElements(a),i=Math.max(+n.getMaxOverflow(),i)}t._minPadding=i,t._updateLayout(i),r||y(o,(e=>{e.reset()})),t._updateDatasets(e),t.notifyPlugins("afterUpdate",{mode:e}),t._layers.sort(Ur("z","_idx")),t._lastEvent&&t._eventHandler(t._lastEvent,!0),t.render()}_updateLayout(e){const t=this;if(!1===t.notifyPlugins("beforeLayout",{cancelable:!0}))return;er.update(t,t.width,t.height,e);const n=t.chartArea,r=n.width<=0||n.height<=0;t._layers=[],y(t.boxes,(e=>{r&&"chartArea"===e.position||(e.configure&&e.configure(),t._layers.push(...e._layers()))}),t),t._layers.forEach(((e,t)=>{e._idx=t})),t.notifyPlugins("afterLayout")}_updateDatasets(e){const t=this,n="function"==typeof e;if(!1!==t.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let r=0,o=t.data.datasets.length;r<o;++r)t._updateDataset(r,n?e({datasetIndex:r}):e);t.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this,r=n.getDatasetMeta(e),o={meta:r,index:e,mode:t,cancelable:!0};!1!==n.notifyPlugins("beforeDatasetUpdate",o)&&(r.controller._update(t),o.cancelable=!1,n.notifyPlugins("afterDatasetUpdate",o))}render(){const e=this;!1!==e.notifyPlugins("beforeRender",{cancelable:!0})&&(nn.has(e)?e.attached&&!nn.running(e)&&nn.start(e):(e.draw(),$r({chart:e})))}draw(){const e=this;let t;if(e._resizeBeforeDraw){const{width:t,height:n}=e._resizeBeforeDraw;e._resize(t,n),e._resizeBeforeDraw=null}if(e.clear(),e.width<=0||e.height<=0)return;if(!1===e.notifyPlugins("beforeDraw",{cancelable:!0}))return;const n=e._layers;for(t=0;t<n.length&&n[t].z<=0;++t)n[t].draw(e.chartArea);for(e._drawDatasets();t<n.length;++t)n[t].draw(e.chartArea);e.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let r,o;for(r=0,o=t.length;r<o;++r){const o=t[r];e&&!o.visible||n.push(o)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){const e=this;if(!1===e.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=e.getSortedVisibleDatasetMetas();for(let n=t.length-1;n>=0;--n)e._drawDataset(t[n]);e.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this,n=t.ctx,r=e._clip,o=t.chartArea,i={meta:e,index:e.index,cancelable:!0};!1!==t.notifyPlugins("beforeDatasetDraw",i)&&(qe(n,{left:!1===r.left?0:o.left-r.left,right:!1===r.right?t.width:o.right+r.right,top:!1===r.top?0:o.top-r.top,bottom:!1===r.bottom?t.height:o.bottom+r.bottom}),e.controller.draw(),Qe(n),i.cancelable=!1,t.notifyPlugins("afterDatasetDraw",i))}getElementsAtEventForMode(e,t,n,r){const o=Hn.modes[t];return"function"==typeof o?o(this,e,n,r):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let r=n.filter((e=>e&&e._dataset===t)).pop();return r||(r=n[e]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1}),r}getContext(){return this.$context||(this.$context={chart:this,type:"chart"})}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateDatasetVisibility(e,t){const n=this,r=t?"show":"hide",o=n.getDatasetMeta(e),i=o.controller._resolveAnimations(void 0,r);n.setDatasetVisibility(e,t),i.update(o,{visible:t}),n.update((t=>t.datasetIndex===e?r:void 0))}hide(e){this._updateDatasetVisibility(e,!1)}show(e){this._updateDatasetVisibility(e,!0)}_destroyDatasetMeta(e){const t=this,n=t._metasets&&t._metasets[e];n&&n.controller&&(n.controller._destroy(),delete t._metasets[e])}destroy(){const e=this,{canvas:t,ctx:n}=e;let r,o;for(e.stop(),nn.remove(e),r=0,o=e.data.datasets.length;r<o;++r)e._destroyDatasetMeta(r);e.config.clearCache(),t&&(e.unbindEvents(),Ue(t,n),e.platform.releaseContext(n),e.canvas=null,e.ctx=null),e.notifyPlugins("destroy"),delete Xr[e.id]}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this,t=e._listeners,n=e.platform,r=function(t,n,r){t.offsetX=n,t.offsetY=r,e._eventHandler(t)};y(e.options.events,(o=>((r,o)=>{n.addEventListener(e,r,o),t[r]=o})(o,r)))}bindResponsiveEvents(){const e=this;e._responsiveListeners||(e._responsiveListeners={});const t=e._responsiveListeners,n=e.platform,r=(r,o)=>{n.addEventListener(e,r,o),t[r]=o},o=(r,o)=>{t[r]&&(n.removeEventListener(e,r,o),delete t[r])},i=(t,n)=>{e.canvas&&e.resize(t,n)};let a;const s=()=>{o("attach",s),e.attached=!0,e.resize(),r("resize",i),r("detach",a)};a=()=>{e.attached=!1,o("resize",i),r("attach",s)},n.isAttached(e.canvas)?s():a()}unbindEvents(){const e=this;y(e._listeners,((t,n)=>{e.platform.removeEventListener(e,n,t)})),e._listeners={},y(e._responsiveListeners,((t,n)=>{e.platform.removeEventListener(e,n,t)})),e._responsiveListeners=void 0}updateHoverStyle(e,t,n){const r=n?"set":"remove";let o,i,a,s;for("dataset"===t&&(o=this.getDatasetMeta(e[0].datasetIndex),o.controller["_"+r+"DatasetHoverStyle"]()),a=0,s=e.length;a<s;++a){i=e[a];const t=i&&this.getDatasetMeta(i.datasetIndex).controller;t&&t[r+"HoverStyle"](i.element,i.datasetIndex,i.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this,n=t._active||[],r=e.map((({datasetIndex:e,index:n})=>{const r=t.getDatasetMeta(e);if(!r)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:r.data[n],index:n}}));!x(r,n)&&(t._active=r,t._updateHoverStyles(r,n))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}_updateHoverStyles(e,t,n){const r=this,o=r.options.hover,i=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),a=i(t,e),s=n?e:i(e,t);a.length&&r.updateHoverStyle(a,o.mode,!1),s.length&&o.mode&&r.updateHoverStyle(s,o.mode,!0)}_eventHandler(e,t){const n=this,r={event:e,replay:t,cancelable:!0},o=t=>(t.options.events||this.options.events).includes(e.type);if(!1===n.notifyPlugins("beforeEvent",r,o))return;const i=n._handleEvent(e,t);return r.cancelable=!1,n.notifyPlugins("afterEvent",r,o),(i||r.changed)&&n.render(),n}_handleEvent(e,t){const n=this,{_active:r=[],options:o}=n,i=o.hover,a=t;let s=[],l=!1,c=null;return"mouseout"!==e.type&&(s=n.getElementsAtEventForMode(e,i.mode,i,a),c="click"===e.type?n._lastEvent:e),n._lastEvent=null,Ye(e,n.chartArea,n._minPadding)&&(v(o.onHover,[e,s,n],n),"mouseup"!==e.type&&"click"!==e.type&&"contextmenu"!==e.type||v(o.onClick,[e,s,n],n)),l=!x(s,r),(l||t)&&(n._active=s,n._updateHoverStyles(s,r,t)),n._lastEvent=c,l}}const Zr=()=>y(Gr.instances,(e=>e._plugins.invalidate())),Jr=!0;function eo(e,t){const{startAngle:n,endAngle:r,pixelMargin:o,x:i,y:a,outerRadius:s,innerRadius:l}=t;let c=o/s;e.beginPath(),e.arc(i,a,s,n-c,r+c),l>o?(c=o/l,e.arc(i,a,l,r+c,n-c,!0)):e.arc(i,a,o,r+j,n-j),e.closePath(),e.clip()}function to(e,t,n,r){return{x:n+e*Math.cos(t),y:r+e*Math.sin(t)}}function no(e,t,n){const{x:r,y:o,startAngle:i,endAngle:a,pixelMargin:s,innerRadius:l}=t,c=Math.max(t.outerRadius+n-s,0),u=l>0?l+n+s:0,d=a-i,f=(d-Math.max(.001,d*c-n/L)/c)/2,h=i+f,p=a-f,{outerStart:g,outerEnd:m,innerStart:b,innerEnd:v}=function(e,t,n,r){const o=nt(e.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),i=(n-t)/2,a=Math.min(i,r*t/2),s=e=>{const t=(n-Math.min(i,e))*r/2;return J(e,0,Math.min(i,t))};return{outerStart:s(o.outerStart),outerEnd:s(o.outerEnd),innerStart:J(o.innerStart,0,a),innerEnd:J(o.innerEnd,0,a)}}(t,u,c,p-h),y=c-g,x=c-m,_=h+g/y,w=p-m/x,k=u+b,S=u+v,M=h+b/k,E=p-v/S;if(e.beginPath(),e.arc(r,o,c,_,w),m>0){const t=to(x,w,r,o);e.arc(t.x,t.y,m,w,p+j)}const C=to(S,p,r,o);if(e.lineTo(C.x,C.y),v>0){const t=to(S,E,r,o);e.arc(t.x,t.y,v,p+j,E+Math.PI)}if(e.arc(r,o,u,p-v/u,h+b/u,!0),b>0){const t=to(k,M,r,o);e.arc(t.x,t.y,b,M+Math.PI,h-j)}const P=to(y,h,r,o);if(e.lineTo(P.x,P.y),g>0){const t=to(y,_,r,o);e.arc(t.x,t.y,g,h-j,_)}e.closePath()}Object.defineProperties(Gr,{defaults:{enumerable:Jr,value:Be},instances:{enumerable:Jr,value:Xr},overrides:{enumerable:Jr,value:Ne},registry:{enumerable:Jr,value:Pr},version:{enumerable:Jr,value:"3.3.0"},getChart:{enumerable:Jr,value:Kr},register:{enumerable:Jr,value:(...e)=>{Pr.add(...e),Zr()}},unregister:{enumerable:Jr,value:(...e)=>{Pr.remove(...e),Zr()}}});class ro extends mr{constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const r=this.getProps(["x","y"],n),{angle:o,distance:i}=function(e,t){const n=t.x-e.x,r=t.y-e.y,o=Math.sqrt(n*n+r*r);let i=Math.atan2(r,n);return i<-.5*L&&(i+=R),{angle:i,distance:o}}(r,{x:e,y:t}),{startAngle:a,endAngle:s,innerRadius:l,outerRadius:c,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n);return(u>=R||Z(o,a,s))&&i>=l&&i<=c}getCenterPoint(e){const{x:t,y:n,startAngle:r,endAngle:o,innerRadius:i,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],e),s=(r+o)/2,l=(i+a)/2;return{x:t+Math.cos(s)*l,y:n+Math.sin(s)*l}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const t=this,n=t.options,r=(n.offset||0)/2;if(t.pixelMargin="inner"===n.borderAlign?.33:0,t.fullCircles=Math.floor(t.circumference/R),0===t.circumference||t.innerRadius<0||t.outerRadius<0)return;e.save();let o=0;if(r){o=r/2;const n=(t.startAngle+t.endAngle)/2;e.translate(Math.cos(n)*o,Math.sin(n)*o),t.circumference>=L&&(o=r)}e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,function(e,t,n){if(t.fullCircles){t.endAngle=t.startAngle+R,no(e,t,n);for(let n=0;n<t.fullCircles;++n)e.fill()}isNaN(t.circumference)||(t.endAngle=t.startAngle+t.circumference%R),no(e,t,n),e.fill()}(e,t,o),function(e,t,n){const{options:r}=t,o="inner"===r.borderAlign;r.borderWidth&&(o?(e.lineWidth=2*r.borderWidth,e.lineJoin="round"):(e.lineWidth=r.borderWidth,e.lineJoin="bevel"),t.fullCircles&&function(e,t,n){const{x:r,y:o,startAngle:i,endAngle:a,pixelMargin:s}=t,l=Math.max(t.outerRadius-s,0),c=t.innerRadius+s;let u;for(n&&(t.endAngle=t.startAngle+R,eo(e,t),t.endAngle=a,t.endAngle===t.startAngle&&(t.endAngle+=R,t.fullCircles--)),e.beginPath(),e.arc(r,o,c,i+R,i,!0),u=0;u<t.fullCircles;++u)e.stroke();for(e.beginPath(),e.arc(r,o,l,i,i+R),u=0;u<t.fullCircles;++u)e.stroke()}(e,t,o),o&&eo(e,t),no(e,t,n),e.stroke())}(e,t,o),e.restore()}}function oo(e,t,n=t){e.lineCap=m(n.borderCapStyle,t.borderCapStyle),e.setLineDash(m(n.borderDash,t.borderDash)),e.lineDashOffset=m(n.borderDashOffset,t.borderDashOffset),e.lineJoin=m(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=m(n.borderWidth,t.borderWidth),e.strokeStyle=m(n.borderColor,t.borderColor)}function io(e,t,n){e.lineTo(n.x,n.y)}function ao(e,t,n={}){const r=e.length,{start:o=0,end:i=r-1}=n,{start:a,end:s}=t,l=Math.max(o,a),c=Math.min(i,s),u=o<a&&i<a||o>s&&i>s;return{count:r,start:l,loop:t.loop,ilen:c<l&&!u?r+c-l:c-l}}function so(e,t,n,r){const{points:o,options:i}=t,{count:a,start:s,loop:l,ilen:c}=ao(o,n,r),u=function(e){return e.stepped?Xe:e.tension||"monotone"===e.cubicInterpolationMode?Ke:io}(i);let d,f,h,{move:p=!0,reverse:g}=r||{};for(d=0;d<=c;++d)f=o[(s+(g?c-d:d))%a],f.skip||(p?(e.moveTo(f.x,f.y),p=!1):u(e,h,f,g,i.stepped),h=f);return l&&(f=o[(s+(g?c:0))%a],u(e,h,f,g,i.stepped)),!!l}function lo(e,t,n,r){const o=t.points,{count:i,start:a,ilen:s}=ao(o,n,r),{move:l=!0,reverse:c}=r||{};let u,d,f,h,p,g,m=0,b=0;const v=e=>(a+(c?s-e:e))%i,y=()=>{h!==p&&(e.lineTo(m,p),e.lineTo(m,h),e.lineTo(m,g))};for(l&&(d=o[v(0)],e.moveTo(d.x,d.y)),u=0;u<=s;++u){if(d=o[v(u)],d.skip)continue;const t=d.x,n=d.y,r=0|t;r===f?(n<h?h=n:n>p&&(p=n),m=(b*m+t)/++b):(y(),e.lineTo(t,n),f=r,b=0,h=p=n),g=n}y()}function co(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?so:lo}ro.id="arc",ro.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,angle:void 0},ro.defaultRoutes={backgroundColor:"backgroundColor"};const uo="function"==typeof Path2D;class fo extends mr{constructor(e){super(),this.animated=!0,this.options=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this,r=n.options;if((r.tension||"monotone"===r.cubicInterpolationMode)&&!r.stepped&&!n._pointsUpdated){const o=r.spanGaps?n._loop:n._fullLoop;Lt(n._points,r,e,o,t),n._pointsUpdated=!0}}set points(e){const t=this;t._points=e,delete t._segments,delete t._path,t._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(e,t){const n=e.points,r=e.options.spanGaps,o=n.length;if(!o)return[];const i=!!e._loop,{start:a,end:s}=function(e,t,n,r){let o=0,i=t-1;if(n&&!r)for(;o<t&&!e[o].skip;)o++;for(;o<t&&e[o].skip;)o++;for(o%=t,n&&(i+=o);i>o&&e[i%t].skip;)i--;return i%=t,{start:o,end:i}}(n,o,i,r);return function(e,t,n){return n&&n.setContext&&t?function(e,t,n){const r=t.length,o=[];let i=e[0].start,a=i;for(const l of e){let e,c,u=t[i%r];for(a=i+1;a<=l.end;a++){const d=t[a%r];c={backgroundColor:(s=n.setContext({type:"segment",p0:u,p1:d})).backgroundColor,borderCapStyle:s.borderCapStyle,borderDash:s.borderDash,borderDashOffset:s.borderDashOffset,borderJoinStyle:s.borderJoinStyle,borderWidth:s.borderWidth,borderColor:s.borderColor},tn(c,e)&&(o.push({start:i,end:a-1,loop:l.loop,style:e}),e=c,i=a-1),u=d,e=c}i<a-1&&(o.push({start:i,end:a-1,loop:l.loop,style:c}),i=a-1)}var s;return o}(e,t,n):e}(!0===r?[{start:a,end:s,loop:i}]:function(e,t,n,r){const o=e.length,i=[];let a,s=t,l=e[t];for(a=t+1;a<=n;++a){const n=e[a%o];n.skip||n.stop?l.skip||(r=!1,i.push({start:t%o,end:(a-1)%o,loop:r}),t=s=n.stop?a:null):(s=a,l.skip&&(t=a)),l=n}return null!==s&&i.push({start:t%o,end:s%o,loop:r}),i}(n,a,s<a?s+o:s,!!e._fullLoop&&0===a&&s===o-1),n,t)}(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this,r=n.options,o=e[t],i=n.points,a=en(n,{property:t,start:o,end:o});if(!a.length)return;const s=[],l=function(e){return e.stepped?Ut:e.tension||"monotone"===e.cubicInterpolationMode?$t:Ht}(r);let c,u;for(c=0,u=a.length;c<u;++c){const{start:n,end:u}=a[c],d=i[n],f=i[u];if(d===f){s.push(d);continue}const h=l(d,f,Math.abs((o-d[t])/(f[t]-d[t])),r.stepped);h[t]=e[t],s.push(h)}return 1===s.length?s[0]:s}pathSegment(e,t,n){return co(this)(e,this,t,n)}path(e,t,n){const r=this,o=r.segments,i=co(r);let a=r._loop;t=t||0,n=n||r.points.length-t;for(const s of o)a&=i(e,r,s,{start:t,end:t+n-1});return!!a}draw(e,t,n,r){const o=this,i=o.options||{};(o.points||[]).length&&i.borderWidth&&(e.save(),function(e,t,n,r){uo&&1===t.segments.length?function(e,t,n,r){let o=t._path;o||(o=t._path=new Path2D,t.path(o,n,r)&&o.closePath()),oo(e,t.options),e.stroke(o)}(e,t,n,r):function(e,t,n,r){const{segments:o,options:i}=t,a=co(t);for(const s of o)oo(e,i,s.style),e.beginPath(),a(e,t,s,{start:n,end:n+r-1})&&e.closePath(),e.stroke()}(e,t,n,r)}(e,o,n,r),e.restore(),o.animated&&(o._pointsUpdated=!1,o._path=void 0))}}function ho(e,t,n,r){const o=e.options,{[n]:i}=e.getProps([n],r);return Math.abs(t-i)<o.radius+o.hitRadius}fo.id="line",fo.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},fo.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},fo.descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};class po extends mr{constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const r=this.options,{x:o,y:i}=this.getProps(["x","y"],n);return Math.pow(e-o,2)+Math.pow(t-i,2)<Math.pow(r.hitRadius+r.radius,2)}inXRange(e,t){return ho(this,e,"x",t)}inYRange(e,t){return ho(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e){const t=this,n=t.options;t.skip||n.radius<.1||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,$e(e,n,t.x,t.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function go(e,t){const{x:n,y:r,base:o,width:i,height:a}=e.getProps(["x","y","base","width","height"],t);let s,l,c,u,d;return e.horizontal?(d=a/2,s=Math.min(n,o),l=Math.max(n,o),c=r-d,u=r+d):(d=i/2,s=n-d,l=n+d,c=Math.min(r,o),u=Math.max(r,o)),{left:s,top:c,right:l,bottom:u}}function mo(e){let t=e.options.borderSkipped;const n={};return t?(t=e.horizontal?bo(t,"left","right",e.base>e.x):bo(t,"bottom","top",e.base<e.y),n[t]=!0,n):n}function bo(e,t,n,r){var o,i,a;return r?(a=n,e=vo(e=(o=e)===(i=t)?a:o===a?i:o,n,t)):e=vo(e,t,n),e}function vo(e,t,n){return"start"===e?t:"end"===e?n:e}function yo(e,t,n,r){return e?0:Math.max(Math.min(t,r),n)}function xo(e,t,n,r){const o=null===t,i=null===n,a=e&&!(o&&i)&&go(e,r);return a&&(o||t>=a.left&&t<=a.right)&&(i||n>=a.top&&n<=a.bottom)}function _o(e,t){e.rect(t.x,t.y,t.w,t.h)}po.id="point",po.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},po.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class wo extends mr{constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,e&&Object.assign(this,e)}draw(e){const t=this.options,{inner:n,outer:r}=function(e){const t=go(e),n=t.right-t.left,r=t.bottom-t.top,o=function(e,t,n){const r=e.options.borderWidth,o=mo(e),i=rt(r);return{t:yo(o.top,i.top,0,n),r:yo(o.right,i.right,0,t),b:yo(o.bottom,i.bottom,0,n),l:yo(o.left,i.left,0,t)}}(e,n/2,r/2),i=function(e,t,n){const{enableBorderRadius:r}=e.getProps(["enableBorderRadius"]),o=e.options.borderRadius,i=ot(o),a=Math.min(t,n),s=mo(e),l=r||h(o);return{topLeft:yo(!l||s.top||s.left,i.topLeft,0,a),topRight:yo(!l||s.top||s.right,i.topRight,0,a),bottomLeft:yo(!l||s.bottom||s.left,i.bottomLeft,0,a),bottomRight:yo(!l||s.bottom||s.right,i.bottomRight,0,a)}}(e,n/2,r/2);return{outer:{x:t.left,y:t.top,w:n,h:r,radius:i},inner:{x:t.left+o.l,y:t.top+o.t,w:n-o.l-o.r,h:r-o.t-o.b,radius:{topLeft:Math.max(0,i.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,i.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,i.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,i.bottomRight-Math.max(o.b,o.r))}}}}(this),o=(i=r.radius).topLeft||i.topRight||i.bottomLeft||i.bottomRight?Ze:_o;var i;e.save(),r.w===n.w&&r.h===n.h||(e.beginPath(),o(e,r),e.clip(),o(e,n),e.fillStyle=t.borderColor,e.fill("evenodd")),e.beginPath(),o(e,n),e.fillStyle=t.backgroundColor,e.fill(),e.restore()}inRange(e,t,n){return xo(this,e,t,n)}inXRange(e,t){return xo(this,e,null,t)}inYRange(e,t){return xo(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:r,horizontal:o}=this.getProps(["x","y","base","horizontal"],e);return{x:o?(t+r)/2:t,y:o?n:(n+r)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}wo.id="bar",wo.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,enableBorderRadius:!0,pointStyle:void 0},wo.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var ko=Object.freeze({__proto__:null,ArcElement:ro,LineElement:fo,PointElement:po,BarElement:wo});function So(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{value:t})}}function Mo(e){e.data.datasets.forEach((e=>{So(e)}))}var Eo={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void Mo(e);const r=e.width;e.data.datasets.forEach(((t,o)=>{const{_data:i,indexAxis:a}=t,s=e.getDatasetMeta(o),l=i||t.data;if("y"===st([a,e.options.indexAxis]))return;if("line"!==s.type)return;const c=e.scales[s.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(e.options.parsing)return;let u,{start:f,count:h}=function(e,t){const n=t.length;let r,o=0;const{iScale:i}=e,{min:a,max:s,minDefined:l,maxDefined:c}=i.getUserBounds();return l&&(o=J(ct(t,i.axis,a).lo,0,n-1)),r=c?J(ct(t,i.axis,s).hi+1,o,n)-o:n-o,{start:o,count:r}}(s,l);if(h<=4*r)So(t);else{switch(d(i)&&(t._data=l,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":u=function(e,t,n,r,o){const i=o.samples||r;if(i>=n)return e.slice(t,t+n);const a=[],s=(n-2)/(i-2);let l=0;const c=t+n-1;let u,d,f,h,p,g=t;for(a[l++]=e[g],u=0;u<i-2;u++){let r,o=0,i=0;const c=Math.floor((u+1)*s)+1+t,m=Math.min(Math.floor((u+2)*s)+1,n)+t,b=m-c;for(r=c;r<m;r++)o+=e[r].x,i+=e[r].y;o/=b,i/=b;const v=Math.floor(u*s)+1+t,y=Math.floor((u+1)*s)+1+t,{x,y:_}=e[g];for(f=h=-1,r=v;r<y;r++)h=.5*Math.abs((x-o)*(e[r].y-_)-(x-e[r].x)*(i-_)),h>f&&(f=h,d=e[r],p=r);a[l++]=d,g=p}return a[l++]=e[c],a}(l,f,h,r,n);break;case"min-max":u=function(e,t,n,r){let o,i,a,s,l,c,u,f,h,p,g=0,m=0;const b=[],v=t+n-1,y=e[t].x,x=e[v].x-y;for(o=t;o<t+n;++o){i=e[o],a=(i.x-y)/x*r,s=i.y;const t=0|a;if(t===l)s<h?(h=s,c=o):s>p&&(p=s,u=o),g=(m*g+i.x)/++m;else{const n=o-1;if(!d(c)&&!d(u)){const t=Math.min(c,u),r=Math.max(c,u);t!==f&&t!==n&&b.push({...e[t],x:g}),r!==f&&r!==n&&b.push({...e[r],x:g})}o>0&&n!==f&&b.push(e[n]),b.push(i),l=t,m=0,h=p=s,c=u=f=o}}return b}(l,f,h,r);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=u}}))},destroy(e){Mo(e)}};function Co(e,t,n){const r=function(e){const t=e.options,n=t.fill;let r=m(n&&n.target,n);return void 0===r&&(r=!!t.backgroundColor),!1!==r&&null!==r&&(!0===r?"origin":r)}(e);if(h(r))return!isNaN(r.value)&&r;let o=parseFloat(r);return p(o)&&Math.floor(o)===o?("-"!==r[0]&&"+"!==r[0]||(o=t+o),!(o===t||o<0||o>=n)&&o):["origin","start","end","stack"].indexOf(r)>=0&&r}class Po{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:r,y:o,radius:i}=this;return t=t||{start:0,end:R},e.arc(r,o,i,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:r}=this,o=e.angle;return{x:t+Math.cos(o)*r,y:n+Math.sin(o)*r,angle:o}}}const Oo=e=>"line"===e.type&&!e.hidden;function To(e,t,n){const r=[];for(let o=0;o<n.length;o++){const i=n[o],{first:a,last:s,point:l}=Do(i,t,"x");if(!(!l||a&&s))if(a)r.unshift(l);else if(e.push(l),!s)break}e.push(...r)}function Do(e,t,n){const r=e.interpolate(t,n);if(!r)return{};const o=r[n],i=e.segments,a=e.points;let s=!1,l=!1;for(let e=0;e<i.length;e++){const t=i[e],r=a[t.start][n],c=a[t.end][n];if(o>=r&&o<=c){s=o===r,l=o===c;break}}return{first:s,last:l,point:r}}function Lo(e,t){let n=[],r=!1;return f(e)?(r=!0,n=e):n=function(e,t){const{x:n=null,y:r=null}=e||{},o=t.points,i=[];return t.segments.forEach((e=>{const t=o[e.start],a=o[e.end];null!==r?(i.push({x:t.x,y:r}),i.push({x:a.x,y:r})):null!==n&&(i.push({x:n,y:t.y}),i.push({x:n,y:a.y}))})),i}(e,t),n.length?new fo({points:n,options:{tension:0},_loop:r,_fullLoop:r}):null}function Ro(e,t,n){let r=e[t].fill;const o=[t];let i;if(!n)return r;for(;!1!==r&&-1===o.indexOf(r);){if(!p(r))return r;if(i=e[r],!i)return!1;if(i.visible)return r;o.push(r),r=i.fill}return!1}function Ao(e,t,n){e.beginPath(),t.path(e),e.lineTo(t.last().x,n),e.lineTo(t.first().x,n),e.closePath(),e.clip()}function zo(e,t,n,r){if(r)return;let o=t[e],i=n[e];return"angle"===e&&(o=G(o),i=G(i)),{property:e,start:o,end:i}}function No(e,t,n,r){return e&&t?r(e[n],t[n]):e?e[n]:t?t[n]:0}function jo(e,t,n){const{top:r,bottom:o}=t.chart.chartArea,{property:i,start:a,end:s}=n||{};"x"===i&&(e.beginPath(),e.rect(a,r,s-a,o-r),e.clip())}function Fo(e,t,n,r){const o=t.interpolate(n,r);o&&e.lineTo(o.x,o.y)}function Io(e,t){const{line:n,target:r,property:o,color:i,scale:a}=t,s=function(e,t,n){const r=e.segments,o=e.points,i=t.points,a=[];for(const e of r){const r=zo(n,o[e.start],o[e.end],e.loop);if(!t.segments){a.push({source:e,target:r,start:o[e.start],end:o[e.end]});continue}const s=en(t,r);for(const t of s){const s=zo(n,i[t.start],i[t.end],t.loop),l=Jt(e,o,s);for(const e of l)a.push({source:e,target:t,start:{[n]:No(r,s,"start",Math.max)},end:{[n]:No(r,s,"end",Math.min)}})}}return a}(n,r,o);for(const{source:t,target:l,start:c,end:u}of s){const{style:{backgroundColor:s=i}={}}=t;e.save(),e.fillStyle=s,jo(e,a,zo(o,c,u)),e.beginPath();const d=!!n.pathSegment(e,t);d?e.closePath():Fo(e,r,u,o);const f=!!r.pathSegment(e,l,{move:d,reverse:!0}),h=d&&f;h||Fo(e,r,c,o),e.closePath(),e.fill(h?"evenodd":"nonzero"),e.restore()}}function Bo(e,t,n){const r=function(e){const{chart:t,fill:n,line:r}=e;if(p(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{chart:t,scale:n,index:r,line:o}=e,i=[],a=o.segments,s=o.points,l=function(e,t){const n=[],r=e.getSortedVisibleDatasetMetas();for(let e=0;e<r.length;e++){const o=r[e];if(o.index===t)break;Oo(o)&&n.unshift(o.dataset)}return n}(t,r);l.push(Lo({x:null,y:n.bottom},o));for(let e=0;e<a.length;e++){const t=a[e];for(let e=t.start;e<=t.end;e++)To(i,s[e],l)}return new fo({points:i,options:{}})}(e);const o=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,r=t.options,o=t.getLabels().length,i=[],a=r.reverse?t.max:t.min,s=r.reverse?t.min:t.max;let l,c,u;if(u="start"===n?a:"end"===n?s:h(n)?n.value:t.getBaseValue(),r.grid.circular)return c=t.getPointPositionForValue(0,a),new Po({x:c.x,y:c.y,radius:t.getDistanceFromCenterForValue(u)});for(l=0;l<o;++l)i.push(t.getPointPositionForValue(l,u));return i}(e):function(e){const{scale:t={},fill:n}=e;let r,o=null;return"start"===n?o=t.bottom:"end"===n?o=t.top:h(n)?o=t.getPixelForValue(n.value):t.getBasePixel&&(o=t.getBasePixel()),p(o)?(r=t.isHorizontal(),{x:r?o:null,y:r?null:o}):null}(e)}(e);return o instanceof Po?o:Lo(o,r)}(t),{line:o,scale:i,axis:a}=t,s=o.options,l=s.fill,c=s.backgroundColor,{above:u=c,below:d=c}=l||{};r&&o.points.length&&(qe(e,n),function(e,t){const{line:n,target:r,above:o,below:i,area:a,scale:s}=t,l=n._loop?"angle":t.axis;e.save(),"x"===l&&i!==o&&(Ao(e,r,a.top),Io(e,{line:n,target:r,color:o,scale:s,property:l}),e.restore(),e.save(),Ao(e,r,a.bottom)),Io(e,{line:n,target:r,color:i,scale:s,property:l}),e.restore()}(e,{line:o,target:r,above:u,below:d,area:n,scale:i,axis:a}),Qe(e))}var Vo={id:"filler",afterDatasetsUpdate(e,t,n){const r=(e.data.datasets||[]).length,o=[];let i,a,s,l;for(a=0;a<r;++a)i=e.getDatasetMeta(a),s=i.dataset,l=null,s&&s.options&&s instanceof fo&&(l={visible:e.isDatasetVisible(a),index:a,fill:Co(s,a,r),chart:e,axis:i.controller.options.indexAxis,scale:i.vScale,line:s}),i.$filler=l,o.push(l);for(a=0;a<r;++a)l=o[a],l&&!1!==l.fill&&(l.fill=Ro(o,a,n.propagate))},beforeDraw(e,t,n){const r="beforeDraw"===n.drawTime,o=e.getSortedVisibleDatasetMetas(),i=e.chartArea;for(let t=o.length-1;t>=0;--t){const n=o[t].$filler;n&&(n.line.updateControlPoints(i,n.axis),r&&Bo(e.ctx,n,i))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const r=e.getSortedVisibleDatasetMetas();for(let t=r.length-1;t>=0;--t){const n=r[t].$filler;n&&Bo(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const r=t.meta.$filler;r&&!1!==r.fill&&"beforeDatasetDraw"===n.drawTime&&Bo(e.ctx,r,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Wo=(e,t)=>{let{boxHeight:n=t,boxWidth:r=t}=e;return e.usePointStyle&&(n=Math.min(n,t),r=Math.min(r,t)),{boxWidth:r,boxHeight:n,itemHeight:Math.max(t,n)}};class Ho extends mr{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){const r=this;r.maxWidth=e,r.maxHeight=t,r._margins=n,r.setDimensions(),r.buildLabels(),r.fit()}setDimensions(){const e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height)}buildLabels(){const e=this,t=e.options.labels||{};let n=v(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter((n=>t.filter(n,e.chart.data)))),t.sort&&(n=n.sort(((n,r)=>t.sort(n,r,e.chart.data)))),e.options.reverse&&n.reverse(),e.legendItems=n}fit(){const e=this,{options:t,ctx:n}=e;if(!t.display)return void(e.width=e.height=0);const r=t.labels,o=at(r.font),i=o.size,a=e._computeTitleHeight(),{boxWidth:s,itemHeight:l}=Wo(r,i);let c,u;n.font=o.string,e.isHorizontal()?(c=e.maxWidth,u=e._fitRows(a,i,s,l)+10):(u=e.maxHeight,c=e._fitCols(a,i,s,l)+10),e.width=Math.min(c,t.maxWidth||e.maxWidth),e.height=Math.min(u,t.maxHeight||e.maxHeight)}_fitRows(e,t,n,r){const o=this,{ctx:i,maxWidth:a,options:{labels:{padding:s}}}=o,l=o.legendHitBoxes=[],c=o.lineWidths=[0],u=r+s;let d=e;i.textAlign="left",i.textBaseline="middle";let f=-1,h=-u;return o.legendItems.forEach(((e,o)=>{const p=n+t/2+i.measureText(e.text).width;(0===o||c[c.length-1]+p+2*s>a)&&(d+=u,c[c.length-(o>0?0:1)]=0,h+=u,f++),l[o]={left:0,top:h,row:f,width:p,height:r},c[c.length-1]+=p+s})),d}_fitCols(e,t,n,r){const o=this,{ctx:i,maxHeight:a,options:{labels:{padding:s}}}=o,l=o.legendHitBoxes=[],c=o.columnSizes=[],u=a-e;let d=s,f=0,h=0,p=0,g=0,m=0;return o.legendItems.forEach(((e,o)=>{const a=n+t/2+i.measureText(e.text).width;o>0&&h+t+2*s>u&&(d+=f+s,c.push({width:f,height:h}),p+=f+s,m++,g=0,f=h=0),f=Math.max(f,a),h+=t+s,l[o]={left:p,top:g,col:m,width:a,height:r},g+=r+s})),d+=f,c.push({width:f,height:h}),d}adjustHitBoxes(){const e=this;if(!e.options.display)return;const t=e._computeTitleHeight(),{legendHitBoxes:n,options:{align:r,labels:{padding:o}}}=e;if(this.isHorizontal()){let i=0,a=l(r,e.left+o,e.right-e.lineWidths[i]);for(const s of n)i!==s.row&&(i=s.row,a=l(r,e.left+o,e.right-e.lineWidths[i])),s.top+=e.top+t+o,s.left=a,a+=s.width+o}else{let i=0,a=l(r,e.top+t+o,e.bottom-e.columnSizes[i].height);for(const s of n)s.col!==i&&(i=s.col,a=l(r,e.top+t+o,e.bottom-e.columnSizes[i].height)),s.top=a,s.left+=e.left+o,a+=s.height+o}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){const e=this;if(e.options.display){const t=e.ctx;qe(t,e),e._draw(),Qe(t)}}_draw(){const e=this,{options:t,columnSizes:n,lineWidths:r,ctx:o}=e,{align:i,labels:a}=t,s=Be.color,c=Qt(t.rtl,e.left,e.width),u=at(a.font),{color:d,padding:f}=a,h=u.size,p=h/2;let g;e.drawTitle(),o.textAlign=c.textAlign("left"),o.textBaseline="middle",o.lineWidth=.5,o.font=u.string;const{boxWidth:b,boxHeight:v,itemHeight:y}=Wo(a,h),x=e.isHorizontal(),_=this._computeTitleHeight();g=x?{x:l(i,e.left+f,e.right-r[0]),y:e.top+f+_,line:0}:{x:e.left+f,y:l(i,e.top+_+f,e.bottom-n[0].height),line:0},Xt(e.ctx,t.textDirection);const w=y+f;e.legendItems.forEach(((t,k)=>{o.strokeStyle=t.fontColor||d,o.fillStyle=t.fontColor||d;const S=o.measureText(t.text).width,M=c.textAlign(t.textAlign||(t.textAlign=a.textAlign)),E=b+h/2+S;let C=g.x,P=g.y;c.setWidth(e.width),x?k>0&&C+E+f>e.right&&(P=g.y+=w,g.line++,C=g.x=l(i,e.left+f,e.right-r[g.line])):k>0&&P+w>e.bottom&&(C=g.x=C+n[g.line].width+f,g.line++,P=g.y=l(i,e.top+_+f,e.bottom-n[g.line].height)),function(e,t,n){if(isNaN(b)||b<=0||isNaN(v)||v<0)return;o.save();const r=m(n.lineWidth,1);if(o.fillStyle=m(n.fillStyle,s),o.lineCap=m(n.lineCap,"butt"),o.lineDashOffset=m(n.lineDashOffset,0),o.lineJoin=m(n.lineJoin,"miter"),o.lineWidth=r,o.strokeStyle=m(n.strokeStyle,s),o.setLineDash(m(n.lineDash,[])),a.usePointStyle){const i={radius:b*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},a=c.xPlus(e,b/2);$e(o,i,a,t+p)}else{const i=t+Math.max((h-v)/2,0),a=c.leftForLtr(e,b),s=ot(n.borderRadius);o.beginPath(),Object.values(s).some((e=>0!==e))?Ze(o,{x:a,y:i,w:b,h:v,radius:s}):o.rect(a,i,b,v),o.fill(),0!==r&&o.stroke()}o.restore()}(c.x(C),P,t),C=((e,t,n)=>"right"===e?n:"center"===e?(t+n)/2:t)(M,C+b+p,e.right),function(e,t,n){Ge(o,n.text,e,t+y/2,u,{strikethrough:n.hidden,textAlign:n.textAlign})}(c.x(C),P,t),x?g.x+=E+f:g.y+=w})),Kt(e.ctx,t.textDirection)}drawTitle(){const e=this,t=e.options,n=t.title,r=at(n.font),o=it(n.padding);if(!n.display)return;const i=Qt(t.rtl,e.left,e.width),a=e.ctx,c=n.position,u=r.size/2,d=o.top+u;let f,h=e.left,p=e.width;if(this.isHorizontal())p=Math.max(...e.lineWidths),f=e.top+d,h=l(t.align,h,e.right-p);else{const n=e.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);f=d+l(t.align,e.top,e.bottom-n-t.labels.padding-e._computeTitleHeight())}const g=l(c,h,h+p);a.textAlign=i.textAlign(s(c)),a.textBaseline="middle",a.strokeStyle=n.color,a.fillStyle=n.color,a.font=r.string,Ge(a,n.text,g,f,r)}_computeTitleHeight(){const e=this.options.title,t=at(e.font),n=it(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){const n=this;let r,o,i;if(e>=n.left&&e<=n.right&&t>=n.top&&t<=n.bottom)for(i=n.legendHitBoxes,r=0;r<i.length;++r)if(o=i[r],e>=o.left&&e<=o.left+o.width&&t>=o.top&&t<=o.top+o.height)return n.legendItems[r];return null}handleEvent(e){const t=this,n=t.options;if(!function(e,t){return!("mousemove"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,n))return;const r=t._getLegendItemAt(e.x,e.y);if("mousemove"===e.type){const a=t._hoveredItem,s=(i=r,null!==(o=a)&&null!==i&&o.datasetIndex===i.datasetIndex&&o.index===i.index);a&&!s&&v(n.onLeave,[e,a,t],t),t._hoveredItem=r,r&&!s&&v(n.onHover,[e,r,t],t)}else r&&v(n.onClick,[e,r,t],t);var o,i}}var Uo={id:"legend",_element:Ho,start(e,t,n){const r=e.legend=new Ho({ctx:e.ctx,options:n,chart:e});er.configure(e,r,n),er.addBox(e,r)},stop(e){er.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const r=e.legend;er.configure(e,r,n),r.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const r=t.datasetIndex,o=n.chart;o.isDatasetVisible(r)?(o.hide(r),t.hidden=!0):(o.show(r),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:r,textAlign:o,color:i}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const a=e.controller.getStyle(n?0:void 0),s=it(a.borderWidth);return{text:t[e.index].label,fillStyle:a.backgroundColor,fontColor:i,hidden:!e.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:a.borderColor,pointStyle:r||a.pointStyle,rotation:a.rotation,textAlign:o||a.textAlign,borderRadius:0,datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class $o extends mr{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this,r=n.options;if(n.left=0,n.top=0,!r.display)return void(n.width=n.height=n.right=n.bottom=0);n.width=n.right=e,n.height=n.bottom=t;const o=f(r.text)?r.text.length:1;n._padding=it(r.padding);const i=o*at(r.font).lineHeight+n._padding.height;n.isHorizontal()?n.height=i:n.width=i}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:r,right:o,options:i}=this,a=i.align;let s,c,u,d=0;return this.isHorizontal()?(c=l(a,n,o),u=t+e,s=o-n):("left"===i.position?(c=n+e,u=l(a,r,t),d=-.5*L):(c=o-e,u=l(a,t,r),d=.5*L),s=r-t),{titleX:c,titleY:u,maxWidth:s,rotation:d}}draw(){const e=this,t=e.ctx,n=e.options;if(!n.display)return;const r=at(n.font),o=r.lineHeight/2+e._padding.top,{titleX:i,titleY:a,maxWidth:l,rotation:c}=e._drawArgs(o);Ge(t,n.text,0,0,r,{color:n.color,maxWidth:l,rotation:c,textAlign:s(n.align),textBaseline:"middle",translation:[i,a]})}}var Yo={id:"title",_element:$o,start(e,t,n){!function(e,t){const n=new $o({ctx:e.ctx,options:t,chart:e});er.configure(e,n,t),er.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;er.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const r=e.titleBlock;er.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const qo={average(e){if(!e.length)return!1;let t,n,r=0,o=0,i=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();r+=e.x,o+=e.y,++i}}return{x:r/i,y:o/i}},nearest(e,t){if(!e.length)return!1;let n,r,o,i=t.x,a=t.y,s=Number.POSITIVE_INFINITY;for(n=0,r=e.length;n<r;++n){const r=e[n].element;if(r&&r.hasValue()){const e=X(t,r.getCenterPoint());e<s&&(s=e,o=r)}}if(o){const e=o.tooltipPosition();i=e.x,a=e.y}return{x:i,y:a}}};function Qo(e,t){return t&&(f(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function Xo(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function Ko(e,t){const{element:n,datasetIndex:r,index:o}=t,i=e.getDatasetMeta(r).controller,{label:a,value:s}=i.getLabelAndValue(o);return{chart:e,label:a,parsed:i.getParsed(o),raw:e.data.datasets[r].data[o],formattedValue:s,dataset:i.getDataset(),dataIndex:o,datasetIndex:r,element:n}}function Go(e,t){const n=e._chart.ctx,{body:r,footer:o,title:i}=e,{boxWidth:a,boxHeight:s}=t,l=at(t.bodyFont),c=at(t.titleFont),u=at(t.footerFont),d=i.length,f=o.length,h=r.length,p=it(t.padding);let g=p.height,m=0,b=r.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);b+=e.beforeBody.length+e.afterBody.length,d&&(g+=d*c.lineHeight+(d-1)*t.titleSpacing+t.titleMarginBottom),b&&(g+=h*(t.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(b-h)*l.lineHeight+(b-1)*t.bodySpacing),f&&(g+=t.footerMarginTop+f*u.lineHeight+(f-1)*t.footerSpacing);let v=0;const x=function(e){m=Math.max(m,n.measureText(e).width+v)};return n.save(),n.font=c.string,y(e.title,x),n.font=l.string,y(e.beforeBody.concat(e.afterBody),x),v=t.displayColors?a+2:0,y(r,(e=>{y(e.before,x),y(e.lines,x),y(e.after,x)})),v=0,n.font=u.string,y(e.footer,x),n.restore(),m+=p.width,{width:m,height:g}}function Zo(e,t,n,r){const{x:o,width:i}=n,{width:a,chartArea:{left:s,right:l}}=e;let c="center";return"center"===r?c=o<=(s+l)/2?"left":"right":o<=i/2?c="left":o>=a-i/2&&(c="right"),function(e,t,n,r){const{x:o,width:i}=r,a=n.caretSize+n.caretPadding;return"left"===e&&o+i+a>t.width||"right"===e&&o-i-a<0||void 0}(c,e,t,n)&&(c="center"),c}function Jo(e,t,n){const r=t.yAlign||function(e,t){const{y:n,height:r}=t;return n<r/2?"top":n>e.height-r/2?"bottom":"center"}(e,n);return{xAlign:t.xAlign||Zo(e,t,n,r),yAlign:r}}function ei(e,t,n,r){const{caretSize:o,caretPadding:i,cornerRadius:a}=e,{xAlign:s,yAlign:l}=n,c=o+i,u=a+i;let d=function(e,t){let{x:n,width:r}=e;return"right"===t?n-=r:"center"===t&&(n-=r/2),n}(t,s);const f=function(e,t,n){let{y:r,height:o}=e;return"top"===t?r+=n:r-="bottom"===t?o+n:o/2,r}(t,l,c);return"center"===l?"left"===s?d+=c:"right"===s&&(d-=c):"left"===s?d-=u:"right"===s&&(d+=u),{x:J(d,0,r.width-t.width),y:J(f,0,r.height-t.height)}}function ti(e,t,n){const r=it(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-r.right:e.x+r.left}function ni(e){return Qo([],Xo(e))}function ri(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}class oi extends mr{constructor(e){super(),this.opacity=0,this._active=[],this._chart=e._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this,t=e._cachedAnimations;if(t)return t;const n=e._chart,r=e.options.setContext(e.getContext()),o=r.enabled&&n.options.animation&&r.animations,i=new ln(e._chart,o);return o._cacheable&&(e._cachedAnimations=Object.freeze(i)),i}getContext(){const e=this;return e.$context||(e.$context=(t=e._chart.getContext(),n=e,r=e._tooltipItems,Object.assign(Object.create(t),{tooltip:n,tooltipItems:r,type:"tooltip"})));var t,n,r}getTitle(e,t){const n=this,{callbacks:r}=t,o=r.beforeTitle.apply(n,[e]),i=r.title.apply(n,[e]),a=r.afterTitle.apply(n,[e]);let s=[];return s=Qo(s,Xo(o)),s=Qo(s,Xo(i)),s=Qo(s,Xo(a)),s}getBeforeBody(e,t){return ni(t.callbacks.beforeBody.apply(this,[e]))}getBody(e,t){const n=this,{callbacks:r}=t,o=[];return y(e,(e=>{const t={before:[],lines:[],after:[]},i=ri(r,e);Qo(t.before,Xo(i.beforeLabel.call(n,e))),Qo(t.lines,i.label.call(n,e)),Qo(t.after,Xo(i.afterLabel.call(n,e))),o.push(t)})),o}getAfterBody(e,t){return ni(t.callbacks.afterBody.apply(this,[e]))}getFooter(e,t){const n=this,{callbacks:r}=t,o=r.beforeFooter.apply(n,[e]),i=r.footer.apply(n,[e]),a=r.afterFooter.apply(n,[e]);let s=[];return s=Qo(s,Xo(o)),s=Qo(s,Xo(i)),s=Qo(s,Xo(a)),s}_createItems(e){const t=this,n=t._active,r=t._chart.data,o=[],i=[],a=[];let s,l,c=[];for(s=0,l=n.length;s<l;++s)c.push(Ko(t._chart,n[s]));return e.filter&&(c=c.filter(((t,n,o)=>e.filter(t,n,o,r)))),e.itemSort&&(c=c.sort(((t,n)=>e.itemSort(t,n,r)))),y(c,(n=>{const r=ri(e.callbacks,n);o.push(r.labelColor.call(t,n)),i.push(r.labelPointStyle.call(t,n)),a.push(r.labelTextColor.call(t,n))})),t.labelColors=o,t.labelPointStyles=i,t.labelTextColors=a,t.dataPoints=c,c}update(e,t){const n=this,r=n.options.setContext(n.getContext()),o=n._active;let i,a=[];if(o.length){const e=qo[r.position].call(n,o,n._eventPosition);a=n._createItems(r),n.title=n.getTitle(a,r),n.beforeBody=n.getBeforeBody(a,r),n.body=n.getBody(a,r),n.afterBody=n.getAfterBody(a,r),n.footer=n.getFooter(a,r);const t=n._size=Go(n,r),s=Object.assign({},e,t),l=Jo(n._chart,r,s),c=ei(r,s,l,n._chart);n.xAlign=l.xAlign,n.yAlign=l.yAlign,i={opacity:1,x:c.x,y:c.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==n.opacity&&(i={opacity:0});n._tooltipItems=a,n.$context=void 0,i&&n._resolveAnimations().update(n,i),e&&r.external&&r.external.call(n,{chart:n._chart,tooltip:n,replay:t})}drawCaret(e,t,n,r){const o=this.getCaretPosition(e,n,r);t.lineTo(o.x1,o.y1),t.lineTo(o.x2,o.y2),t.lineTo(o.x3,o.y3)}getCaretPosition(e,t,n){const{xAlign:r,yAlign:o}=this,{cornerRadius:i,caretSize:a}=n,{x:s,y:l}=e,{width:c,height:u}=t;let d,f,h,p,g,m;return"center"===o?(g=l+u/2,"left"===r?(d=s,f=d-a,p=g+a,m=g-a):(d=s+c,f=d+a,p=g-a,m=g+a),h=d):(f="left"===r?s+i+a:"right"===r?s+c-i-a:this.caretX,"top"===o?(p=l,g=p-a,d=f-a,h=f+a):(p=l+u,g=p+a,d=f+a,h=f-a),m=p),{x1:d,x2:f,x3:h,y1:p,y2:g,y3:m}}drawTitle(e,t,n){const r=this,o=r.title,i=o.length;let a,s,l;if(i){const c=Qt(n.rtl,r.x,r.width);for(e.x=ti(r,n.titleAlign,n),t.textAlign=c.textAlign(n.titleAlign),t.textBaseline="middle",a=at(n.titleFont),s=n.titleSpacing,t.fillStyle=n.titleColor,t.font=a.string,l=0;l<i;++l)t.fillText(o[l],c.x(e.x),e.y+a.lineHeight/2),e.y+=a.lineHeight+s,l+1===i&&(e.y+=n.titleMarginBottom-s)}}_drawColorBox(e,t,n,r,o){const i=this,a=i.labelColors[n],s=i.labelPointStyles[n],{boxHeight:l,boxWidth:c}=o,u=at(o.bodyFont),d=ti(i,"left",o),f=r.x(d),h=l<u.lineHeight?(u.lineHeight-l)/2:0,p=t.y+h;if(o.usePointStyle){const t={radius:Math.min(c,l)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=r.leftForLtr(f,c)+c/2,i=p+l/2;e.strokeStyle=o.multiKeyBackground,e.fillStyle=o.multiKeyBackground,$e(e,t,n,i),e.strokeStyle=a.borderColor,e.fillStyle=a.backgroundColor,$e(e,t,n,i)}else{e.lineWidth=a.borderWidth||1,e.strokeStyle=a.borderColor,e.setLineDash(a.borderDash||[]),e.lineDashOffset=a.borderDashOffset||0;const t=r.leftForLtr(f,c),n=r.leftForLtr(r.xPlus(f,1),c-2),i=ot(a.borderRadius);Object.values(i).some((e=>0!==e))?(e.beginPath(),e.fillStyle=o.multiKeyBackground,Ze(e,{x:t,y:p,w:c,h:l,radius:i}),e.fill(),e.stroke(),e.fillStyle=a.backgroundColor,e.beginPath(),Ze(e,{x:n,y:p+1,w:c-2,h:l-2,radius:i}),e.fill()):(e.fillStyle=o.multiKeyBackground,e.fillRect(t,p,c,l),e.strokeRect(t,p,c,l),e.fillStyle=a.backgroundColor,e.fillRect(n,p+1,c-2,l-2))}e.fillStyle=i.labelTextColors[n]}drawBody(e,t,n){const r=this,{body:o}=r,{bodySpacing:i,bodyAlign:a,displayColors:s,boxHeight:l,boxWidth:c}=n,u=at(n.bodyFont);let d=u.lineHeight,f=0;const h=Qt(n.rtl,r.x,r.width),p=function(n){t.fillText(n,h.x(e.x+f),e.y+d/2),e.y+=d+i},g=h.textAlign(a);let m,b,v,x,_,w,k;for(t.textAlign=a,t.textBaseline="middle",t.font=u.string,e.x=ti(r,g,n),t.fillStyle=n.bodyColor,y(r.beforeBody,p),f=s&&"right"!==g?"center"===a?c/2+1:c+2:0,x=0,w=o.length;x<w;++x){for(m=o[x],b=r.labelTextColors[x],t.fillStyle=b,y(m.before,p),v=m.lines,s&&v.length&&(r._drawColorBox(t,e,x,h,n),d=Math.max(u.lineHeight,l)),_=0,k=v.length;_<k;++_)p(v[_]),d=u.lineHeight;y(m.after,p)}f=0,d=u.lineHeight,y(r.afterBody,p),e.y-=i}drawFooter(e,t,n){const r=this,o=r.footer,i=o.length;let a,s;if(i){const l=Qt(n.rtl,r.x,r.width);for(e.x=ti(r,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=l.textAlign(n.footerAlign),t.textBaseline="middle",a=at(n.footerFont),t.fillStyle=n.footerColor,t.font=a.string,s=0;s<i;++s)t.fillText(o[s],l.x(e.x),e.y+a.lineHeight/2),e.y+=a.lineHeight+n.footerSpacing}}drawBackground(e,t,n,r){const{xAlign:o,yAlign:i}=this,{x:a,y:s}=e,{width:l,height:c}=n,u=r.cornerRadius;t.fillStyle=r.backgroundColor,t.strokeStyle=r.borderColor,t.lineWidth=r.borderWidth,t.beginPath(),t.moveTo(a+u,s),"top"===i&&this.drawCaret(e,t,n,r),t.lineTo(a+l-u,s),t.quadraticCurveTo(a+l,s,a+l,s+u),"center"===i&&"right"===o&&this.drawCaret(e,t,n,r),t.lineTo(a+l,s+c-u),t.quadraticCurveTo(a+l,s+c,a+l-u,s+c),"bottom"===i&&this.drawCaret(e,t,n,r),t.lineTo(a+u,s+c),t.quadraticCurveTo(a,s+c,a,s+c-u),"center"===i&&"left"===o&&this.drawCaret(e,t,n,r),t.lineTo(a,s+u),t.quadraticCurveTo(a,s,a+u,s),t.closePath(),t.fill(),r.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this,n=t._chart,r=t.$animations,o=r&&r.x,i=r&&r.y;if(o||i){const r=qo[e.position].call(t,t._active,t._eventPosition);if(!r)return;const a=t._size=Go(t,e),s=Object.assign({},r,t._size),l=Jo(n,e,s),c=ei(e,s,l,n);o._to===c.x&&i._to===c.y||(t.xAlign=l.xAlign,t.yAlign=l.yAlign,t.width=a.width,t.height=a.height,t.caretX=r.x,t.caretY=r.y,t._resolveAnimations().update(t,c))}}draw(e){const t=this,n=t.options.setContext(t.getContext());let r=t.opacity;if(!r)return;t._updateAnimationTarget(n);const o={width:t.width,height:t.height},i={x:t.x,y:t.y};r=Math.abs(r)<.001?0:r;const a=it(n.padding),s=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;n.enabled&&s&&(e.save(),e.globalAlpha=r,t.drawBackground(i,e,o,n),Xt(e,n.textDirection),i.y+=a.top,t.drawTitle(i,e,n),t.drawBody(i,e,n),t.drawFooter(i,e,n),Kt(e,n.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this,r=n._active,o=e.map((({datasetIndex:e,index:t})=>{const r=n._chart.getDatasetMeta(e);if(!r)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:r.data[t],index:t}})),i=!x(r,o),a=n._positionChanged(o,t);(i||a)&&(n._active=o,n._eventPosition=t,n.update(!0))}handleEvent(e,t){const n=this,r=n.options,o=n._active||[];let i=!1,a=[];"mouseout"!==e.type&&(a=n._chart.getElementsAtEventForMode(e,r.mode,r,t),r.reverse&&a.reverse());const s=n._positionChanged(a,e);return i=t||!x(a,o)||s,i&&(n._active=a,(r.enabled||r.external)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0,t))),i}_positionChanged(e,t){const{caretX:n,caretY:r,options:o}=this,i=qo[o.position].call(this,e,t);return!1!==i&&(n!==i.x||r!==i.y)}}oi.positioners=qo;var ii={id:"tooltip",_element:oi,positioners:qo,afterInit(e,t,n){n&&(e.tooltip=new oi({_chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip,n={tooltip:t};!1!==e.notifyPlugins("beforeTooltipDraw",n)&&(t&&t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n))},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:c,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,r=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(r>0&&t.dataIndex<r)return n[t.dataIndex]}return""},afterTitle:c,beforeBody:c,beforeLabel:c,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return d(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:c,afterBody:c,beforeFooter:c,footer:c,afterFooter:c}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},ai=Object.freeze({__proto__:null,Decimation:Eo,Filler:Vo,Legend:Uo,Title:Yo,Tooltip:ii});class si extends Er{constructor(e){super(e),this._startValue=void 0,this._valueRange=0}parse(e,t){if(d(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:J(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n){const r=e.indexOf(t);return-1===r?((e,t,n)=>"string"==typeof t?e.push(t)-1:isNaN(t)?null:n)(e,t,n):r!==e.lastIndexOf(t)?n:r}(n,e,m(t,e)),n.length-1)}determineDataLimits(){const e=this,{minDefined:t,maxDefined:n}=e.getUserBounds();let{min:r,max:o}=e.getMinMax(!0);"ticks"===e.options.bounds&&(t||(r=0),n||(o=e.getLabels().length-1)),e.min=r,e.max=o}buildTicks(){const e=this,t=e.min,n=e.max,r=e.options.offset,o=[];let i=e.getLabels();i=0===t&&n===i.length-1?i:i.slice(t,n+1),e._valueRange=Math.max(i.length-(r?0:1),1),e._startValue=e.min-(r?.5:0);for(let e=t;e<=n;e++)o.push({value:e});return o}getLabelForValue(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}configure(){const e=this;super.configure(),e.isHorizontal()||(e._reversePixels=!e._reversePixels)}getPixelForValue(e){const t=this;return"number"!=typeof e&&(e=t.parse(e)),null===e?NaN:t.getPixelForDecimal((e-t._startValue)/t._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){const t=this;return Math.round(t._startValue+t.getDecimalForPixel(e)*t._valueRange)}getBasePixel(){return this.bottom}}function li(e,t,{horizontal:n,minRotation:r}){const o=Y(r),i=(n?Math.sin(o):Math.cos(o))||.001,a=.75*t*(""+e).length;return Math.min(t/i,a)}si.id="category",si.defaults={ticks:{callback:si.prototype.getLabelForValue}};class ci extends Er{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return d(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const e=this,{beginAtZero:t}=e.options,{minDefined:n,maxDefined:r}=e.getUserBounds();let{min:o,max:i}=e;const a=e=>o=n?o:e,s=e=>i=r?i:e;if(t){const e=V(o),t=V(i);e<0&&t<0?s(0):e>0&&t>0&&a(0)}o===i&&(s(i+1),t||a(o-1)),e.min=o,e.max=i}getTickLimit(){const e=this,t=e.options.ticks;let n,{maxTicksLimit:r,stepSize:o}=t;return o?n=Math.ceil(e.max/o)-Math.floor(e.min/o)+1:(n=e.computeTickLimit(),r=r||11),r&&(n=Math.min(r,n)),n}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this,t=e.options,n=t.ticks;let r=e.getTickLimit();r=Math.max(2,r);const o=function(e,t){const n=[],{step:r,min:o,max:i,precision:a,count:s,maxTicks:l,maxDigits:c,includeBounds:u}=e,f=r||1,h=l-1,{min:p,max:g}=t,m=!d(o),b=!d(i),v=!d(s),y=(g-p)/(c+1);let x,_,w,k,S=W((g-p)/h/f)*f;if(S<1e-14&&!m&&!b)return[{value:p},{value:g}];k=Math.ceil(g/S)-Math.floor(p/S),k>h&&(S=W(k*S/h/f)*f),d(a)||(x=Math.pow(10,a),S=Math.ceil(S*x)/x),_=Math.floor(p/S)*S,w=Math.ceil(g/S)*S,m&&b&&r&&function(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}((i-o)/r,S/1e3)?(k=Math.min((i-o)/S,l),S=(i-o)/k,_=o,w=i):v?(_=m?o:_,w=b?i:w,k=s-1,S=(w-_)/k):(k=(w-_)/S,k=U(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const M=Math.max(Q(S),Q(_));x=Math.pow(10,d(a)?M:a),_=Math.round(_*x)/x,w=Math.round(w*x)/x;let E=0;for(m&&(u&&_!==o?(n.push({value:o}),_<o&&E++,U(Math.round((_+E*S)*x)/x,o,li(o,y,e))&&E++):_<o&&E++);E<k;++E)n.push({value:Math.round((_+E*S)*x)/x});return b&&u&&w!==i?U(n[n.length-1].value,i,li(i,y,e))?n[n.length-1].value=i:n.push({value:i}):b&&w!==i||n.push({value:w}),n}({maxTicks:r,min:t.min,max:t.max,precision:n.precision,step:n.stepSize,count:n.count,maxDigits:e._maxDigits(),horizontal:e.isHorizontal(),minRotation:n.minRotation||0,includeBounds:!1!==n.includeBounds},e._range||e);return"ticks"===t.bounds&&$(o,e,"value"),t.reverse?(o.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),o}configure(){const e=this,t=e.ticks;let n=e.min,r=e.max;if(super.configure(),e.options.offset&&t.length){const e=(r-n)/Math.max(t.length-1,1)/2;n-=e,r+=e}e._startValue=n,e._endValue=r,e._valueRange=r-n}getLabelForValue(e){return qt(e,this.chart.options.locale)}}class ui extends ci{determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!0);e.min=p(t)?t:0,e.max=p(n)?n:1,e.handleTickRangeOptions()}computeTickLimit(){const e=this,t=e.isHorizontal(),n=t?e.width:e.height,r=Y(e.options.ticks.minRotation),o=(t?Math.sin(r):Math.cos(r))||.001,i=e._resolveTickFontOptions(0);return Math.ceil(n/Math.min(40,i.lineHeight/o))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}function di(e){return 1==e/Math.pow(10,Math.floor(B(e)))}ui.id="linear",ui.defaults={ticks:{callback:vr.formatters.numeric}};class fi extends Er{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=ci.prototype.parse.apply(this,[e,t]);if(0!==n)return p(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!0);e.min=p(t)?Math.max(0,t):null,e.max=p(n)?Math.max(0,n):null,e.options.beginAtZero&&(e._zero=!0),e.handleTickRangeOptions()}handleTickRangeOptions(){const e=this,{minDefined:t,maxDefined:n}=e.getUserBounds();let r=e.min,o=e.max;const i=e=>r=t?r:e,a=e=>o=n?o:e,s=(e,t)=>Math.pow(10,Math.floor(B(e))+t);r===o&&(r<=0?(i(1),a(10)):(i(s(r,-1)),a(s(o,1)))),r<=0&&i(s(o,-1)),o<=0&&a(s(r,1)),e._zero&&e.min!==e._suggestedMin&&r===s(e.min,0)&&i(s(r,-1)),e.min=r,e.max=o}buildTicks(){const e=this,t=e.options,n=function(e,t){const n=Math.floor(B(t.max)),r=Math.ceil(t.max/Math.pow(10,n)),o=[];let i=g(e.min,Math.pow(10,Math.floor(B(t.min)))),a=Math.floor(B(i)),s=Math.floor(i/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{o.push({value:i,major:di(i)}),++s,10===s&&(s=1,++a,l=a>=0?1:l),i=Math.round(s*Math.pow(10,a)*l)/l}while(a<n||a===n&&s<r);const c=g(e.max,i);return o.push({value:c,major:di(i)}),o}({min:e._userMin,max:e._userMax},e);return"ticks"===t.bounds&&$(n,e,"value"),t.reverse?(n.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n}getLabelForValue(e){return void 0===e?"0":qt(e,this.chart.options.locale)}configure(){const e=this,t=e.min;super.configure(),e._startValue=B(t),e._valueRange=B(e.max)-B(t)}getPixelForValue(e){const t=this;return void 0!==e&&0!==e||(e=t.min),null===e||isNaN(e)?NaN:t.getPixelForDecimal(e===t.min?0:(B(e)-t._startValue)/t._valueRange)}getValueForPixel(e){const t=this,n=t.getDecimalForPixel(e);return Math.pow(10,t._startValue+n*t._valueRange)}}function hi(e){const t=e.ticks;if(t.display&&e.display){const e=it(t.backdropPadding);return m(t.font&&t.font.size,Be.font.size)+e.height}return 0}function pi(e,t,n,r,o){return e===r||e===o?{start:t-n/2,end:t+n/2}:e<r||e>o?{start:t-n,end:t}:{start:t,end:t+n}}function gi(e){return 0===e||180===e?"center":e<180?"left":"right"}function mi(e,t,n){90===e||270===e?n.y-=t.h/2:(e>270||e<90)&&(n.y-=t.h)}function bi(e,t,n,r){const{ctx:o}=e;if(n)o.arc(e.xCenter,e.yCenter,t,0,R);else{let n=e.getPointPosition(0,t);o.moveTo(n.x,n.y);for(let i=1;i<r;i++)n=e.getPointPosition(i,t),o.lineTo(n.x,n.y)}}function vi(e){return H(e)?e:0}fi.id="logarithmic",fi.defaults={ticks:{callback:vr.formatters.logarithmic,major:{enabled:!0}}};class yi extends ci{constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=hi(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2}determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!1);e.min=p(t)&&!isNaN(t)?t:0,e.max=p(n)&&!isNaN(n)?n:0,e.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/hi(this.options))}generateTickLabels(e){const t=this;ci.prototype.generateTickLabels.call(t,e),t._pointLabels=t.getLabels().map(((e,n)=>{const r=v(t.options.pointLabels.callback,[e,n],t);return r||0===r?r:""}))}fit(){const e=this,t=e.options;t.display&&t.pointLabels.display?function(e){const t={l:0,r:e.width,t:0,b:e.height-e.paddingTop},n={};let r,o,i;const a=[],s=[],l=e.getLabels().length;for(r=0;r<l;r++){const l=e.options.pointLabels.setContext(e.getContext(r));s[r]=l.padding,i=e.getPointPosition(r,e.drawingArea+s[r]);const h=at(l.font);e.ctx.font=h.string,c=e.ctx,u=h.lineHeight,o=f(d=e._pointLabels[r])?{w:We(c,c.font,d),h:d.length*u}:{w:c.measureText(d).width,h:u},a[r]=o;const p=e.getIndexAngle(r),g=q(p),m=pi(g,i.x,o.w,0,180),b=pi(g,i.y,o.h,90,270);m.start<t.l&&(t.l=m.start,n.l=p),m.end>t.r&&(t.r=m.end,n.r=p),b.start<t.t&&(t.t=b.start,n.t=p),b.end>t.b&&(t.b=b.end,n.b=p)}var c,u,d;e._setReductions(e.drawingArea,t,n),e._pointLabelItems=[];const h=e.options,p=hi(h),g=e.getDistanceFromCenterForValue(h.ticks.reverse?e.min:e.max);for(r=0;r<l;r++){const t=0===r?p/2:0,n=e.getPointPosition(r,g+t+s[r]),o=q(e.getIndexAngle(r)),i=a[r];mi(o,i,n);const l=gi(o);let c;c="left"===l?n.x:"center"===l?n.x-i.w/2:n.x-i.w;const u=c+i.w;e._pointLabelItems[r]={x:n.x,y:n.y,textAlign:l,left:c,top:n.y,right:u,bottom:n.y+i.h}}}(e):e.setCenterPoint(0,0,0,0)}_setReductions(e,t,n){const r=this;let o=t.l/Math.sin(n.l),i=Math.max(t.r-r.width,0)/Math.sin(n.r),a=-t.t/Math.cos(n.t),s=-Math.max(t.b-(r.height-r.paddingTop),0)/Math.cos(n.b);o=vi(o),i=vi(i),a=vi(a),s=vi(s),r.drawingArea=Math.max(e/2,Math.min(Math.floor(e-(o+i)/2),Math.floor(e-(a+s)/2))),r.setCenterPoint(o,i,a,s)}setCenterPoint(e,t,n,r){const o=this,i=o.width-t-o.drawingArea,a=e+o.drawingArea,s=n+o.drawingArea,l=o.height-o.paddingTop-r-o.drawingArea;o.xCenter=Math.floor((a+i)/2+o.left),o.yCenter=Math.floor((s+l)/2+o.top+o.paddingTop)}getIndexAngle(e){return G(e*(R/this.getLabels().length)+Y(this.options.startAngle||0))}getDistanceFromCenterForValue(e){const t=this;if(d(e))return NaN;const n=t.drawingArea/(t.max-t.min);return t.options.reverse?(t.max-e)*n:(e-t.min)*n}getValueForDistanceFromCenter(e){if(d(e))return NaN;const t=this,n=e/(t.drawingArea/(t.max-t.min));return t.options.reverse?t.max-n:t.min+n}getPointPosition(e,t){const n=this,r=n.getIndexAngle(e)-j;return{x:Math.cos(r)*t+n.xCenter,y:Math.sin(r)*t+n.yCenter,angle:r}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:r,bottom:o}=this._pointLabelItems[e];return{left:t,top:n,right:r,bottom:o}}drawBackground(){const e=this,{backgroundColor:t,grid:{circular:n}}=e.options;if(t){const r=e.ctx;r.save(),r.beginPath(),bi(e,e.getDistanceFromCenterForValue(e._endValue),n,e.getLabels().length),r.closePath(),r.fillStyle=t,r.fill(),r.restore()}}drawGrid(){const e=this,t=e.ctx,n=e.options,{angleLines:r,grid:o}=n,i=e.getLabels().length;let a,s,l;if(n.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:r}}=e;for(let o=t-1;o>=0;o--){const t=r.setContext(e.getContext(o)),i=at(t.font),{x:a,y:s,textAlign:l,left:c,top:u,right:f,bottom:h}=e._pointLabelItems[o],{backdropColor:p}=t;if(!d(p)){const e=it(t.backdropPadding);n.fillStyle=p,n.fillRect(c-e.left,u-e.top,f-c+e.width,h-u+e.height)}Ge(n,e._pointLabels[o],a,s+i.lineHeight/2,i,{color:t.color,textAlign:l,textBaseline:"middle"})}}(e,i),o.display&&e.ticks.forEach(((t,n)=>{if(0!==n){s=e.getDistanceFromCenterForValue(t.value);const r=o.setContext(e.getContext(n-1));!function(e,t,n,r){const o=e.ctx,i=t.circular,{color:a,lineWidth:s}=t;!i&&!r||!a||!s||n<0||(o.save(),o.strokeStyle=a,o.lineWidth=s,o.setLineDash(t.borderDash),o.lineDashOffset=t.borderDashOffset,o.beginPath(),bi(e,n,i,r),o.closePath(),o.stroke(),o.restore())}(e,r,s,i)}})),r.display){for(t.save(),a=e.getLabels().length-1;a>=0;a--){const o=r.setContext(e.getContext(a)),{color:i,lineWidth:c}=o;c&&i&&(t.lineWidth=c,t.strokeStyle=i,t.setLineDash(o.borderDash),t.lineDashOffset=o.borderDashOffset,s=e.getDistanceFromCenterForValue(n.ticks.reverse?e.min:e.max),l=e.getPointPosition(a,s),t.beginPath(),t.moveTo(e.xCenter,e.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const e=this,t=e.ctx,n=e.options,r=n.ticks;if(!r.display)return;const o=e.getIndexAngle(0);let i,a;t.save(),t.translate(e.xCenter,e.yCenter),t.rotate(o),t.textAlign="center",t.textBaseline="middle",e.ticks.forEach(((o,s)=>{if(0===s&&!n.reverse)return;const l=r.setContext(e.getContext(s)),c=at(l.font);if(i=e.getDistanceFromCenterForValue(e.ticks[s].value),l.showLabelBackdrop){a=t.measureText(o.label).width,t.fillStyle=l.backdropColor;const e=it(l.backdropPadding);t.fillRect(-a/2-e.left,-i-c.size/2-e.top,a+e.width,c.size+e.height)}Ge(t,o.label,0,-i,c,{color:l.color})})),t.restore()}drawTitle(){}}yi.id="radialLinear",yi.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:vr.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5}},yi.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},yi.descriptors={angleLines:{_fallback:"grid"}};const xi={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},_i=Object.keys(xi);function wi(e,t){return e-t}function ki(e,t){if(d(t))return null;const n=e._adapter,{parser:r,round:o,isoWeekday:i}=e._parseOpts;let a=t;return"function"==typeof r&&(a=r(a)),p(a)||(a="string"==typeof r?n.parse(a,r):n.parse(a)),null===a?null:(o&&(a="week"!==o||!H(i)&&!0!==i?n.startOf(a,o):n.startOf(a,"isoWeek",i)),+a)}function Si(e,t,n,r){const o=_i.length;for(let i=_i.indexOf(e);i<o-1;++i){const e=xi[_i[i]],o=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(o*e.size))<=r)return _i[i]}return _i[o-1]}function Mi(e,t,n){if(n){if(n.length){const{lo:r,hi:o}=lt(n,t);e[n[r]>=t?n[r]:n[o]]=!0}}else e[t]=!0}function Ei(e,t,n){const r=[],o={},i=t.length;let a,s;for(a=0;a<i;++a)s=t[a],o[s]=a,r.push({value:s,major:!1});return 0!==i&&n?function(e,t,n,r){const o=e._adapter,i=+o.startOf(t[0].value,r),a=t[t.length-1].value;let s,l;for(s=i;s<=a;s=+o.add(s,1,r))l=n[s],l>=0&&(t[l].major=!0);return t}(e,r,o,n):r}class Ci extends Er{constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t){const n=e.time||(e.time={}),r=this._adapter=new Nn._date(e.adapters.date);M(n.displayFormats,r.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:ki(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this,t=e.options,n=e._adapter,r=t.time.unit||"day";let{min:o,max:i,minDefined:a,maxDefined:s}=e.getUserBounds();function l(e){a||isNaN(e.min)||(o=Math.min(o,e.min)),s||isNaN(e.max)||(i=Math.max(i,e.max))}a&&s||(l(e._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||l(e.getMinMax(!1))),o=p(o)&&!isNaN(o)?o:+n.startOf(Date.now(),r),i=p(i)&&!isNaN(i)?i:+n.endOf(Date.now(),r)+1,e.min=Math.min(o,i-1),e.max=Math.max(o+1,i)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this,t=e.options,n=t.time,r=t.ticks,o="labels"===r.source?e.getLabelTimestamps():e._generate();"ticks"===t.bounds&&o.length&&(e.min=e._userMin||o[0],e.max=e._userMax||o[o.length-1]);const i=e.min,a=function(e,t,n){let r=0,o=e.length;for(;r<o&&e[r]<t;)r++;for(;o>r&&e[o-1]>n;)o--;return r>0||o<e.length?e.slice(r,o):e}(o,i,e.max);return e._unit=n.unit||(r.autoSkip?Si(n.minUnit,e.min,e.max,e._getLabelCapacity(i)):function(e,t,n,r,o){for(let i=_i.length-1;i>=_i.indexOf(n);i--){const n=_i[i];if(xi[n].common&&e._adapter.diff(o,r,n)>=t-1)return n}return _i[n?_i.indexOf(n):0]}(e,a.length,n.minUnit,e.min,e.max)),e._majorUnit=r.major.enabled&&"year"!==e._unit?function(e){for(let t=_i.indexOf(e)+1,n=_i.length;t<n;++t)if(xi[_i[t]].common)return _i[t]}(e._unit):void 0,e.initOffsets(o),t.reverse&&a.reverse(),Ei(e,a,e._majorUnit)}initOffsets(e){const t=this;let n,r,o=0,i=0;t.options.offset&&e.length&&(n=t.getDecimalForValue(e[0]),o=1===e.length?1-n:(t.getDecimalForValue(e[1])-n)/2,r=t.getDecimalForValue(e[e.length-1]),i=1===e.length?r:(r-t.getDecimalForValue(e[e.length-2]))/2);const a=e.length<3?.5:.25;o=J(o,0,a),i=J(i,0,a),t._offsets={start:o,end:i,factor:1/(o+1+i)}}_generate(){const e=this,t=e._adapter,n=e.min,r=e.max,o=e.options,i=o.time,a=i.unit||Si(i.minUnit,n,r,e._getLabelCapacity(n)),s=m(i.stepSize,1),l="week"===a&&i.isoWeekday,c=H(l)||!0===l,u={};let d,f,h=n;if(c&&(h=+t.startOf(h,"isoWeek",l)),h=+t.startOf(h,c?"day":a),t.diff(r,n,a)>1e5*s)throw new Error(n+" and "+r+" are too far apart with stepSize of "+s+" "+a);const p="data"===o.ticks.source&&e.getDataTimestamps();for(d=h,f=0;d<r;d=+t.add(d,s,a),f++)Mi(u,d,p);return d!==r&&"ticks"!==o.bounds&&1!==f||Mi(u,d,p),Object.keys(u).sort(((e,t)=>e-t)).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}_tickFormatFunction(e,t,n,r){const o=this,i=o.options,a=i.time.displayFormats,s=o._unit,l=o._majorUnit,c=s&&a[s],u=l&&a[l],d=n[t],f=l&&u&&d&&d.major,h=o._adapter.format(e,r||(f?u:c)),p=i.ticks.callback;return p?v(p,[h,t,n],o):h}generateTickLabels(e){let t,n,r;for(t=0,n=e.length;t<n;++t)r=e[t],r.label=this._tickFormatFunction(r.value,t,e)}getDecimalForValue(e){const t=this;return null===e?NaN:(e-t.min)/(t.max-t.min)}getPixelForValue(e){const t=this,n=t._offsets,r=t.getDecimalForValue(e);return t.getPixelForDecimal((n.start+r)*n.factor)}getValueForPixel(e){const t=this,n=t._offsets,r=t.getDecimalForPixel(e)/n.factor-n.end;return t.min+r*(t.max-t.min)}_getLabelSize(e){const t=this,n=t.options.ticks,r=t.ctx.measureText(e).width,o=Y(t.isHorizontal()?n.maxRotation:n.minRotation),i=Math.cos(o),a=Math.sin(o),s=t._resolveTickFontOptions(0).size;return{w:r*i+s*a,h:r*a+s*i}}_getLabelCapacity(e){const t=this,n=t.options.time,r=n.displayFormats,o=r[n.unit]||r.millisecond,i=t._tickFormatFunction(e,0,Ei(t,[e],t._majorUnit),o),a=t._getLabelSize(i),s=Math.floor(t.isHorizontal()?t.width/a.w:t.height/a.h)-1;return s>0?s:1}getDataTimestamps(){const e=this;let t,n,r=e._cache.data||[];if(r.length)return r;const o=e.getMatchingVisibleMetas();if(e._normalized&&o.length)return e._cache.data=o[0].controller.getAllParsedValues(e);for(t=0,n=o.length;t<n;++t)r=r.concat(o[t].controller.getAllParsedValues(e));return e._cache.data=e.normalize(r)}getLabelTimestamps(){const e=this,t=e._cache.labels||[];let n,r;if(t.length)return t;const o=e.getLabels();for(n=0,r=o.length;n<r;++n)t.push(ki(e,o[n]));return e._cache.labels=e._normalized?t:e.normalize(t)}normalize(e){return ht(e.sort(wi))}}function Pi(e,t,n){let r,o,i,a;if(n)r=Math.floor(t),o=Math.ceil(t),i=e[r],a=e[o];else{const n=lt(e,t);i=n.lo,a=n.hi,r=e[i],o=e[a]}const s=o-r;return s?i+(a-i)*(t-r)/s:i}Ci.id="time",Ci.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Oi extends Ci{constructor(e){super(e),this._table=[],this._maxIndex=void 0}initOffsets(){const e=this,t=e._getTimestampsForTable();e._table=e.buildLookupTable(t),e._maxIndex=e._table.length-1,super.initOffsets(t)}buildLookupTable(e){const{min:t,max:n}=this;if(!e.length)return[{time:t,pos:0},{time:n,pos:1}];const r=[t];let o,i,a;for(o=0,i=e.length;o<i;++o)a=e[o],a>t&&a<n&&r.push(a);return r.push(n),r}_getTimestampsForTable(){const e=this;let t=e._cache.all||[];if(t.length)return t;const n=e.getDataTimestamps(),r=e.getLabelTimestamps();return t=n.length&&r.length?e.normalize(n.concat(r)):n.length?n:r,t=e._cache.all=t,t}getPixelForValue(e,t){const n=this,r=n._offsets,o=n._normalized&&n._maxIndex>0&&!d(t)?t/n._maxIndex:n.getDecimalForValue(e);return n.getPixelForDecimal((r.start+o)*r.factor)}getDecimalForValue(e){return Pi(this._table,e)/this._maxIndex}getValueForPixel(e){const t=this,n=t._offsets,r=t.getDecimalForPixel(e)/n.factor-n.end;return Pi(t._table,r*this._maxIndex,!0)}}Oi.id="timeseries",Oi.defaults=Ci.defaults;const Ti=[Rn,ko,ai,Object.freeze({__proto__:null,CategoryScale:si,LinearScale:ui,LogarithmicScale:fi,RadialLinearScale:yi,TimeScale:Ci,TimeSeriesScale:Oi})];Gr.register(...Ti);const Di=Gr;var Li=n(2492),Ri=n.n(Li),Ai=n(8583),zi=n.n(Ai),Ni=n(3311),ji=n.n(Ni);function Fi(){return(Fi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Ii(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var Bi=(0,e.forwardRef)((function(t,n){var r=t.id,o=t.className,i=t.height,a=void 0===i?150:i,s=t.width,l=void 0===s?300:s,c=t.redraw,u=void 0!==c&&c,d=t.type,f=t.data,h=t.options,p=void 0===h?{}:h,g=t.plugins,m=void 0===g?[]:g,b=t.getDatasetAtEvent,v=t.getElementAtEvent,y=t.getElementsAtEvent,x=t.fallbackContent,_=Ii(t,["id","className","height","width","redraw","type","data","options","plugins","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","fallbackContent"]),w=(0,e.useRef)(null),k=(0,e.useMemo)((function(){return"function"==typeof f?w.current?f(w.current):{}:Ri()({},f)}),[f,w.current]),S=(0,e.useState)(),M=S[0],E=S[1];(0,e.useImperativeHandle)(n,(function(){return M}),[M]);var C=function(){w.current&&E(new Di(w.current,{type:d,data:k,options:p,plugins:m}))},P=function(){M&&M.destroy()};return(0,e.useEffect)((function(){return C(),function(){return P()}}),[]),(0,e.useEffect)((function(){u?(P(),setTimeout((function(){C()}),0)):function(){if(M){if(p&&(M.options=Fi({},p)),!M.config.data)return M.config.data=k,void M.update();var e=k.datasets,t=void 0===e?[]:e,n=Ii(k,["datasets"]),r=M.config.data.datasets,o=void 0===r?[]:r;zi()(M.config.data,n),M.config.data.datasets=t.map((function(e){var t=ji()(o,(function(t){return t.label===e.label&&t.type===e.type}));return t&&e.data?(t.data?t.data.length=e.data.length:t.data=[],zi()(t.data,e.data),Fi({},t,e,{data:t.data})):e})),M.update()}}()}),[t,k]),e.createElement("canvas",Object.assign({},_,{height:a,width:l,ref:w,id:r,className:o,onClick:function(e){M&&(b&&b(M.getElementsAtEventForMode(e,"dataset",{intersect:!0},!1),e),v&&v(M.getElementsAtEventForMode(e,"nearest",{intersect:!0},!1),e),y&&y(M.getElementsAtEventForMode(e,"index",{intersect:!0},!1),e))},"data-testid":"canvas",role:"img"}),x)})),Vi=(0,e.forwardRef)((function(t,n){return e.createElement(Bi,Object.assign({},t,{type:"line",ref:n,options:t.options||{}}))}));function Wi(e){return(Wi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Hi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ui(e,t){return(Ui=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function $i(e,t){return!t||"object"!==Wi(t)&&"function"!=typeof t?Yi(e):t}function Yi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function qi(e){return(qi=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}(0,e.forwardRef)((function(t,n){return e.createElement(Bi,Object.assign({},t,{type:"bar",ref:n,options:t.options||{}}))})),(0,e.forwardRef)((function(t,n){return e.createElement(Bi,Object.assign({},t,{type:"radar",ref:n,options:t.options||{}}))})),(0,e.forwardRef)((function(t,n){return e.createElement(Bi,Object.assign({},t,{type:"doughnut",ref:n,options:t.options||{}}))})),(0,e.forwardRef)((function(t,n){return e.createElement(Bi,Object.assign({},t,{type:"polarArea",ref:n,options:t.options||{}}))})),(0,e.forwardRef)((function(t,n){return e.createElement(Bi,Object.assign({},t,{type:"bubble",ref:n,options:t.options||{}}))})),(0,e.forwardRef)((function(t,n){return e.createElement(Bi,Object.assign({},t,{type:"pie",ref:n,options:t.options||{}}))})),(0,e.forwardRef)((function(t,n){return e.createElement(Bi,Object.assign({},t,{type:"scatter",ref:n,options:t.options||{}}))}));var Qi=function(t){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ui(e,t)}(l,t);var n,r,i,a,s=(i=l,a=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=qi(i);if(a){var n=qi(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return $i(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=s.call(this,e)).state={currencies:[],usdRates:[],gbpRates:[],euRates:[],dates:[],chartData:{}},t.charts=t.charts.bind(Yi(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){var e=this;o().get("http://localhost:3000/api").then((function(t){console.log(t.data);var n={};return e.setState({usdRates:t.data.usdRates,dates:t.data.dates},(function(){console.log(e.state.usdRates),n={labels:e.state.dates,datasets:[{label:"USD/BTC",data:e.state.usdRates,fill:!0,backgroundColor:"rgba(75,192,192,0.2)",borderColor:"rgba(75,192,192,1)"}]}})),n})).then((function(t){console.log(t),e.setState({chartData:t},(function(){return console.log(e.state.chartData)}))})).catch((function(e){return console.log(e)}))}},{key:"charts",value:function(e){console.log(e);var t={type:"line",data:{labels:this.state.currencies,datasets:[{label:"BTC",data:this.state.rates}]}};return new Chart(e,t)}},{key:"render",value:function(){return e.createElement("div",null,e.createElement(Vi,{data:this.state.chartData}))}}])&&Hi(n.prototype,r),l}(e.Component);t.render(e.createElement(Qi,null),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,